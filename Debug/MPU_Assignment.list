
MPU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080042f8  080042f8  000052f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e4  080043e4  0000607c  2**0
                  CONTENTS
  4 .ARM          00000000  080043e4  080043e4  0000607c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043e4  080043e4  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e4  080043e4  000053e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043e8  080043e8  000053e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080043ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000007c  08004468  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004468  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4fc  00000000  00000000  000060a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002568  00000000  00000000  000155a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00017b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c27  00000000  00000000  00018a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019291  00000000  00000000  000196bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146de  00000000  00000000  00032950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d26b  00000000  00000000  0004702e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4299  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  000d42dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000d888c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080042e0 	.word	0x080042e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080042e0 	.word	0x080042e0

0800014c <fsm_for_button>:

#include "fsm_for_button.h"

enum ButtonState button_state[NO_OF_BUTTONS] = { 1, 1, 1 };

void fsm_for_button(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	////////////////// BUTTON 1 ////////////////////////////
	switch (button_state[MODIFY_BUTTON]) {
 8000150:	4b9a      	ldr	r3, [pc, #616]	@ (80003bc <fsm_for_button+0x270>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b02      	cmp	r3, #2
 8000156:	d055      	beq.n	8000204 <fsm_for_button+0xb8>
 8000158:	2b02      	cmp	r3, #2
 800015a:	dc62      	bgt.n	8000222 <fsm_for_button+0xd6>
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <fsm_for_button+0x1a>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d03b      	beq.n	80001dc <fsm_for_button+0x90>
 8000164:	e05d      	b.n	8000222 <fsm_for_button+0xd6>
	case BUTTON_RELEASED:
		if (is_button_pressed(MODIFY_BUTTON)) {
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fda0 	bl	8000cac <is_button_pressed>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d052      	beq.n	8000218 <fsm_for_button+0xcc>
			LED_A_1_GPIO_Port->ODR |= ALL_LED;
 8000172:	4b93      	ldr	r3, [pc, #588]	@ (80003c0 <fsm_for_button+0x274>)
 8000174:	68db      	ldr	r3, [r3, #12]
 8000176:	4a92      	ldr	r2, [pc, #584]	@ (80003c0 <fsm_for_button+0x274>)
 8000178:	f443 6387 	orr.w	r3, r3, #1080	@ 0x438
 800017c:	60d3      	str	r3, [r2, #12]
			switch (mode) {
 800017e:	4b91      	ldr	r3, [pc, #580]	@ (80003c4 <fsm_for_button+0x278>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b03      	cmp	r3, #3
 8000184:	d01e      	beq.n	80001c4 <fsm_for_button+0x78>
 8000186:	2b03      	cmp	r3, #3
 8000188:	dc20      	bgt.n	80001cc <fsm_for_button+0x80>
 800018a:	2b01      	cmp	r3, #1
 800018c:	d002      	beq.n	8000194 <fsm_for_button+0x48>
 800018e:	2b02      	cmp	r3, #2
 8000190:	d00a      	beq.n	80001a8 <fsm_for_button+0x5c>
 8000192:	e01b      	b.n	80001cc <fsm_for_button+0x80>
			case AUTO:
				mode = MANUAL;
 8000194:	4b8b      	ldr	r3, [pc, #556]	@ (80003c4 <fsm_for_button+0x278>)
 8000196:	2202      	movs	r2, #2
 8000198:	701a      	strb	r2, [r3, #0]
				line_1 = RED;
 800019a:	4b8b      	ldr	r3, [pc, #556]	@ (80003c8 <fsm_for_button+0x27c>)
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
				line_2 = GREEN;
 80001a0:	4b8a      	ldr	r3, [pc, #552]	@ (80003cc <fsm_for_button+0x280>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
				break;
 80001a6:	e015      	b.n	80001d4 <fsm_for_button+0x88>
			case MANUAL:
				mode = MODIFY;
 80001a8:	4b86      	ldr	r3, [pc, #536]	@ (80003c4 <fsm_for_button+0x278>)
 80001aa:	2203      	movs	r2, #3
 80001ac:	701a      	strb	r2, [r3, #0]
				buffer = red_light;
 80001ae:	4b88      	ldr	r3, [pc, #544]	@ (80003d0 <fsm_for_button+0x284>)
 80001b0:	781a      	ldrb	r2, [r3, #0]
 80001b2:	4b88      	ldr	r3, [pc, #544]	@ (80003d4 <fsm_for_button+0x288>)
 80001b4:	701a      	strb	r2, [r3, #0]
				line_1 = RED;
 80001b6:	4b84      	ldr	r3, [pc, #528]	@ (80003c8 <fsm_for_button+0x27c>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	701a      	strb	r2, [r3, #0]
				line_2 = RED;
 80001bc:	4b83      	ldr	r3, [pc, #524]	@ (80003cc <fsm_for_button+0x280>)
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]
				break;
 80001c2:	e007      	b.n	80001d4 <fsm_for_button+0x88>
			case MODIFY:
				mode = INIT;
 80001c4:	4b7f      	ldr	r3, [pc, #508]	@ (80003c4 <fsm_for_button+0x278>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
				break;
 80001ca:	e003      	b.n	80001d4 <fsm_for_button+0x88>
			default:
				mode = INIT;
 80001cc:	4b7d      	ldr	r3, [pc, #500]	@ (80003c4 <fsm_for_button+0x278>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	701a      	strb	r2, [r3, #0]
				break;
 80001d2:	bf00      	nop
			}
			button_state[MODIFY_BUTTON] = BUTTON_PRESSED;
 80001d4:	4b79      	ldr	r3, [pc, #484]	@ (80003bc <fsm_for_button+0x270>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80001da:	e01d      	b.n	8000218 <fsm_for_button+0xcc>
	case BUTTON_PRESSED:
		if (!is_button_pressed(MODIFY_BUTTON)) {
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 fd65 	bl	8000cac <is_button_pressed>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d103      	bne.n	80001f0 <fsm_for_button+0xa4>
			button_state[MODIFY_BUTTON] = BUTTON_RELEASED;
 80001e8:	4b74      	ldr	r3, [pc, #464]	@ (80003bc <fsm_for_button+0x270>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]
		} else {
			if (is_button_pressed_1s(MODIFY_BUTTON)) {
				button_state[MODIFY_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
			}
		}
		break;
 80001ee:	e015      	b.n	800021c <fsm_for_button+0xd0>
			if (is_button_pressed_1s(MODIFY_BUTTON)) {
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 fd75 	bl	8000ce0 <is_button_pressed_1s>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d00f      	beq.n	800021c <fsm_for_button+0xd0>
				button_state[MODIFY_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80001fc:	4b6f      	ldr	r3, [pc, #444]	@ (80003bc <fsm_for_button+0x270>)
 80001fe:	2202      	movs	r2, #2
 8000200:	701a      	strb	r2, [r3, #0]
		break;
 8000202:	e00b      	b.n	800021c <fsm_for_button+0xd0>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (!is_button_pressed(MODIFY_BUTTON)) {
 8000204:	2000      	movs	r0, #0
 8000206:	f000 fd51 	bl	8000cac <is_button_pressed>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d107      	bne.n	8000220 <fsm_for_button+0xd4>
			button_state[MODIFY_BUTTON] = BUTTON_RELEASED;
 8000210:	4b6a      	ldr	r3, [pc, #424]	@ (80003bc <fsm_for_button+0x270>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000216:	e003      	b.n	8000220 <fsm_for_button+0xd4>
		break;
 8000218:	bf00      	nop
 800021a:	e002      	b.n	8000222 <fsm_for_button+0xd6>
		break;
 800021c:	bf00      	nop
 800021e:	e000      	b.n	8000222 <fsm_for_button+0xd6>
		break;
 8000220:	bf00      	nop
	}
	////////////////// BUTTON 2 ////////////////////////////

	switch (button_state[STATE_BUTTON]) {
 8000222:	4b66      	ldr	r3, [pc, #408]	@ (80003bc <fsm_for_button+0x270>)
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2b02      	cmp	r3, #2
 8000228:	f000 809d 	beq.w	8000366 <fsm_for_button+0x21a>
 800022c:	2b02      	cmp	r3, #2
 800022e:	f300 80af 	bgt.w	8000390 <fsm_for_button+0x244>
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <fsm_for_button+0xf0>
 8000236:	2b01      	cmp	r3, #1
 8000238:	d00b      	beq.n	8000252 <fsm_for_button+0x106>
 800023a:	e0a9      	b.n	8000390 <fsm_for_button+0x244>
	case BUTTON_RELEASED:
		if (is_button_pressed(STATE_BUTTON)) {
 800023c:	2001      	movs	r0, #1
 800023e:	f000 fd35 	bl	8000cac <is_button_pressed>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	f000 809e 	beq.w	8000386 <fsm_for_button+0x23a>
			button_state[STATE_BUTTON] = BUTTON_PRESSED;
 800024a:	4b5c      	ldr	r3, [pc, #368]	@ (80003bc <fsm_for_button+0x270>)
 800024c:	2201      	movs	r2, #1
 800024e:	705a      	strb	r2, [r3, #1]
		}
		break;
 8000250:	e099      	b.n	8000386 <fsm_for_button+0x23a>
	case BUTTON_PRESSED:
		if (!is_button_pressed(STATE_BUTTON)) {
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fd2a 	bl	8000cac <is_button_pressed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d154      	bne.n	8000308 <fsm_for_button+0x1bc>
			switch (mode) {
 800025e:	4b59      	ldr	r3, [pc, #356]	@ (80003c4 <fsm_for_button+0x278>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b02      	cmp	r3, #2
 8000264:	d002      	beq.n	800026c <fsm_for_button+0x120>
 8000266:	2b03      	cmp	r3, #3
 8000268:	d01f      	beq.n	80002aa <fsm_for_button+0x15e>
				default:
					break;
				}
				break;
			default:
				break;
 800026a:	e049      	b.n	8000300 <fsm_for_button+0x1b4>
				line_1 = (line_1 + 1) % NO_OF_STATE;
 800026c:	4b56      	ldr	r3, [pc, #344]	@ (80003c8 <fsm_for_button+0x27c>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	4b59      	ldr	r3, [pc, #356]	@ (80003d8 <fsm_for_button+0x28c>)
 8000274:	fb83 3102 	smull	r3, r1, r3, r2
 8000278:	17d3      	asrs	r3, r2, #31
 800027a:	1ac9      	subs	r1, r1, r3
 800027c:	460b      	mov	r3, r1
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	440b      	add	r3, r1
 8000282:	1ad1      	subs	r1, r2, r3
 8000284:	b2ca      	uxtb	r2, r1
 8000286:	4b50      	ldr	r3, [pc, #320]	@ (80003c8 <fsm_for_button+0x27c>)
 8000288:	701a      	strb	r2, [r3, #0]
				line_2 = (line_2 + 1) % NO_OF_STATE;
 800028a:	4b50      	ldr	r3, [pc, #320]	@ (80003cc <fsm_for_button+0x280>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	1c5a      	adds	r2, r3, #1
 8000290:	4b51      	ldr	r3, [pc, #324]	@ (80003d8 <fsm_for_button+0x28c>)
 8000292:	fb83 3102 	smull	r3, r1, r3, r2
 8000296:	17d3      	asrs	r3, r2, #31
 8000298:	1ac9      	subs	r1, r1, r3
 800029a:	460b      	mov	r3, r1
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	440b      	add	r3, r1
 80002a0:	1ad1      	subs	r1, r2, r3
 80002a2:	b2ca      	uxtb	r2, r1
 80002a4:	4b49      	ldr	r3, [pc, #292]	@ (80003cc <fsm_for_button+0x280>)
 80002a6:	701a      	strb	r2, [r3, #0]
				break;
 80002a8:	e02a      	b.n	8000300 <fsm_for_button+0x1b4>
				line_1 = (line_1 + 1) % NO_OF_STATE;
 80002aa:	4b47      	ldr	r3, [pc, #284]	@ (80003c8 <fsm_for_button+0x27c>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	4b49      	ldr	r3, [pc, #292]	@ (80003d8 <fsm_for_button+0x28c>)
 80002b2:	fb83 3102 	smull	r3, r1, r3, r2
 80002b6:	17d3      	asrs	r3, r2, #31
 80002b8:	1ac9      	subs	r1, r1, r3
 80002ba:	460b      	mov	r3, r1
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	440b      	add	r3, r1
 80002c0:	1ad1      	subs	r1, r2, r3
 80002c2:	b2ca      	uxtb	r2, r1
 80002c4:	4b40      	ldr	r3, [pc, #256]	@ (80003c8 <fsm_for_button+0x27c>)
 80002c6:	701a      	strb	r2, [r3, #0]
				switch (line_1) {
 80002c8:	4b3f      	ldr	r3, [pc, #252]	@ (80003c8 <fsm_for_button+0x27c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d00b      	beq.n	80002e8 <fsm_for_button+0x19c>
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	dc13      	bgt.n	80002fc <fsm_for_button+0x1b0>
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d002      	beq.n	80002de <fsm_for_button+0x192>
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d00a      	beq.n	80002f2 <fsm_for_button+0x1a6>
					break;
 80002dc:	e00e      	b.n	80002fc <fsm_for_button+0x1b0>
					buffer = red_light;
 80002de:	4b3c      	ldr	r3, [pc, #240]	@ (80003d0 <fsm_for_button+0x284>)
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b3c      	ldr	r3, [pc, #240]	@ (80003d4 <fsm_for_button+0x288>)
 80002e4:	701a      	strb	r2, [r3, #0]
					break;
 80002e6:	e00a      	b.n	80002fe <fsm_for_button+0x1b2>
					buffer = amber_light;
 80002e8:	4b3c      	ldr	r3, [pc, #240]	@ (80003dc <fsm_for_button+0x290>)
 80002ea:	781a      	ldrb	r2, [r3, #0]
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <fsm_for_button+0x288>)
 80002ee:	701a      	strb	r2, [r3, #0]
					break;
 80002f0:	e005      	b.n	80002fe <fsm_for_button+0x1b2>
					buffer = green_light;
 80002f2:	4b3b      	ldr	r3, [pc, #236]	@ (80003e0 <fsm_for_button+0x294>)
 80002f4:	781a      	ldrb	r2, [r3, #0]
 80002f6:	4b37      	ldr	r3, [pc, #220]	@ (80003d4 <fsm_for_button+0x288>)
 80002f8:	701a      	strb	r2, [r3, #0]
					break;
 80002fa:	e000      	b.n	80002fe <fsm_for_button+0x1b2>
					break;
 80002fc:	bf00      	nop
				break;
 80002fe:	bf00      	nop
			}
			button_state[STATE_BUTTON] = BUTTON_RELEASED;
 8000300:	4b2e      	ldr	r3, [pc, #184]	@ (80003bc <fsm_for_button+0x270>)
 8000302:	2200      	movs	r2, #0
 8000304:	705a      	strb	r2, [r3, #1]
					}
				}
				button_state[STATE_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
			}
		}
		break;
 8000306:	e040      	b.n	800038a <fsm_for_button+0x23e>
			if (is_button_pressed_1s(STATE_BUTTON)) {
 8000308:	2001      	movs	r0, #1
 800030a:	f000 fce9 	bl	8000ce0 <is_button_pressed_1s>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d03a      	beq.n	800038a <fsm_for_button+0x23e>
				if (mode == MODIFY) {
 8000314:	4b2b      	ldr	r3, [pc, #172]	@ (80003c4 <fsm_for_button+0x278>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d120      	bne.n	800035e <fsm_for_button+0x212>
					HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000322:	4830      	ldr	r0, [pc, #192]	@ (80003e4 <fsm_for_button+0x298>)
 8000324:	f001 fd4d 	bl	8001dc2 <HAL_GPIO_WritePin>
					switch (line_1) {
 8000328:	4b27      	ldr	r3, [pc, #156]	@ (80003c8 <fsm_for_button+0x27c>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b02      	cmp	r3, #2
 800032e:	d00b      	beq.n	8000348 <fsm_for_button+0x1fc>
 8000330:	2b02      	cmp	r3, #2
 8000332:	dc13      	bgt.n	800035c <fsm_for_button+0x210>
 8000334:	2b00      	cmp	r3, #0
 8000336:	d002      	beq.n	800033e <fsm_for_button+0x1f2>
 8000338:	2b01      	cmp	r3, #1
 800033a:	d00a      	beq.n	8000352 <fsm_for_button+0x206>
						break;
 800033c:	e00e      	b.n	800035c <fsm_for_button+0x210>
						red_light = buffer;
 800033e:	4b25      	ldr	r3, [pc, #148]	@ (80003d4 <fsm_for_button+0x288>)
 8000340:	781a      	ldrb	r2, [r3, #0]
 8000342:	4b23      	ldr	r3, [pc, #140]	@ (80003d0 <fsm_for_button+0x284>)
 8000344:	701a      	strb	r2, [r3, #0]
						break;
 8000346:	e00a      	b.n	800035e <fsm_for_button+0x212>
						amber_light = buffer;
 8000348:	4b22      	ldr	r3, [pc, #136]	@ (80003d4 <fsm_for_button+0x288>)
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <fsm_for_button+0x290>)
 800034e:	701a      	strb	r2, [r3, #0]
						break;
 8000350:	e005      	b.n	800035e <fsm_for_button+0x212>
						green_light = buffer;
 8000352:	4b20      	ldr	r3, [pc, #128]	@ (80003d4 <fsm_for_button+0x288>)
 8000354:	781a      	ldrb	r2, [r3, #0]
 8000356:	4b22      	ldr	r3, [pc, #136]	@ (80003e0 <fsm_for_button+0x294>)
 8000358:	701a      	strb	r2, [r3, #0]
						break;
 800035a:	e000      	b.n	800035e <fsm_for_button+0x212>
						break;
 800035c:	bf00      	nop
				button_state[STATE_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800035e:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <fsm_for_button+0x270>)
 8000360:	2202      	movs	r2, #2
 8000362:	705a      	strb	r2, [r3, #1]
		break;
 8000364:	e011      	b.n	800038a <fsm_for_button+0x23e>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (!is_button_pressed(STATE_BUTTON)) {
 8000366:	2001      	movs	r0, #1
 8000368:	f000 fca0 	bl	8000cac <is_button_pressed>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d10d      	bne.n	800038e <fsm_for_button+0x242>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000378:	481a      	ldr	r0, [pc, #104]	@ (80003e4 <fsm_for_button+0x298>)
 800037a:	f001 fd22 	bl	8001dc2 <HAL_GPIO_WritePin>
			button_state[STATE_BUTTON] = BUTTON_RELEASED;
 800037e:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <fsm_for_button+0x270>)
 8000380:	2200      	movs	r2, #0
 8000382:	705a      	strb	r2, [r3, #1]
		}
		break;
 8000384:	e003      	b.n	800038e <fsm_for_button+0x242>
		break;
 8000386:	bf00      	nop
 8000388:	e002      	b.n	8000390 <fsm_for_button+0x244>
		break;
 800038a:	bf00      	nop
 800038c:	e000      	b.n	8000390 <fsm_for_button+0x244>
		break;
 800038e:	bf00      	nop
	}

	////////////////// BUTTON 3 ////////////////////////////
	switch (button_state[INC_BUTTON]) {
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <fsm_for_button+0x270>)
 8000392:	789b      	ldrb	r3, [r3, #2]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d052      	beq.n	800043e <fsm_for_button+0x2f2>
 8000398:	2b02      	cmp	r3, #2
 800039a:	dc5f      	bgt.n	800045c <fsm_for_button+0x310>
 800039c:	2b00      	cmp	r3, #0
 800039e:	d002      	beq.n	80003a6 <fsm_for_button+0x25a>
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d021      	beq.n	80003e8 <fsm_for_button+0x29c>
		if (!is_button_pressed(INC_BUTTON)) {
			button_state[INC_BUTTON] = BUTTON_RELEASED;
		}
		break;
	}
}
 80003a4:	e05a      	b.n	800045c <fsm_for_button+0x310>
		if (is_button_pressed(INC_BUTTON)) {
 80003a6:	2002      	movs	r0, #2
 80003a8:	f000 fc80 	bl	8000cac <is_button_pressed>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d04f      	beq.n	8000452 <fsm_for_button+0x306>
			button_state[INC_BUTTON] = BUTTON_PRESSED;
 80003b2:	4b02      	ldr	r3, [pc, #8]	@ (80003bc <fsm_for_button+0x270>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	709a      	strb	r2, [r3, #2]
		break;
 80003b8:	e04b      	b.n	8000452 <fsm_for_button+0x306>
 80003ba:	bf00      	nop
 80003bc:	20000000 	.word	0x20000000
 80003c0:	40010c00 	.word	0x40010c00
 80003c4:	20000098 	.word	0x20000098
 80003c8:	20000099 	.word	0x20000099
 80003cc:	20000003 	.word	0x20000003
 80003d0:	20000004 	.word	0x20000004
 80003d4:	2000009c 	.word	0x2000009c
 80003d8:	55555556 	.word	0x55555556
 80003dc:	20000005 	.word	0x20000005
 80003e0:	20000006 	.word	0x20000006
 80003e4:	40011000 	.word	0x40011000
		if (!is_button_pressed(INC_BUTTON)) {
 80003e8:	2002      	movs	r0, #2
 80003ea:	f000 fc5f 	bl	8000cac <is_button_pressed>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d11a      	bne.n	800042a <fsm_for_button+0x2de>
			if (mode == MODIFY) {
 80003f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <fsm_for_button+0x314>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b03      	cmp	r3, #3
 80003fa:	d112      	bne.n	8000422 <fsm_for_button+0x2d6>
				buffer++;
 80003fc:	4b19      	ldr	r3, [pc, #100]	@ (8000464 <fsm_for_button+0x318>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	b2da      	uxtb	r2, r3
 8000404:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <fsm_for_button+0x318>)
 8000406:	701a      	strb	r2, [r3, #0]
				if (line_1 == GREEN && buffer >= red_light)
 8000408:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <fsm_for_button+0x31c>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d108      	bne.n	8000422 <fsm_for_button+0x2d6>
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <fsm_for_button+0x318>)
 8000412:	781a      	ldrb	r2, [r3, #0]
 8000414:	4b15      	ldr	r3, [pc, #84]	@ (800046c <fsm_for_button+0x320>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	429a      	cmp	r2, r3
 800041a:	d302      	bcc.n	8000422 <fsm_for_button+0x2d6>
					buffer = 0;
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <fsm_for_button+0x318>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
			button_state[INC_BUTTON] = BUTTON_RELEASED;
 8000422:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <fsm_for_button+0x324>)
 8000424:	2200      	movs	r2, #0
 8000426:	709a      	strb	r2, [r3, #2]
		break;
 8000428:	e015      	b.n	8000456 <fsm_for_button+0x30a>
			if (is_button_pressed_1s(INC_BUTTON)) {
 800042a:	2002      	movs	r0, #2
 800042c:	f000 fc58 	bl	8000ce0 <is_button_pressed_1s>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d00f      	beq.n	8000456 <fsm_for_button+0x30a>
				button_state[INC_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <fsm_for_button+0x324>)
 8000438:	2202      	movs	r2, #2
 800043a:	709a      	strb	r2, [r3, #2]
		break;
 800043c:	e00b      	b.n	8000456 <fsm_for_button+0x30a>
		if (!is_button_pressed(INC_BUTTON)) {
 800043e:	2002      	movs	r0, #2
 8000440:	f000 fc34 	bl	8000cac <is_button_pressed>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d107      	bne.n	800045a <fsm_for_button+0x30e>
			button_state[INC_BUTTON] = BUTTON_RELEASED;
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <fsm_for_button+0x324>)
 800044c:	2200      	movs	r2, #0
 800044e:	709a      	strb	r2, [r3, #2]
		break;
 8000450:	e003      	b.n	800045a <fsm_for_button+0x30e>
		break;
 8000452:	bf00      	nop
 8000454:	e002      	b.n	800045c <fsm_for_button+0x310>
		break;
 8000456:	bf00      	nop
 8000458:	e000      	b.n	800045c <fsm_for_button+0x310>
		break;
 800045a:	bf00      	nop
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000098 	.word	0x20000098
 8000464:	2000009c 	.word	0x2000009c
 8000468:	20000099 	.word	0x20000099
 800046c:	20000004 	.word	0x20000004
 8000470:	20000000 	.word	0x20000000

08000474 <update_buffer>:
#include <fsm_traffic_light.h>
uint8_t led_buffer[NO_OF_7SEG] = { 0 };

// SCANNING 4 7SEG-LED TO DISPLAY NUMBER //

void update_buffer(uint8_t num_1, uint8_t num_2) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	460a      	mov	r2, r1
 800047e:	71fb      	strb	r3, [r7, #7]
 8000480:	4613      	mov	r3, r2
 8000482:	71bb      	strb	r3, [r7, #6]
	char temp[16];
	int state = line_1;
 8000484:	4b7c      	ldr	r3, [pc, #496]	@ (8000678 <update_buffer+0x204>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	61fb      	str	r3, [r7, #28]
	lcd_clear_display();
 800048a:	f000 fb7d 	bl	8000b88 <lcd_clear_display>
	lcd_goto_XY(1, 0);
 800048e:	2100      	movs	r1, #0
 8000490:	2001      	movs	r0, #1
 8000492:	f000 fb80 	bl	8000b96 <lcd_goto_XY>
	switch (mode) {
 8000496:	4b79      	ldr	r3, [pc, #484]	@ (800067c <update_buffer+0x208>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b03      	cmp	r3, #3
 800049c:	f000 809c 	beq.w	80005d8 <update_buffer+0x164>
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	f300 80e4 	bgt.w	800066e <update_buffer+0x1fa>
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d002      	beq.n	80004b0 <update_buffer+0x3c>
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d026      	beq.n	80004fc <update_buffer+0x88>
		lcd_goto_XY(2, 8);
		sprintf(temp, "val: %d", buffer);
		lcd_send_string(temp);
		break;
	default:
		break;
 80004ae:	e0de      	b.n	800066e <update_buffer+0x1fa>
		lcd_send_string(" MODE : AUTO");
 80004b0:	4873      	ldr	r0, [pc, #460]	@ (8000680 <update_buffer+0x20c>)
 80004b2:	f000 fb54 	bl	8000b5e <lcd_send_string>
		lcd_goto_XY(2, 0);
 80004b6:	2100      	movs	r1, #0
 80004b8:	2002      	movs	r0, #2
 80004ba:	f000 fb6c 	bl	8000b96 <lcd_goto_XY>
		sprintf(temp, "1: %d", num_1);
 80004be:	79fa      	ldrb	r2, [r7, #7]
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	496f      	ldr	r1, [pc, #444]	@ (8000684 <update_buffer+0x210>)
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 fb08 	bl	8003adc <siprintf>
		lcd_send_string(temp);
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fb44 	bl	8000b5e <lcd_send_string>
		lcd_goto_XY(2, 8);
 80004d6:	2108      	movs	r1, #8
 80004d8:	2002      	movs	r0, #2
 80004da:	f000 fb5c 	bl	8000b96 <lcd_goto_XY>
		strcpy(temp, "");
 80004de:	2300      	movs	r3, #0
 80004e0:	733b      	strb	r3, [r7, #12]
		sprintf(temp, "2: %d", num_2);
 80004e2:	79ba      	ldrb	r2, [r7, #6]
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	4967      	ldr	r1, [pc, #412]	@ (8000688 <update_buffer+0x214>)
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 faf6 	bl	8003adc <siprintf>
		lcd_send_string(temp);
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fb32 	bl	8000b5e <lcd_send_string>
		break;
 80004fa:	e0b9      	b.n	8000670 <update_buffer+0x1fc>
		lcd_send_string(" MODE : MANUAL");
 80004fc:	4863      	ldr	r0, [pc, #396]	@ (800068c <update_buffer+0x218>)
 80004fe:	f000 fb2e 	bl	8000b5e <lcd_send_string>
		state = line_1;
 8000502:	4b5d      	ldr	r3, [pc, #372]	@ (8000678 <update_buffer+0x204>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	61fb      	str	r3, [r7, #28]
		lcd_goto_XY(2, 0);
 8000508:	2100      	movs	r1, #0
 800050a:	2002      	movs	r0, #2
 800050c:	f000 fb43 	bl	8000b96 <lcd_goto_XY>
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d010      	beq.n	8000538 <update_buffer+0xc4>
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	2b02      	cmp	r3, #2
 800051a:	dc1b      	bgt.n	8000554 <update_buffer+0xe0>
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d003      	beq.n	800052a <update_buffer+0xb6>
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d00e      	beq.n	8000546 <update_buffer+0xd2>
 8000528:	e014      	b.n	8000554 <update_buffer+0xe0>
			sprintf(temp, "st:RED");
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	4958      	ldr	r1, [pc, #352]	@ (8000690 <update_buffer+0x21c>)
 8000530:	4618      	mov	r0, r3
 8000532:	f003 fad3 	bl	8003adc <siprintf>
			break;
 8000536:	e014      	b.n	8000562 <update_buffer+0xee>
			sprintf(temp, "st:AMBER");
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4955      	ldr	r1, [pc, #340]	@ (8000694 <update_buffer+0x220>)
 800053e:	4618      	mov	r0, r3
 8000540:	f003 facc 	bl	8003adc <siprintf>
			break;
 8000544:	e00d      	b.n	8000562 <update_buffer+0xee>
			sprintf(temp, "st:GREEN");
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	4953      	ldr	r1, [pc, #332]	@ (8000698 <update_buffer+0x224>)
 800054c:	4618      	mov	r0, r3
 800054e:	f003 fac5 	bl	8003adc <siprintf>
			break;
 8000552:	e006      	b.n	8000562 <update_buffer+0xee>
			sprintf(temp, "st:----");
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4950      	ldr	r1, [pc, #320]	@ (800069c <update_buffer+0x228>)
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fabe 	bl	8003adc <siprintf>
			break;
 8000560:	bf00      	nop
		lcd_send_string(temp);
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	4618      	mov	r0, r3
 8000568:	f000 faf9 	bl	8000b5e <lcd_send_string>
		state = line_2;
 800056c:	4b4c      	ldr	r3, [pc, #304]	@ (80006a0 <update_buffer+0x22c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	61fb      	str	r3, [r7, #28]
		lcd_goto_XY(2, 8);
 8000572:	2108      	movs	r1, #8
 8000574:	2002      	movs	r0, #2
 8000576:	f000 fb0e 	bl	8000b96 <lcd_goto_XY>
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d010      	beq.n	80005a2 <update_buffer+0x12e>
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	2b02      	cmp	r3, #2
 8000584:	dc1b      	bgt.n	80005be <update_buffer+0x14a>
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <update_buffer+0x120>
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d00e      	beq.n	80005b0 <update_buffer+0x13c>
 8000592:	e014      	b.n	80005be <update_buffer+0x14a>
			sprintf(temp, "st:RED");
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	493d      	ldr	r1, [pc, #244]	@ (8000690 <update_buffer+0x21c>)
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fa9e 	bl	8003adc <siprintf>
			break;
 80005a0:	e014      	b.n	80005cc <update_buffer+0x158>
			sprintf(temp, "st:AMBER");
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	493b      	ldr	r1, [pc, #236]	@ (8000694 <update_buffer+0x220>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fa97 	bl	8003adc <siprintf>
			break;
 80005ae:	e00d      	b.n	80005cc <update_buffer+0x158>
			sprintf(temp, "st:GREEN");
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4938      	ldr	r1, [pc, #224]	@ (8000698 <update_buffer+0x224>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fa90 	bl	8003adc <siprintf>
			break;
 80005bc:	e006      	b.n	80005cc <update_buffer+0x158>
			sprintf(temp, "st:----");
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4936      	ldr	r1, [pc, #216]	@ (800069c <update_buffer+0x228>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 fa89 	bl	8003adc <siprintf>
			break;
 80005ca:	bf00      	nop
		lcd_send_string(temp);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fac4 	bl	8000b5e <lcd_send_string>
		break;
 80005d6:	e04b      	b.n	8000670 <update_buffer+0x1fc>
		lcd_send_string(" MODE : MODIFY");
 80005d8:	4832      	ldr	r0, [pc, #200]	@ (80006a4 <update_buffer+0x230>)
 80005da:	f000 fac0 	bl	8000b5e <lcd_send_string>
		state = line_1;
 80005de:	4b26      	ldr	r3, [pc, #152]	@ (8000678 <update_buffer+0x204>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	61fb      	str	r3, [r7, #28]
		lcd_goto_XY(2, 0);
 80005e4:	2100      	movs	r1, #0
 80005e6:	2002      	movs	r0, #2
 80005e8:	f000 fad5 	bl	8000b96 <lcd_goto_XY>
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d010      	beq.n	8000614 <update_buffer+0x1a0>
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	dc1b      	bgt.n	8000630 <update_buffer+0x1bc>
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d003      	beq.n	8000606 <update_buffer+0x192>
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d00e      	beq.n	8000622 <update_buffer+0x1ae>
 8000604:	e014      	b.n	8000630 <update_buffer+0x1bc>
			sprintf(temp, "st:RED");
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4921      	ldr	r1, [pc, #132]	@ (8000690 <update_buffer+0x21c>)
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fa65 	bl	8003adc <siprintf>
			break;
 8000612:	e014      	b.n	800063e <update_buffer+0x1ca>
			sprintf(temp, "st:AMBER");
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	491e      	ldr	r1, [pc, #120]	@ (8000694 <update_buffer+0x220>)
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fa5e 	bl	8003adc <siprintf>
			break;
 8000620:	e00d      	b.n	800063e <update_buffer+0x1ca>
			sprintf(temp, "st:GREEN");
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	491c      	ldr	r1, [pc, #112]	@ (8000698 <update_buffer+0x224>)
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fa57 	bl	8003adc <siprintf>
			break;
 800062e:	e006      	b.n	800063e <update_buffer+0x1ca>
			sprintf(temp, "st:----");
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4919      	ldr	r1, [pc, #100]	@ (800069c <update_buffer+0x228>)
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fa50 	bl	8003adc <siprintf>
			break;
 800063c:	bf00      	nop
		lcd_send_string(temp);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fa8b 	bl	8000b5e <lcd_send_string>
		lcd_goto_XY(2, 8);
 8000648:	2108      	movs	r1, #8
 800064a:	2002      	movs	r0, #2
 800064c:	f000 faa3 	bl	8000b96 <lcd_goto_XY>
		sprintf(temp, "val: %d", buffer);
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <update_buffer+0x234>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4914      	ldr	r1, [pc, #80]	@ (80006ac <update_buffer+0x238>)
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fa3d 	bl	8003adc <siprintf>
		lcd_send_string(temp);
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fa79 	bl	8000b5e <lcd_send_string>
		break;
 800066c:	e000      	b.n	8000670 <update_buffer+0x1fc>
		break;
 800066e:	bf00      	nop
	}

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000099 	.word	0x20000099
 800067c:	20000098 	.word	0x20000098
 8000680:	080042f8 	.word	0x080042f8
 8000684:	08004308 	.word	0x08004308
 8000688:	08004310 	.word	0x08004310
 800068c:	08004318 	.word	0x08004318
 8000690:	08004328 	.word	0x08004328
 8000694:	08004330 	.word	0x08004330
 8000698:	0800433c 	.word	0x0800433c
 800069c:	08004348 	.word	0x08004348
 80006a0:	20000003 	.word	0x20000003
 80006a4:	08004350 	.word	0x08004350
 80006a8:	2000009c 	.word	0x2000009c
 80006ac:	08004360 	.word	0x08004360

080006b0 <update_led_traffic>:
void update_led_traffic() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	switch (line_1) {
 80006b4:	4b54      	ldr	r3, [pc, #336]	@ (8000808 <update_led_traffic+0x158>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d032      	beq.n	8000722 <update_led_traffic+0x72>
 80006bc:	2b02      	cmp	r3, #2
 80006be:	dc4b      	bgt.n	8000758 <update_led_traffic+0xa8>
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <update_led_traffic+0x1a>
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d016      	beq.n	80006f6 <update_led_traffic+0x46>
 80006c8:	e046      	b.n	8000758 <update_led_traffic+0xa8>
	case RED:
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2120      	movs	r1, #32
 80006ce:	484f      	ldr	r0, [pc, #316]	@ (800080c <update_led_traffic+0x15c>)
 80006d0:	f001 fb77 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2108      	movs	r1, #8
 80006d8:	484c      	ldr	r0, [pc, #304]	@ (800080c <update_led_traffic+0x15c>)
 80006da:	f001 fb72 	bl	8001dc2 <HAL_GPIO_WritePin>
		if (count_1 <= 0) {
 80006de:	4b4c      	ldr	r3, [pc, #304]	@ (8000810 <update_led_traffic+0x160>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d133      	bne.n	800074e <update_led_traffic+0x9e>
			line_1 = GREEN;
 80006e6:	4b48      	ldr	r3, [pc, #288]	@ (8000808 <update_led_traffic+0x158>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
			count_1 = green_light;
 80006ec:	4b49      	ldr	r3, [pc, #292]	@ (8000814 <update_led_traffic+0x164>)
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	4b47      	ldr	r3, [pc, #284]	@ (8000810 <update_led_traffic+0x160>)
 80006f2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80006f4:	e02b      	b.n	800074e <update_led_traffic+0x9e>
	case GREEN:
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2120      	movs	r1, #32
 80006fa:	4844      	ldr	r0, [pc, #272]	@ (800080c <update_led_traffic+0x15c>)
 80006fc:	f001 fb61 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2108      	movs	r1, #8
 8000704:	4841      	ldr	r0, [pc, #260]	@ (800080c <update_led_traffic+0x15c>)
 8000706:	f001 fb5c 	bl	8001dc2 <HAL_GPIO_WritePin>
		if (count_1 <= 0) {
 800070a:	4b41      	ldr	r3, [pc, #260]	@ (8000810 <update_led_traffic+0x160>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d11f      	bne.n	8000752 <update_led_traffic+0xa2>
			line_1 = AMBER;
 8000712:	4b3d      	ldr	r3, [pc, #244]	@ (8000808 <update_led_traffic+0x158>)
 8000714:	2202      	movs	r2, #2
 8000716:	701a      	strb	r2, [r3, #0]
			count_1 = amber_light;
 8000718:	4b3f      	ldr	r3, [pc, #252]	@ (8000818 <update_led_traffic+0x168>)
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	4b3c      	ldr	r3, [pc, #240]	@ (8000810 <update_led_traffic+0x160>)
 800071e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000720:	e017      	b.n	8000752 <update_led_traffic+0xa2>
	case AMBER:
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 1);
 8000722:	2201      	movs	r2, #1
 8000724:	2120      	movs	r1, #32
 8000726:	4839      	ldr	r0, [pc, #228]	@ (800080c <update_led_traffic+0x15c>)
 8000728:	f001 fb4b 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2108      	movs	r1, #8
 8000730:	4836      	ldr	r0, [pc, #216]	@ (800080c <update_led_traffic+0x15c>)
 8000732:	f001 fb46 	bl	8001dc2 <HAL_GPIO_WritePin>
		if (count_1 <= 0) {
 8000736:	4b36      	ldr	r3, [pc, #216]	@ (8000810 <update_led_traffic+0x160>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10b      	bne.n	8000756 <update_led_traffic+0xa6>
			line_1 = RED;
 800073e:	4b32      	ldr	r3, [pc, #200]	@ (8000808 <update_led_traffic+0x158>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
			count_1 = red_light;
 8000744:	4b35      	ldr	r3, [pc, #212]	@ (800081c <update_led_traffic+0x16c>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	4b31      	ldr	r3, [pc, #196]	@ (8000810 <update_led_traffic+0x160>)
 800074a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800074c:	e003      	b.n	8000756 <update_led_traffic+0xa6>
		break;
 800074e:	bf00      	nop
 8000750:	e002      	b.n	8000758 <update_led_traffic+0xa8>
		break;
 8000752:	bf00      	nop
 8000754:	e000      	b.n	8000758 <update_led_traffic+0xa8>
		break;
 8000756:	bf00      	nop
	}
	//	LED_RED_2_GPIO_Port->ODR |= ALL_LED;
	switch (line_2) {
 8000758:	4b31      	ldr	r3, [pc, #196]	@ (8000820 <update_led_traffic+0x170>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d034      	beq.n	80007ca <update_led_traffic+0x11a>
 8000760:	2b02      	cmp	r3, #2
 8000762:	dc4e      	bgt.n	8000802 <update_led_traffic+0x152>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <update_led_traffic+0xbe>
 8000768:	2b01      	cmp	r3, #1
 800076a:	d017      	beq.n	800079c <update_led_traffic+0xec>
			line_2 = RED;
			count_2 = red_light;
		}
		break;
	}
}
 800076c:	e049      	b.n	8000802 <update_led_traffic+0x152>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000774:	4825      	ldr	r0, [pc, #148]	@ (800080c <update_led_traffic+0x15c>)
 8000776:	f001 fb24 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	2110      	movs	r1, #16
 800077e:	4823      	ldr	r0, [pc, #140]	@ (800080c <update_led_traffic+0x15c>)
 8000780:	f001 fb1f 	bl	8001dc2 <HAL_GPIO_WritePin>
		if (count_2 <= 0) {
 8000784:	4b27      	ldr	r3, [pc, #156]	@ (8000824 <update_led_traffic+0x174>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d135      	bne.n	80007f8 <update_led_traffic+0x148>
			line_2 = GREEN;
 800078c:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <update_led_traffic+0x170>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
			count_2 = green_light;
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <update_led_traffic+0x164>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <update_led_traffic+0x174>)
 8000798:	701a      	strb	r2, [r3, #0]
		break;
 800079a:	e02d      	b.n	80007f8 <update_led_traffic+0x148>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a2:	481a      	ldr	r0, [pc, #104]	@ (800080c <update_led_traffic+0x15c>)
 80007a4:	f001 fb0d 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	4817      	ldr	r0, [pc, #92]	@ (800080c <update_led_traffic+0x15c>)
 80007ae:	f001 fb08 	bl	8001dc2 <HAL_GPIO_WritePin>
		if (count_2 <= 0) {
 80007b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <update_led_traffic+0x174>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d120      	bne.n	80007fc <update_led_traffic+0x14c>
			line_2 = AMBER;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <update_led_traffic+0x170>)
 80007bc:	2202      	movs	r2, #2
 80007be:	701a      	strb	r2, [r3, #0]
			count_2 = amber_light;
 80007c0:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <update_led_traffic+0x168>)
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <update_led_traffic+0x174>)
 80007c6:	701a      	strb	r2, [r3, #0]
		break;
 80007c8:	e018      	b.n	80007fc <update_led_traffic+0x14c>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 1);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d0:	480e      	ldr	r0, [pc, #56]	@ (800080c <update_led_traffic+0x15c>)
 80007d2:	f001 faf6 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2110      	movs	r1, #16
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <update_led_traffic+0x15c>)
 80007dc:	f001 faf1 	bl	8001dc2 <HAL_GPIO_WritePin>
		if (count_2 <= 0) {
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <update_led_traffic+0x174>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10b      	bne.n	8000800 <update_led_traffic+0x150>
			line_2 = RED;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <update_led_traffic+0x170>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
			count_2 = red_light;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <update_led_traffic+0x16c>)
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <update_led_traffic+0x174>)
 80007f4:	701a      	strb	r2, [r3, #0]
		break;
 80007f6:	e003      	b.n	8000800 <update_led_traffic+0x150>
		break;
 80007f8:	bf00      	nop
 80007fa:	e002      	b.n	8000802 <update_led_traffic+0x152>
		break;
 80007fc:	bf00      	nop
 80007fe:	e000      	b.n	8000802 <update_led_traffic+0x152>
		break;
 8000800:	bf00      	nop
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000099 	.word	0x20000099
 800080c:	40010c00 	.word	0x40010c00
 8000810:	2000009a 	.word	0x2000009a
 8000814:	20000006 	.word	0x20000006
 8000818:	20000005 	.word	0x20000005
 800081c:	20000004 	.word	0x20000004
 8000820:	20000003 	.word	0x20000003
 8000824:	2000009b 	.word	0x2000009b

08000828 <fsm_for_auto>:

// AUTOMATIC RUN DEFINE //
void fsm_for_auto(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	update_buffer(count_1, count_2);
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <fsm_for_auto+0x44>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4a0f      	ldr	r2, [pc, #60]	@ (8000870 <fsm_for_auto+0x48>)
 8000832:	7812      	ldrb	r2, [r2, #0]
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe1c 	bl	8000474 <update_buffer>
	update_led_traffic();
 800083c:	f7ff ff38 	bl	80006b0 <update_led_traffic>
	if (count_1 > 0)
 8000840:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <fsm_for_auto+0x44>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d005      	beq.n	8000854 <fsm_for_auto+0x2c>
		count_1 = count_1 - 1;
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <fsm_for_auto+0x44>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	3b01      	subs	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <fsm_for_auto+0x44>)
 8000852:	701a      	strb	r2, [r3, #0]
	if (count_2 > 0)
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <fsm_for_auto+0x48>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d005      	beq.n	8000868 <fsm_for_auto+0x40>
		count_2 = count_2 - 1;
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <fsm_for_auto+0x48>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b02      	ldr	r3, [pc, #8]	@ (8000870 <fsm_for_auto+0x48>)
 8000866:	701a      	strb	r2, [r3, #0]
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000009a 	.word	0x2000009a
 8000870:	2000009b 	.word	0x2000009b

08000874 <fsm_for_manual>:
void fsm_for_manual(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	count_1 = 1;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <fsm_for_manual+0x20>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
	count_2 = 1;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <fsm_for_manual+0x24>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
	update_buffer(0, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fdf4 	bl	8000474 <update_buffer>
	update_led_traffic();
 800088c:	f7ff ff10 	bl	80006b0 <update_led_traffic>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000009a 	.word	0x2000009a
 8000898:	2000009b 	.word	0x2000009b

0800089c <fsm_for_modify>:

void fsm_for_modify() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	update_buffer(0, 0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fde6 	bl	8000474 <update_buffer>
	switch (line_1) {
 80008a8:	4b30      	ldr	r3, [pc, #192]	@ (800096c <fsm_for_modify+0xd0>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d022      	beq.n	80008f6 <fsm_for_modify+0x5a>
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	dc58      	bgt.n	8000966 <fsm_for_modify+0xca>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <fsm_for_modify+0x22>
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d038      	beq.n	800092e <fsm_for_modify+0x92>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 1);
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 0);
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 1);
		break;
	default:
		break;
 80008bc:	e053      	b.n	8000966 <fsm_for_modify+0xca>
		update_buffer(01, buffer);
 80008be:	4b2c      	ldr	r3, [pc, #176]	@ (8000970 <fsm_for_modify+0xd4>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fdd5 	bl	8000474 <update_buffer>
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 1);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2120      	movs	r1, #32
 80008ce:	4829      	ldr	r0, [pc, #164]	@ (8000974 <fsm_for_modify+0xd8>)
 80008d0:	f001 fa77 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2108      	movs	r1, #8
 80008d8:	4826      	ldr	r0, [pc, #152]	@ (8000974 <fsm_for_modify+0xd8>)
 80008da:	f001 fa72 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 1);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e4:	4823      	ldr	r0, [pc, #140]	@ (8000974 <fsm_for_modify+0xd8>)
 80008e6:	f001 fa6c 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2110      	movs	r1, #16
 80008ee:	4821      	ldr	r0, [pc, #132]	@ (8000974 <fsm_for_modify+0xd8>)
 80008f0:	f001 fa67 	bl	8001dc2 <HAL_GPIO_WritePin>
		break;
 80008f4:	e038      	b.n	8000968 <fsm_for_modify+0xcc>
		update_buffer(02, buffer);
 80008f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <fsm_for_modify+0xd4>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4619      	mov	r1, r3
 80008fc:	2002      	movs	r0, #2
 80008fe:	f7ff fdb9 	bl	8000474 <update_buffer>
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	2120      	movs	r1, #32
 8000906:	481b      	ldr	r0, [pc, #108]	@ (8000974 <fsm_for_modify+0xd8>)
 8000908:	f001 fa5b 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2108      	movs	r1, #8
 8000910:	4818      	ldr	r0, [pc, #96]	@ (8000974 <fsm_for_modify+0xd8>)
 8000912:	f001 fa56 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800091c:	4815      	ldr	r0, [pc, #84]	@ (8000974 <fsm_for_modify+0xd8>)
 800091e:	f001 fa50 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2110      	movs	r1, #16
 8000926:	4813      	ldr	r0, [pc, #76]	@ (8000974 <fsm_for_modify+0xd8>)
 8000928:	f001 fa4b 	bl	8001dc2 <HAL_GPIO_WritePin>
		break;
 800092c:	e01c      	b.n	8000968 <fsm_for_modify+0xcc>
		update_buffer(03, buffer);
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <fsm_for_modify+0xd4>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	2003      	movs	r0, #3
 8000936:	f7ff fd9d 	bl	8000474 <update_buffer>
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2120      	movs	r1, #32
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <fsm_for_modify+0xd8>)
 8000940:	f001 fa3f 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	2108      	movs	r1, #8
 8000948:	480a      	ldr	r0, [pc, #40]	@ (8000974 <fsm_for_modify+0xd8>)
 800094a:	f001 fa3a 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000954:	4807      	ldr	r0, [pc, #28]	@ (8000974 <fsm_for_modify+0xd8>)
 8000956:	f001 fa34 	bl	8001dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 1);
 800095a:	2201      	movs	r2, #1
 800095c:	2110      	movs	r1, #16
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <fsm_for_modify+0xd8>)
 8000960:	f001 fa2f 	bl	8001dc2 <HAL_GPIO_WritePin>
		break;
 8000964:	e000      	b.n	8000968 <fsm_for_modify+0xcc>
		break;
 8000966:	bf00      	nop
	}
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000099 	.word	0x20000099
 8000970:	2000009c 	.word	0x2000009c
 8000974:	40010c00 	.word	0x40010c00

08000978 <fsm_for_traffic_light>:

void fsm_for_traffic_light(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	switch (mode) {
 800097c:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <fsm_for_traffic_light+0x9c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d841      	bhi.n	8000a08 <fsm_for_traffic_light+0x90>
 8000984:	a201      	add	r2, pc, #4	@ (adr r2, 800098c <fsm_for_traffic_light+0x14>)
 8000986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098a:	bf00      	nop
 800098c:	0800099d 	.word	0x0800099d
 8000990:	080009dd 	.word	0x080009dd
 8000994:	080009fd 	.word	0x080009fd
 8000998:	08000a03 	.word	0x08000a03
	case INIT:
		LED_A_1_GPIO_Port->ODR |= ALL_LED;
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <fsm_for_traffic_light+0xa0>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <fsm_for_traffic_light+0xa0>)
 80009a2:	f443 6387 	orr.w	r3, r3, #1080	@ 0x438
 80009a6:	60d3      	str	r3, [r2, #12]
		amber_light = red_light - green_light; // adjust timing
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <fsm_for_traffic_light+0xa4>)
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <fsm_for_traffic_light+0xa8>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <fsm_for_traffic_light+0xac>)
 80009b6:	701a      	strb	r2, [r3, #0]
		count_1 = red_light;
 80009b8:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <fsm_for_traffic_light+0xa4>)
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <fsm_for_traffic_light+0xb0>)
 80009be:	701a      	strb	r2, [r3, #0]
		count_2 = green_light;
 80009c0:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <fsm_for_traffic_light+0xa8>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <fsm_for_traffic_light+0xb4>)
 80009c6:	701a      	strb	r2, [r3, #0]
		line_1 = RED, line_2 = GREEN;
 80009c8:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <fsm_for_traffic_light+0xb8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <fsm_for_traffic_light+0xbc>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
		mode = AUTO;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <fsm_for_traffic_light+0x9c>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
		break;
 80009da:	e018      	b.n	8000a0e <fsm_for_traffic_light+0x96>
	case AUTO:
		buffer++;
 80009dc:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <fsm_for_traffic_light+0xc0>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <fsm_for_traffic_light+0xc0>)
 80009e6:	701a      	strb	r2, [r3, #0]
		if (buffer % 2 == 1)
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <fsm_for_traffic_light+0xc0>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00a      	beq.n	8000a0c <fsm_for_traffic_light+0x94>
			fsm_for_auto();
 80009f6:	f7ff ff17 	bl	8000828 <fsm_for_auto>
		break;
 80009fa:	e007      	b.n	8000a0c <fsm_for_traffic_light+0x94>
	case MANUAL:
		fsm_for_manual();
 80009fc:	f7ff ff3a 	bl	8000874 <fsm_for_manual>
		break;
 8000a00:	e005      	b.n	8000a0e <fsm_for_traffic_light+0x96>
	case MODIFY:
		fsm_for_modify();
 8000a02:	f7ff ff4b 	bl	800089c <fsm_for_modify>
		break;
 8000a06:	e002      	b.n	8000a0e <fsm_for_traffic_light+0x96>
	default:
		break;
 8000a08:	bf00      	nop
 8000a0a:	e000      	b.n	8000a0e <fsm_for_traffic_light+0x96>
		break;
 8000a0c:	bf00      	nop
	}
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000098 	.word	0x20000098
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	20000006 	.word	0x20000006
 8000a24:	20000005 	.word	0x20000005
 8000a28:	2000009a 	.word	0x2000009a
 8000a2c:	2000009b 	.word	0x2000009b
 8000a30:	20000099 	.word	0x20000099
 8000a34:	20000003 	.word	0x20000003
 8000a38:	2000009c 	.word	0x2000009c

08000a3c <lcd_send_cmd>:
I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f023 030f 	bic.w	r3, r3, #15
 8000a4c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	011b      	lsls	r3, r3, #4
 8000a52:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	f043 030c 	orr.w	r3, r3, #12
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	f043 030c 	orr.w	r3, r3, #12
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a7c:	f107 0208 	add.w	r2, r7, #8
 8000a80:	2364      	movs	r3, #100	@ 0x64
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2304      	movs	r3, #4
 8000a86:	2142      	movs	r1, #66	@ 0x42
 8000a88:	4803      	ldr	r0, [pc, #12]	@ (8000a98 <lcd_send_cmd+0x5c>)
 8000a8a:	f001 fb31 	bl	80020f0 <HAL_I2C_Master_Transmit>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000a0 	.word	0x200000a0

08000a9c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f023 030f 	bic.w	r3, r3, #15
 8000aac:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	f043 030d 	orr.w	r3, r3, #13
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	f043 0309 	orr.w	r3, r3, #9
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	f043 030d 	orr.w	r3, r3, #13
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	f043 0309 	orr.w	r3, r3, #9
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000adc:	f107 0208 	add.w	r2, r7, #8
 8000ae0:	2364      	movs	r3, #100	@ 0x64
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	2142      	movs	r1, #66	@ 0x42
 8000ae8:	4803      	ldr	r0, [pc, #12]	@ (8000af8 <lcd_send_data+0x5c>)
 8000aea:	f001 fb01 	bl	80020f0 <HAL_I2C_Master_Transmit>
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000a0 	.word	0x200000a0

08000afc <lcd_init>:

void lcd_init (void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000b00:	2033      	movs	r0, #51	@ 0x33
 8000b02:	f7ff ff9b 	bl	8000a3c <lcd_send_cmd>
	HAL_Delay(50);
 8000b06:	2032      	movs	r0, #50	@ 0x32
 8000b08:	f000 fe8e 	bl	8001828 <HAL_Delay>
	lcd_send_cmd (0x32);
 8000b0c:	2032      	movs	r0, #50	@ 0x32
 8000b0e:	f7ff ff95 	bl	8000a3c <lcd_send_cmd>
	HAL_Delay(50);
 8000b12:	2032      	movs	r0, #50	@ 0x32
 8000b14:	f000 fe88 	bl	8001828 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000b18:	2028      	movs	r0, #40	@ 0x28
 8000b1a:	f7ff ff8f 	bl	8000a3c <lcd_send_cmd>
	HAL_Delay(50);
 8000b1e:	2032      	movs	r0, #50	@ 0x32
 8000b20:	f000 fe82 	bl	8001828 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000b24:	2001      	movs	r0, #1
 8000b26:	f7ff ff89 	bl	8000a3c <lcd_send_cmd>
	HAL_Delay(50);
 8000b2a:	2032      	movs	r0, #50	@ 0x32
 8000b2c:	f000 fe7c 	bl	8001828 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000b30:	2006      	movs	r0, #6
 8000b32:	f7ff ff83 	bl	8000a3c <lcd_send_cmd>
	HAL_Delay(50);
 8000b36:	2032      	movs	r0, #50	@ 0x32
 8000b38:	f000 fe76 	bl	8001828 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000b3c:	200c      	movs	r0, #12
 8000b3e:	f7ff ff7d 	bl	8000a3c <lcd_send_cmd>
	HAL_Delay(50);
 8000b42:	2032      	movs	r0, #50	@ 0x32
 8000b44:	f000 fe70 	bl	8001828 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff ff77 	bl	8000a3c <lcd_send_cmd>
	HAL_Delay(50);
 8000b4e:	2032      	movs	r0, #50	@ 0x32
 8000b50:	f000 fe6a 	bl	8001828 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000b54:	2080      	movs	r0, #128	@ 0x80
 8000b56:	f7ff ff71 	bl	8000a3c <lcd_send_cmd>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b66:	e006      	b.n	8000b76 <lcd_send_string+0x18>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff93 	bl	8000a9c <lcd_send_data>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f4      	bne.n	8000b68 <lcd_send_string+0xa>
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff ff55 	bl	8000a3c <lcd_send_cmd>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d108      	bne.n	8000bb8 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4413      	add	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	337f      	adds	r3, #127	@ 0x7f
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e008      	b.n	8000bca <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	3340      	adds	r3, #64	@ 0x40
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff35 	bl	8000a3c <lcd_send_cmd>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <button_reading>:
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS] = { 0 };
GPIO_TypeDef *BTN_Port[NO_OF_BUTTONS] = { BTN1_GPIO_Port, BTN2_GPIO_Port,
		BTN3_GPIO_Port };
uint16_t BTN_Pin[NO_OF_BUTTONS] = { BTN1_Pin, BTN2_Pin, BTN3_Pin };

void button_reading(void) {
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	e04a      	b.n	8000c7e <button_reading+0xa2>
//		buttonBuffer[i] = GPIO_PIN_SET;
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000be8:	79fa      	ldrb	r2, [r7, #7]
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4928      	ldr	r1, [pc, #160]	@ (8000c90 <button_reading+0xb4>)
 8000bee:	5c89      	ldrb	r1, [r1, r2]
 8000bf0:	4a28      	ldr	r2, [pc, #160]	@ (8000c94 <button_reading+0xb8>)
 8000bf2:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_Port[i], BTN_Pin[i]);
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4a28      	ldr	r2, [pc, #160]	@ (8000c98 <button_reading+0xbc>)
 8000bf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4927      	ldr	r1, [pc, #156]	@ (8000c9c <button_reading+0xc0>)
 8000c00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c04:	79fc      	ldrb	r4, [r7, #7]
 8000c06:	4619      	mov	r1, r3
 8000c08:	4610      	mov	r0, r2
 8000c0a:	f001 f8c3 	bl	8001d94 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <button_reading+0xb4>)
 8000c14:	551a      	strb	r2, [r3, r4]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a1d      	ldr	r2, [pc, #116]	@ (8000c90 <button_reading+0xb4>)
 8000c1a:	5cd2      	ldrb	r2, [r2, r3]
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	491d      	ldr	r1, [pc, #116]	@ (8000c94 <button_reading+0xb8>)
 8000c20:	5ccb      	ldrb	r3, [r1, r3]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d105      	bne.n	8000c32 <button_reading+0x56>
			buttonBuffer[i] = debounceButtonBuffer2[i];
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	491a      	ldr	r1, [pc, #104]	@ (8000c94 <button_reading+0xb8>)
 8000c2c:	5c89      	ldrb	r1, [r1, r2]
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <button_reading+0xc4>)
 8000c30:	54d1      	strb	r1, [r2, r3]
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca0 <button_reading+0xc4>)
 8000c36:	5cd3      	ldrb	r3, [r2, r3]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d114      	bne.n	8000c66 <button_reading+0x8a>
			// if a button is pressed , we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <button_reading+0xc8>)
 8000c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c44:	2b63      	cmp	r3, #99	@ 0x63
 8000c46:	d809      	bhi.n	8000c5c <button_reading+0x80>
				counterForButtonPress1s[i]++;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ca4 <button_reading+0xc8>)
 8000c4c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c50:	3201      	adds	r2, #1
 8000c52:	b291      	uxth	r1, r2
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <button_reading+0xc8>)
 8000c56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c5a:	e00d      	b.n	8000c78 <button_reading+0x9c>
			} else {
				flagForButtonPress1s[i] = 1;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <button_reading+0xcc>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	54d1      	strb	r1, [r2, r3]
 8000c64:	e008      	b.n	8000c78 <button_reading+0x9c>
				// todo
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca4 <button_reading+0xc8>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <button_reading+0xcc>)
 8000c74:	2100      	movs	r1, #0
 8000c76:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d9b1      	bls.n	8000be8 <button_reading+0xc>
		}
	}
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000f4 	.word	0x200000f4
 8000c94:	200000f8 	.word	0x200000f8
 8000c98:	2000000c 	.word	0x2000000c
 8000c9c:	20000018 	.word	0x20000018
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000100 	.word	0x20000100
 8000ca8:	200000fc 	.word	0x200000fc

08000cac <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index) {
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d901      	bls.n	8000cc0 <is_button_pressed+0x14>
		return 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e007      	b.n	8000cd0 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <is_button_pressed+0x30>)
 8000cc4:	5cd3      	ldrb	r3, [r2, r3]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf0c      	ite	eq
 8000cca:	2301      	moveq	r3, #1
 8000ccc:	2300      	movne	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d901      	bls.n	8000cf4 <is_button_pressed_1s+0x14>
		return 0xff;
 8000cf0:	23ff      	movs	r3, #255	@ 0xff
 8000cf2:	e007      	b.n	8000d04 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	4a06      	ldr	r2, [pc, #24]	@ (8000d10 <is_button_pressed_1s+0x30>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	bf0c      	ite	eq
 8000cfe:	2301      	moveq	r3, #1
 8000d00:	2300      	movne	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200000fc 	.word	0x200000fc

08000d14 <BlinkyLED>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void BlinkyLED(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000d18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d1c:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <BlinkyLED+0x14>)
 8000d1e:	f001 f868 	bl	8001df2 <HAL_GPIO_TogglePin>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40011000 	.word	0x40011000

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 fd17 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f84b 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 f92f 	bl	8000f9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d3e:	f000 f903 	bl	8000f48 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d42:	f000 f8b5 	bl	8000eb0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d46:	f000 f885 	bl	8000e54 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	char str[16];
//	int count = 0;
	HAL_TIM_Base_Start_IT(&htim2);
 8000d4a:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <main+0x8c>)
 8000d4c:	f002 f988 	bl	8003060 <HAL_TIM_Base_Start_IT>
	Scheduler_Init();
 8000d50:	f000 fa0e 	bl	8001170 <Scheduler_Init>

	HAL_Delay(1000);
 8000d54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d58:	f000 fd66 	bl	8001828 <HAL_Delay>
	lcd_init();
 8000d5c:	f7ff fece 	bl	8000afc <lcd_init>
	lcd_goto_XY(1, 0);
 8000d60:	2100      	movs	r1, #0
 8000d62:	2001      	movs	r0, #1
 8000d64:	f7ff ff17 	bl	8000b96 <lcd_goto_XY>
	strcpy(str, "MODE: TEST");
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <main+0x90>)
 8000d6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d6e:	c303      	stmia	r3!, {r0, r1}
 8000d70:	801a      	strh	r2, [r3, #0]
 8000d72:	3302      	adds	r3, #2
 8000d74:	0c12      	lsrs	r2, r2, #16
 8000d76:	701a      	strb	r2, [r3, #0]
	lcd_send_string(str);
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff feef 	bl	8000b5e <lcd_send_string>
	lcd_goto_XY(2, 0);
 8000d80:	2100      	movs	r1, #0
 8000d82:	2002      	movs	r0, #2
 8000d84:	f7ff ff07 	bl	8000b96 <lcd_goto_XY>
	lcd_send_string("xin chao mn nho");
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <main+0x94>)
 8000d8a:	f7ff fee8 	bl	8000b5e <lcd_send_string>
	Scheduler_Add_Task(fsm_for_button, 50, 50);
 8000d8e:	2232      	movs	r2, #50	@ 0x32
 8000d90:	2132      	movs	r1, #50	@ 0x32
 8000d92:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <main+0x98>)
 8000d94:	f000 fad2 	bl	800133c <Scheduler_Add_Task>
	Scheduler_Add_Task(fsm_for_traffic_light, 500, 1000 / 2);
 8000d98:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d9c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <main+0x9c>)
 8000da2:	f000 facb 	bl	800133c <Scheduler_Add_Task>
	Scheduler_Add_Task(BlinkyLED, 200, 500);
 8000da6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000daa:	21c8      	movs	r1, #200	@ 0xc8
 8000dac:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <main+0xa0>)
 8000dae:	f000 fac5 	bl	800133c <Scheduler_Add_Task>
	while (1) {
		Scheduler_Dispatch_Tasks();
 8000db2:	f000 fae1 	bl	8001378 <Scheduler_Dispatch_Tasks>
 8000db6:	e7fc      	b.n	8000db2 <main+0x86>
 8000db8:	20000108 	.word	0x20000108
 8000dbc:	08004368 	.word	0x08004368
 8000dc0:	08004374 	.word	0x08004374
 8000dc4:	0800014d 	.word	0x0800014d
 8000dc8:	08000979 	.word	0x08000979
 8000dcc:	08000d15 	.word	0x08000d15

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b090      	sub	sp, #64	@ 0x40
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0318 	add.w	r3, r7, #24
 8000dda:	2228      	movs	r2, #40	@ 0x28
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fe9c 	bl	8003b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df6:	2301      	movs	r3, #1
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e02:	2300      	movs	r3, #0
 8000e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e06:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fcc5 	bl	80027a0 <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e1c:	f000 f98f 	bl	800113e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000e28:	23a0      	movs	r3, #160	@ 0xa0
 8000e2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 ff32 	bl	8002ca4 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e46:	f000 f97a 	bl	800113e <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3740      	adds	r7, #64	@ 0x40
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ea8 <MX_I2C1_Init+0x54>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e60:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <MX_I2C1_Init+0x58>)
 8000e62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e84:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <MX_I2C1_Init+0x50>)
 8000e92:	f000 ffe9 	bl	8001e68 <HAL_I2C_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e9c:	f000 f94f 	bl	800113e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000a0 	.word	0x200000a0
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	000186a0 	.word	0x000186a0

08000eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef4:	4813      	ldr	r0, [pc, #76]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000ef6:	f002 f863 	bl	8002fc0 <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f00:	f000 f91d 	bl	800113e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000f12:	f002 f9e7 	bl	80032e4 <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f1c:	f000 f90f 	bl	800113e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_TIM2_Init+0x94>)
 8000f2e:	f002 fbc9 	bl	80036c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f38:	f000 f901 	bl	800113e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000108 	.word	0x20000108

08000f48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	@ (8000f98 <MX_USART2_UART_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f80:	f002 fc10 	bl	80037a4 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f000 f8d8 	bl	800113e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000150 	.word	0x20000150
 8000f98:	40004400 	.word	0x40004400

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b55      	ldr	r3, [pc, #340]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a54      	ldr	r2, [pc, #336]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b52      	ldr	r3, [pc, #328]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a4e      	ldr	r2, [pc, #312]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fce:	f043 0320 	orr.w	r3, r3, #32
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0320 	and.w	r3, r3, #32
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b49      	ldr	r3, [pc, #292]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a48      	ldr	r2, [pc, #288]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b46      	ldr	r3, [pc, #280]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b43      	ldr	r3, [pc, #268]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a42      	ldr	r2, [pc, #264]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <MX_GPIO_Init+0x16c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2120      	movs	r1, #32
 8001014:	483d      	ldr	r0, [pc, #244]	@ (800110c <MX_GPIO_Init+0x170>)
 8001016:	f000 fed4 	bl	8001dc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_2_Pin|LED_B_1_Pin|LED_B_2_Pin|LED_A_1_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8001020:	483b      	ldr	r0, [pc, #236]	@ (8001110 <MX_GPIO_Init+0x174>)
 8001022:	f000 fece 	bl	8001dc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800102c:	4839      	ldr	r0, [pc, #228]	@ (8001114 <MX_GPIO_Init+0x178>)
 800102e:	f000 fec8 	bl	8001dc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001032:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001038:	4b37      	ldr	r3, [pc, #220]	@ (8001118 <MX_GPIO_Init+0x17c>)
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4833      	ldr	r0, [pc, #204]	@ (8001114 <MX_GPIO_Init+0x178>)
 8001048:	f000 fd20 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800104c:	2320      	movs	r3, #32
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	482a      	ldr	r0, [pc, #168]	@ (800110c <MX_GPIO_Init+0x170>)
 8001064:	f000 fd12 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_2_Pin LED_B_1_Pin LED_B_2_Pin LED_A_1_Pin */
  GPIO_InitStruct.Pin = LED_A_2_Pin|LED_B_1_Pin|LED_B_2_Pin|LED_A_1_Pin;
 8001068:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	4823      	ldr	r0, [pc, #140]	@ (8001110 <MX_GPIO_Init+0x174>)
 8001082:	f000 fd03 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	481e      	ldr	r0, [pc, #120]	@ (8001114 <MX_GPIO_Init+0x178>)
 800109a:	f000 fcf7 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800109e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4817      	ldr	r0, [pc, #92]	@ (8001114 <MX_GPIO_Init+0x178>)
 80010b8:	f000 fce8 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN3_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin;
 80010bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN3_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	480e      	ldr	r0, [pc, #56]	@ (800110c <MX_GPIO_Init+0x170>)
 80010d2:	f000 fcdb 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 80010d6:	2340      	movs	r3, #64	@ 0x40
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4619      	mov	r1, r3
 80010e8:	4809      	ldr	r0, [pc, #36]	@ (8001110 <MX_GPIO_Init+0x174>)
 80010ea:	f000 fccf 	bl	8001a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2028      	movs	r0, #40	@ 0x28
 80010f4:	f000 fc93 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f8:	2028      	movs	r0, #40	@ 0x28
 80010fa:	f000 fcac 	bl	8001a56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fe:	bf00      	nop
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000
 800110c:	40010800 	.word	0x40010800
 8001110:	40010c00 	.word	0x40010c00
 8001114:	40011000 	.word	0x40011000
 8001118:	10110000 	.word	0x10110000

0800111c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800112c:	d103      	bne.n	8001136 <HAL_TIM_PeriodElapsedCallback+0x1a>
		Scheduler_Update();
 800112e:	f000 f84d 	bl	80011cc <Scheduler_Update>
		button_reading();
 8001132:	f7ff fd53 	bl	8000bdc <button_reading>
	}
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001142:	b672      	cpsid	i
}
 8001144:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001146:	bf00      	nop
 8001148:	e7fd      	b.n	8001146 <Error_Handler+0x8>

0800114a <is_avail>:
 *      Author: HP
 */
#include "scheduler.h"
Tasks_t tasks;

int is_avail(TaskNode *task) {
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	if (task->runMe == 1) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7c1b      	ldrb	r3, [r3, #16]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d104      	bne.n	8001164 <is_avail+0x1a>
		task->runMe = 0;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	741a      	strb	r2, [r3, #16]
		return 1;
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <is_avail+0x1c>
	}
	return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <Scheduler_Init>:
void Scheduler_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
	if (!tasks.head) {
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <Scheduler_Init+0x58>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <Scheduler_Init+0x1c>
		tasks.head = NULL;
 800117e:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <Scheduler_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
		tasks.nTasks = 0;
 8001184:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <Scheduler_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
			current = current->next;
			free(tmp);
		}
		tasks.head = NULL;
	}
}
 800118a:	e018      	b.n	80011be <Scheduler_Init+0x4e>
		TaskNode *current = tasks.head;
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <Scheduler_Init+0x58>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	72fb      	strb	r3, [r7, #11]
 8001196:	e00a      	b.n	80011ae <Scheduler_Init+0x3e>
			TaskNode *tmp = current;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	607b      	str	r3, [r7, #4]
			current = current->next;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	60fb      	str	r3, [r7, #12]
			free(tmp);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f002 fbe4 	bl	8003970 <free>
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	3301      	adds	r3, #1
 80011ac:	72fb      	strb	r3, [r7, #11]
 80011ae:	7afa      	ldrb	r2, [r7, #11]
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <Scheduler_Init+0x58>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d3ef      	bcc.n	8001198 <Scheduler_Init+0x28>
		tasks.head = NULL;
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <Scheduler_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000198 	.word	0x20000198

080011cc <Scheduler_Update>:

void Scheduler_Update(void) {
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	if (!tasks.head)
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <Scheduler_Update+0x34>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00f      	beq.n	80011f8 <Scheduler_Update+0x2c>
		return;
	if (tasks.head->delay <= 0) {
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <Scheduler_Update+0x34>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d104      	bne.n	80011ec <Scheduler_Update+0x20>
		tasks.head->runMe = 1;
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <Scheduler_Update+0x34>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	741a      	strb	r2, [r3, #16]
 80011ea:	e006      	b.n	80011fa <Scheduler_Update+0x2e>
	} else
		tasks.head->delay--;
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <Scheduler_Update+0x34>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	3a01      	subs	r2, #1
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	e000      	b.n	80011fa <Scheduler_Update+0x2e>
		return;
 80011f8:	bf00      	nop
}
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	20000198 	.word	0x20000198

08001204 <Scheduler_Add_Task_ID>:

uint32_t Scheduler_Add_Task_ID(void (*pF)(void), uint32_t taskID,
		uint32_t DELAY, uint32_t PERIOD) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
	TaskNode *newTask = (TaskNode*) malloc(sizeof(TaskNode));
 8001212:	2018      	movs	r0, #24
 8001214:	f002 fba4 	bl	8003960 <malloc>
 8001218:	4603      	mov	r3, r0
 800121a:	617b      	str	r3, [r7, #20]
	if (tasks.nTasks >= MAX_TASKS || !newTask)
 800121c:	4b46      	ldr	r3, [pc, #280]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b09      	cmp	r3, #9
 8001222:	d802      	bhi.n	800122a <Scheduler_Add_Task_ID+0x26>
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <Scheduler_Add_Task_ID+0x2a>
		return ADD_TASK_ERROR;
 800122a:	236e      	movs	r3, #110	@ 0x6e
 800122c:	e07f      	b.n	800132e <Scheduler_Add_Task_ID+0x12a>
	newTask->pTask = pF;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	601a      	str	r2, [r3, #0]
	newTask->delay = DELAY;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]
	newTask->period = PERIOD;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	60da      	str	r2, [r3, #12]
	newTask->runMe = 0;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2200      	movs	r2, #0
 8001244:	741a      	strb	r2, [r3, #16]
	newTask->TaskID = taskID;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	615a      	str	r2, [r3, #20]
	newTask->next = NULL;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]

	if (!tasks.head || DELAY <= tasks.head->delay) {
 8001252:	4b39      	ldr	r3, [pc, #228]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <Scheduler_Add_Task_ID+0x62>
 800125a:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	d813      	bhi.n	800128e <Scheduler_Add_Task_ID+0x8a>
		// add at head
		if (tasks.head) {
 8001266:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <Scheduler_Add_Task_ID+0x7a>
			tasks.head->delay -= DELAY;
 800126e:	4b32      	ldr	r3, [pc, #200]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6899      	ldr	r1, [r3, #8]
 8001274:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	1a8a      	subs	r2, r1, r2
 800127c:	609a      	str	r2, [r3, #8]
		}
		newTask->next = tasks.head;
 800127e:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	605a      	str	r2, [r3, #4]
		tasks.head = newTask;
 8001286:	4a2c      	ldr	r2, [pc, #176]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e048      	b.n	8001320 <Scheduler_Add_Task_ID+0x11c>
	} else {
		// add at middle
		uint32_t sumDelay = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
		TaskNode *current = tasks.head;
 8001292:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	623b      	str	r3, [r7, #32]
		TaskNode *prev = NULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < tasks.nTasks; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	e029      	b.n	80012f6 <Scheduler_Add_Task_ID+0xf2>
			sumDelay += current->delay;
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a8:	4413      	add	r3, r2
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
			if (sumDelay > DELAY) {
 80012ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d918      	bls.n	80012e6 <Scheduler_Add_Task_ID+0xe2>
				newTask->delay = DELAY - (sumDelay - current->delay);
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	1ad2      	subs	r2, r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	441a      	add	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	609a      	str	r2, [r3, #8]
				current->delay -= newTask->delay;
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	609a      	str	r2, [r3, #8]
				newTask->next = current;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	6a3a      	ldr	r2, [r7, #32]
 80012d6:	605a      	str	r2, [r3, #4]
				if (prev) {
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d011      	beq.n	8001302 <Scheduler_Add_Task_ID+0xfe>
					prev->next = newTask;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	605a      	str	r2, [r3, #4]
				}
				break;
 80012e4:	e00d      	b.n	8001302 <Scheduler_Add_Task_ID+0xfe>
			}
			prev = current;
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	61fb      	str	r3, [r7, #28]
			current = current->next;
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < tasks.nTasks; i++) {
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	3301      	adds	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8d0      	bhi.n	80012a2 <Scheduler_Add_Task_ID+0x9e>
 8001300:	e000      	b.n	8001304 <Scheduler_Add_Task_ID+0x100>
				break;
 8001302:	bf00      	nop
		}
		// add at bottom
		if (!current && prev) {
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10a      	bne.n	8001320 <Scheduler_Add_Task_ID+0x11c>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <Scheduler_Add_Task_ID+0x11c>
			newTask->delay = DELAY - sumDelay;
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	1ad2      	subs	r2, r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	609a      	str	r2, [r3, #8]
			prev->next = newTask;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	605a      	str	r2, [r3, #4]
		}
	}
	tasks.nTasks++;
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	3301      	adds	r3, #1
 8001326:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <Scheduler_Add_Task_ID+0x134>)
 8001328:	6053      	str	r3, [r2, #4]
	return newTask->TaskID;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	695b      	ldr	r3, [r3, #20]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3728      	adds	r7, #40	@ 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000198 	.word	0x20000198

0800133c <Scheduler_Add_Task>:
uint32_t Scheduler_Add_Task(void (*pF)(void), uint32_t DELAY, uint32_t PERIOD) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
	return Scheduler_Add_Task_ID(pF, tasks.nTasks, DELAY / TICK,
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <Scheduler_Add_Task+0x34>)
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <Scheduler_Add_Task+0x38>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	08da      	lsrs	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4806      	ldr	r0, [pc, #24]	@ (8001374 <Scheduler_Add_Task+0x38>)
 800135a:	fba0 0303 	umull	r0, r3, r0, r3
 800135e:	08db      	lsrs	r3, r3, #3
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff ff4f 	bl	8001204 <Scheduler_Add_Task_ID>
 8001366:	4603      	mov	r3, r0
			PERIOD / TICK);
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000198 	.word	0x20000198
 8001374:	cccccccd 	.word	0xcccccccd

08001378 <Scheduler_Dispatch_Tasks>:

void Scheduler_Dispatch_Tasks(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
	if (!tasks.head)
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <Scheduler_Dispatch_Tasks+0x5c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d022      	beq.n	80013cc <Scheduler_Dispatch_Tasks+0x54>
		return;
	TaskNode *task = tasks.head;
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <Scheduler_Dispatch_Tasks+0x5c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	607b      	str	r3, [r7, #4]
	if (is_avail(task)) {
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fedc 	bl	800114a <is_avail>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01a      	beq.n	80013ce <Scheduler_Dispatch_Tasks+0x56>
		task->pTask();
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4798      	blx	r3
		if (Scheduler_Remove_Task(task->TaskID) && task->period > 0) {
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f818 	bl	80013d8 <Scheduler_Remove_Task>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00f      	beq.n	80013ce <Scheduler_Dispatch_Tasks+0x56>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <Scheduler_Dispatch_Tasks+0x56>
			Scheduler_Add_Task_ID(task->pTask, task->TaskID, task->period, task->period);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6959      	ldr	r1, [r3, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f7ff ff1d 	bl	8001204 <Scheduler_Add_Task_ID>
 80013ca:	e000      	b.n	80013ce <Scheduler_Dispatch_Tasks+0x56>
		return;
 80013cc:	bf00      	nop
		}
	}
}
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000198 	.word	0x20000198

080013d8 <Scheduler_Remove_Task>:

uint8_t Scheduler_Remove_Task(uint32_t TaskID) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if (!tasks.head)
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <Scheduler_Remove_Task+0x80>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <Scheduler_Remove_Task+0x14>
		return NOT_VALID_TASK_ID;
 80013e8:	236f      	movs	r3, #111	@ 0x6f
 80013ea:	e030      	b.n	800144e <Scheduler_Remove_Task+0x76>
	TaskNode *current = tasks.head, *prev = NULL;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <Scheduler_Remove_Task+0x80>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]

	for (uint32_t i = 0; i < tasks.nTasks; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e022      	b.n	8001442 <Scheduler_Remove_Task+0x6a>
		if (current->TaskID == TaskID) {
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d115      	bne.n	8001432 <Scheduler_Remove_Task+0x5a>
			if (prev) {
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <Scheduler_Remove_Task+0x3e>
				prev->next = current->next;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	e003      	b.n	800141e <Scheduler_Remove_Task+0x46>
			} else {
				tasks.head = current->next;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <Scheduler_Remove_Task+0x80>)
 800141c:	6013      	str	r3, [r2, #0]
			}
			free(current);
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f002 faa6 	bl	8003970 <free>
			tasks.nTasks--;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <Scheduler_Remove_Task+0x80>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	3b01      	subs	r3, #1
 800142a:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <Scheduler_Remove_Task+0x80>)
 800142c:	6053      	str	r3, [r2, #4]
			return 1; // Task successfully removed
 800142e:	2301      	movs	r3, #1
 8001430:	e00d      	b.n	800144e <Scheduler_Remove_Task+0x76>
		}
		prev = current;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	613b      	str	r3, [r7, #16]
		current = current->next;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < tasks.nTasks; i++) {
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <Scheduler_Remove_Task+0x80>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3d7      	bcc.n	80013fc <Scheduler_Remove_Task+0x24>
	}
	return NOT_VALID_TASK_ID;
 800144c:	236f      	movs	r3, #111	@ 0x6f
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000198 	.word	0x20000198

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_MspInit+0x5c>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <HAL_MspInit+0x5c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6193      	str	r3, [r2, #24]
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_MspInit+0x5c>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_MspInit+0x5c>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <HAL_MspInit+0x5c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_MspInit+0x5c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <HAL_MspInit+0x60>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_MspInit+0x60>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000

080014c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <HAL_I2C_MspInit+0x90>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d132      	bne.n	8001546 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <HAL_I2C_MspInit+0x94>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <HAL_I2C_MspInit+0x94>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_I2C_MspInit+0x94>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4812      	ldr	r0, [pc, #72]	@ (8001558 <HAL_I2C_MspInit+0x98>)
 800150e:	f000 fabd 	bl	8001a8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_I2C_MspInit+0x9c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
 8001518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
 8001528:	4a0c      	ldr	r2, [pc, #48]	@ (800155c <HAL_I2C_MspInit+0x9c>)
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_I2C_MspInit+0x94>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <HAL_I2C_MspInit+0x94>)
 8001534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_I2C_MspInit+0x94>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40005400 	.word	0x40005400
 8001554:	40021000 	.word	0x40021000
 8001558:	40010c00 	.word	0x40010c00
 800155c:	40010000 	.word	0x40010000

08001560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001570:	d113      	bne.n	800159a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <HAL_TIM_Base_MspInit+0x44>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <HAL_TIM_Base_MspInit+0x44>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_TIM_Base_MspInit+0x44>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	201c      	movs	r0, #28
 8001590:	f000 fa45 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001594:	201c      	movs	r0, #28
 8001596:	f000 fa5e 	bl	8001a56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a15      	ldr	r2, [pc, #84]	@ (8001618 <HAL_UART_MspInit+0x70>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d123      	bne.n	8001610 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_UART_MspInit+0x74>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4a13      	ldr	r2, [pc, #76]	@ (800161c <HAL_UART_MspInit+0x74>)
 80015ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d2:	61d3      	str	r3, [r2, #28]
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_UART_MspInit+0x74>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_UART_MspInit+0x74>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <HAL_UART_MspInit+0x74>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_UART_MspInit+0x74>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f8:	230c      	movs	r3, #12
 80015fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2302      	movs	r3, #2
 8001602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4619      	mov	r1, r3
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_UART_MspInit+0x78>)
 800160c:	f000 fa3e 	bl	8001a8c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40004400 	.word	0x40004400
 800161c:	40021000 	.word	0x40021000
 8001620:	40010800 	.word	0x40010800

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 f8bc 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <TIM2_IRQHandler+0x10>)
 8001682:	f001 fd3f 	bl	8003104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000108 	.word	0x20000108

08001690 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001694:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001698:	f000 fbc4 	bl	8001e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a8:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <_sbrk+0x5c>)
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <_sbrk+0x60>)
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <_sbrk+0x64>)
 80016be:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <_sbrk+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d207      	bcs.n	80016e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d0:	f002 fa3c 	bl	8003b4c <__errno>
 80016d4:	4603      	mov	r3, r0
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	e009      	b.n	80016f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e6:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <_sbrk+0x64>)
 80016f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20005000 	.word	0x20005000
 8001700:	00000400 	.word	0x00000400
 8001704:	200001a0 	.word	0x200001a0
 8001708:	200002f0 	.word	0x200002f0

0800170c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001718:	f7ff fff8 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480b      	ldr	r0, [pc, #44]	@ (800174c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800171e:	490c      	ldr	r1, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001720:	4a0c      	ldr	r2, [pc, #48]	@ (8001754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001734:	4c09      	ldr	r4, [pc, #36]	@ (800175c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f002 fa09 	bl	8003b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001746:	f7ff faf1 	bl	8000d2c <main>
  bx lr
 800174a:	4770      	bx	lr
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001754:	080043ec 	.word	0x080043ec
  ldr r2, =_sbss
 8001758:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800175c:	200002f0 	.word	0x200002f0

08001760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_2_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <HAL_Init+0x28>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	@ (800178c <HAL_Init+0x28>)
 800176e:	f043 0310 	orr.w	r3, r3, #16
 8001772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f947 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fe6c 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f95f 	bl	8001a72 <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f927 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000020 	.word	0x20000020
 80017e8:	20000028 	.word	0x20000028
 80017ec:	20000024 	.word	0x20000024

080017f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_IncTick+0x1c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_IncTick+0x20>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a03      	ldr	r2, [pc, #12]	@ (8001810 <HAL_IncTick+0x20>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000028 	.word	0x20000028
 8001810:	200001a4 	.word	0x200001a4

08001814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b02      	ldr	r3, [pc, #8]	@ (8001824 <HAL_GetTick+0x10>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	200001a4 	.word	0x200001a4

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fff0 	bl	8001814 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffe0 	bl	8001814 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000028 	.word	0x20000028

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4906      	ldr	r1, [pc, #24]	@ (8001908 <__NVIC_EnableIRQ+0x34>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	@ (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	@ (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff90 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff2d 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff42 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff90 	bl	8001960 <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5f 	bl	800190c <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff35 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b08b      	sub	sp, #44	@ 0x2c
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9e:	e169      	b.n	8001d74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8158 	bne.w	8001d6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a9a      	ldr	r2, [pc, #616]	@ (8001d2c <HAL_GPIO_Init+0x2a0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d05e      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001ac8:	4a98      	ldr	r2, [pc, #608]	@ (8001d2c <HAL_GPIO_Init+0x2a0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d875      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001ace:	4a98      	ldr	r2, [pc, #608]	@ (8001d30 <HAL_GPIO_Init+0x2a4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d058      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001ad4:	4a96      	ldr	r2, [pc, #600]	@ (8001d30 <HAL_GPIO_Init+0x2a4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d86f      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001ada:	4a96      	ldr	r2, [pc, #600]	@ (8001d34 <HAL_GPIO_Init+0x2a8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d052      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001ae0:	4a94      	ldr	r2, [pc, #592]	@ (8001d34 <HAL_GPIO_Init+0x2a8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d869      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001ae6:	4a94      	ldr	r2, [pc, #592]	@ (8001d38 <HAL_GPIO_Init+0x2ac>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d04c      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001aec:	4a92      	ldr	r2, [pc, #584]	@ (8001d38 <HAL_GPIO_Init+0x2ac>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d863      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001af2:	4a92      	ldr	r2, [pc, #584]	@ (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d046      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
 8001af8:	4a90      	ldr	r2, [pc, #576]	@ (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d85d      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001afe:	2b12      	cmp	r3, #18
 8001b00:	d82a      	bhi.n	8001b58 <HAL_GPIO_Init+0xcc>
 8001b02:	2b12      	cmp	r3, #18
 8001b04:	d859      	bhi.n	8001bba <HAL_GPIO_Init+0x12e>
 8001b06:	a201      	add	r2, pc, #4	@ (adr r2, 8001b0c <HAL_GPIO_Init+0x80>)
 8001b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0c:	08001b87 	.word	0x08001b87
 8001b10:	08001b61 	.word	0x08001b61
 8001b14:	08001b73 	.word	0x08001b73
 8001b18:	08001bb5 	.word	0x08001bb5
 8001b1c:	08001bbb 	.word	0x08001bbb
 8001b20:	08001bbb 	.word	0x08001bbb
 8001b24:	08001bbb 	.word	0x08001bbb
 8001b28:	08001bbb 	.word	0x08001bbb
 8001b2c:	08001bbb 	.word	0x08001bbb
 8001b30:	08001bbb 	.word	0x08001bbb
 8001b34:	08001bbb 	.word	0x08001bbb
 8001b38:	08001bbb 	.word	0x08001bbb
 8001b3c:	08001bbb 	.word	0x08001bbb
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001bbb 	.word	0x08001bbb
 8001b48:	08001bbb 	.word	0x08001bbb
 8001b4c:	08001bbb 	.word	0x08001bbb
 8001b50:	08001b69 	.word	0x08001b69
 8001b54:	08001b7d 	.word	0x08001b7d
 8001b58:	4a79      	ldr	r2, [pc, #484]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b5e:	e02c      	b.n	8001bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e029      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	623b      	str	r3, [r7, #32]
          break;
 8001b70:	e024      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	3308      	adds	r3, #8
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e01f      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	330c      	adds	r3, #12
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e01a      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d102      	bne.n	8001b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b8e:	2304      	movs	r3, #4
 8001b90:	623b      	str	r3, [r7, #32]
          break;
 8001b92:	e013      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	611a      	str	r2, [r3, #16]
          break;
 8001ba6:	e009      	b.n	8001bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	615a      	str	r2, [r3, #20]
          break;
 8001bb2:	e003      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x130>
          break;
 8001bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2bff      	cmp	r3, #255	@ 0xff
 8001bc0:	d801      	bhi.n	8001bc6 <HAL_GPIO_Init+0x13a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	e001      	b.n	8001bca <HAL_GPIO_Init+0x13e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2bff      	cmp	r3, #255	@ 0xff
 8001bd0:	d802      	bhi.n	8001bd8 <HAL_GPIO_Init+0x14c>
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	e002      	b.n	8001bde <HAL_GPIO_Init+0x152>
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	3b08      	subs	r3, #8
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	210f      	movs	r1, #15
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	401a      	ands	r2, r3
 8001bf0:	6a39      	ldr	r1, [r7, #32]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 80b1 	beq.w	8001d6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a4c      	ldr	r2, [pc, #304]	@ (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b4a      	ldr	r3, [pc, #296]	@ (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c24:	4a48      	ldr	r2, [pc, #288]	@ (8001d48 <HAL_GPIO_Init+0x2bc>)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a40      	ldr	r2, [pc, #256]	@ (8001d4c <HAL_GPIO_Init+0x2c0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d013      	beq.n	8001c78 <HAL_GPIO_Init+0x1ec>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3f      	ldr	r2, [pc, #252]	@ (8001d50 <HAL_GPIO_Init+0x2c4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00d      	beq.n	8001c74 <HAL_GPIO_Init+0x1e8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d54 <HAL_GPIO_Init+0x2c8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d007      	beq.n	8001c70 <HAL_GPIO_Init+0x1e4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a3d      	ldr	r2, [pc, #244]	@ (8001d58 <HAL_GPIO_Init+0x2cc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_GPIO_Init+0x1e0>
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x1ee>
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	e004      	b.n	8001c7a <HAL_GPIO_Init+0x1ee>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_Init+0x1ee>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_GPIO_Init+0x1ee>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c8a:	492f      	ldr	r1, [pc, #188]	@ (8001d48 <HAL_GPIO_Init+0x2bc>)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	492c      	ldr	r1, [pc, #176]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4928      	ldr	r1, [pc, #160]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ccc:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	4922      	ldr	r1, [pc, #136]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60cb      	str	r3, [r1, #12]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cda:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	491e      	ldr	r1, [pc, #120]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cf4:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4918      	ldr	r1, [pc, #96]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4914      	ldr	r1, [pc, #80]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d021      	beq.n	8001d60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	490e      	ldr	r1, [pc, #56]	@ (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
 8001d28:	e021      	b.n	8001d6e <HAL_GPIO_Init+0x2e2>
 8001d2a:	bf00      	nop
 8001d2c:	10320000 	.word	0x10320000
 8001d30:	10310000 	.word	0x10310000
 8001d34:	10220000 	.word	0x10220000
 8001d38:	10210000 	.word	0x10210000
 8001d3c:	10120000 	.word	0x10120000
 8001d40:	10110000 	.word	0x10110000
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	40010c00 	.word	0x40010c00
 8001d54:	40011000 	.word	0x40011000
 8001d58:	40011400 	.word	0x40011400
 8001d5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_GPIO_Init+0x304>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	4909      	ldr	r1, [pc, #36]	@ (8001d90 <HAL_GPIO_Init+0x304>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	3301      	adds	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f47f ae8e 	bne.w	8001aa0 <HAL_GPIO_Init+0x14>
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	372c      	adds	r7, #44	@ 0x2c
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	807b      	strh	r3, [r7, #2]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd2:	787b      	ldrb	r3, [r7, #1]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dde:	e003      	b.n	8001de8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	611a      	str	r2, [r3, #16]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e04:	887a      	ldrh	r2, [r7, #2]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	041a      	lsls	r2, r3, #16
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	400b      	ands	r3, r1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	611a      	str	r2, [r3, #16]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3a:	4a05      	ldr	r2, [pc, #20]	@ (8001e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f806 	bl	8001e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e12b      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fb16 	bl	80014c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	@ 0x24
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f001 f832 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a81      	ldr	r2, [pc, #516]	@ (80020dc <HAL_I2C_Init+0x274>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d807      	bhi.n	8001eec <HAL_I2C_Init+0x84>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a80      	ldr	r2, [pc, #512]	@ (80020e0 <HAL_I2C_Init+0x278>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf94      	ite	ls
 8001ee4:	2301      	movls	r3, #1
 8001ee6:	2300      	movhi	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e006      	b.n	8001efa <HAL_I2C_Init+0x92>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a7d      	ldr	r2, [pc, #500]	@ (80020e4 <HAL_I2C_Init+0x27c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0e7      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a78      	ldr	r2, [pc, #480]	@ (80020e8 <HAL_I2C_Init+0x280>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a6a      	ldr	r2, [pc, #424]	@ (80020dc <HAL_I2C_Init+0x274>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d802      	bhi.n	8001f3c <HAL_I2C_Init+0xd4>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	e009      	b.n	8001f50 <HAL_I2C_Init+0xe8>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	4a69      	ldr	r2, [pc, #420]	@ (80020ec <HAL_I2C_Init+0x284>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	3301      	adds	r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	495c      	ldr	r1, [pc, #368]	@ (80020dc <HAL_I2C_Init+0x274>)
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	d819      	bhi.n	8001fa4 <HAL_I2C_Init+0x13c>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e59      	subs	r1, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7e:	1c59      	adds	r1, r3, #1
 8001f80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f84:	400b      	ands	r3, r1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_I2C_Init+0x138>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e59      	subs	r1, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9e:	e051      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e04f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d111      	bne.n	8001fd0 <HAL_I2C_Init+0x168>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e58      	subs	r0, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e012      	b.n	8001ff6 <HAL_I2C_Init+0x18e>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e58      	subs	r0, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	0099      	lsls	r1, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Init+0x196>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e022      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10e      	bne.n	8002024 <HAL_I2C_Init+0x1bc>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e58      	subs	r0, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	440b      	add	r3, r1
 8002014:	fbb0 f3f3 	udiv	r3, r0, r3
 8002018:	3301      	adds	r3, #1
 800201a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002022:	e00f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	6809      	ldr	r1, [r1, #0]
 8002048:	4313      	orrs	r3, r2
 800204a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002072:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6911      	ldr	r1, [r2, #16]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68d2      	ldr	r2, [r2, #12]
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	000186a0 	.word	0x000186a0
 80020e0:	001e847f 	.word	0x001e847f
 80020e4:	003d08ff 	.word	0x003d08ff
 80020e8:	431bde83 	.word	0x431bde83
 80020ec:	10624dd3 	.word	0x10624dd3

080020f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	461a      	mov	r2, r3
 80020fc:	460b      	mov	r3, r1
 80020fe:	817b      	strh	r3, [r7, #10]
 8002100:	4613      	mov	r3, r2
 8002102:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff fb86 	bl	8001814 <HAL_GetTick>
 8002108:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	f040 80e0 	bne.w	80022d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2319      	movs	r3, #25
 800211e:	2201      	movs	r2, #1
 8002120:	4970      	ldr	r1, [pc, #448]	@ (80022e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f964 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800212e:	2302      	movs	r3, #2
 8002130:	e0d3      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_I2C_Master_Transmit+0x50>
 800213c:	2302      	movs	r3, #2
 800213e:	e0cc      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d007      	beq.n	8002166 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002174:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2221      	movs	r2, #33	@ 0x21
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2210      	movs	r2, #16
 8002182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	893a      	ldrh	r2, [r7, #8]
 8002196:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a50      	ldr	r2, [pc, #320]	@ (80022e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80021a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021a8:	8979      	ldrh	r1, [r7, #10]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	6a3a      	ldr	r2, [r7, #32]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f89c 	bl	80022ec <I2C_MasterRequestWrite>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e08d      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021d4:	e066      	b.n	80022a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	6a39      	ldr	r1, [r7, #32]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fa22 	bl	8002624 <I2C_WaitOnTXEFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00d      	beq.n	8002202 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d107      	bne.n	80021fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e06b      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b04      	cmp	r3, #4
 800223e:	d11b      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x188>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	d017      	beq.n	8002278 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	6a39      	ldr	r1, [r7, #32]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fa19 	bl	80026b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00d      	beq.n	80022a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	2b04      	cmp	r3, #4
 800228e:	d107      	bne.n	80022a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e01a      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d194      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
  }
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	00100002 	.word	0x00100002
 80022e8:	ffff0000 	.word	0xffff0000

080022ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	460b      	mov	r3, r1
 80022fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d006      	beq.n	8002316 <I2C_MasterRequestWrite+0x2a>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d003      	beq.n	8002316 <I2C_MasterRequestWrite+0x2a>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002314:	d108      	bne.n	8002328 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e00b      	b.n	8002340 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	2b12      	cmp	r3, #18
 800232e:	d107      	bne.n	8002340 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800233e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f84f 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002366:	d103      	bne.n	8002370 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e035      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800237c:	d108      	bne.n	8002390 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800237e:	897b      	ldrh	r3, [r7, #10]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	e01b      	b.n	80023c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002390:	897b      	ldrh	r3, [r7, #10]
 8002392:	11db      	asrs	r3, r3, #7
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 0306 	and.w	r3, r3, #6
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f063 030f 	orn	r3, r3, #15
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	490e      	ldr	r1, [pc, #56]	@ (80023e8 <I2C_MasterRequestWrite+0xfc>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f898 	bl	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e010      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4907      	ldr	r1, [pc, #28]	@ (80023ec <I2C_MasterRequestWrite+0x100>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f888 	bl	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	00010008 	.word	0x00010008
 80023ec:	00010002 	.word	0x00010002

080023f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002400:	e048      	b.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d044      	beq.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240a:	f7ff fa03 	bl	8001814 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d302      	bcc.n	8002420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d139      	bne.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d10d      	bne.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x56>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	43da      	mvns	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	e00c      	b.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	43da      	mvns	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4013      	ands	r3, r2
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	429a      	cmp	r2, r3
 8002464:	d116      	bne.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e023      	b.n	80024dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10d      	bne.n	80024ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	e00c      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d093      	beq.n	8002402 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f2:	e071      	b.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002502:	d123      	bne.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002512:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800251c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f043 0204 	orr.w	r2, r3, #4
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e067      	b.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d041      	beq.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002554:	f7ff f95e 	bl	8001814 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	d302      	bcc.n	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d136      	bne.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10c      	bne.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	e00b      	b.n	80025a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	43da      	mvns	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d016      	beq.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e021      	b.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10c      	bne.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	e00b      	b.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4013      	ands	r3, r2
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf14      	ite	ne
 800260e:	2301      	movne	r3, #1
 8002610:	2300      	moveq	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f af6d 	bne.w	80024f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002630:	e034      	b.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f886 	bl	8002744 <I2C_IsAcknowledgeFailed>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e034      	b.n	80026ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d028      	beq.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff f8e3 	bl	8001814 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d11d      	bne.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266a:	2b80      	cmp	r3, #128	@ 0x80
 800266c:	d016      	beq.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e007      	b.n	80026ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a6:	2b80      	cmp	r3, #128	@ 0x80
 80026a8:	d1c3      	bne.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c0:	e034      	b.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f83e 	bl	8002744 <I2C_IsAcknowledgeFailed>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e034      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d028      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7ff f89b 	bl	8001814 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d11d      	bne.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d016      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	f043 0220 	orr.w	r2, r3, #32
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e007      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d1c3      	bne.n	80026c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800275a:	d11b      	bne.n	8002794 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002764:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e272      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8087 	beq.w	80028ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c0:	4b92      	ldr	r3, [pc, #584]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d00c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027cc:	4b8f      	ldr	r3, [pc, #572]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d112      	bne.n	80027fe <HAL_RCC_OscConfig+0x5e>
 80027d8:	4b8c      	ldr	r3, [pc, #560]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e4:	d10b      	bne.n	80027fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e6:	4b89      	ldr	r3, [pc, #548]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d06c      	beq.n	80028cc <HAL_RCC_OscConfig+0x12c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d168      	bne.n	80028cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e24c      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x76>
 8002808:	4b80      	ldr	r3, [pc, #512]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	e02e      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x98>
 800281e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7a      	ldr	r2, [pc, #488]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b78      	ldr	r3, [pc, #480]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a77      	ldr	r2, [pc, #476]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e01d      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0xbc>
 8002842:	4b72      	ldr	r3, [pc, #456]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a71      	ldr	r2, [pc, #452]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b6f      	ldr	r3, [pc, #444]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 800285c:	4b6b      	ldr	r3, [pc, #428]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6a      	ldr	r2, [pc, #424]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b68      	ldr	r3, [pc, #416]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a67      	ldr	r2, [pc, #412]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 800286e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe ffca 	bl	8001814 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe ffc6 	bl	8001814 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	@ 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e200      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b5d      	ldr	r3, [pc, #372]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0xe4>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe ffb6 	bl	8001814 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe ffb2 	bl	8001814 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	@ 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1ec      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	4b53      	ldr	r3, [pc, #332]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x10c>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d063      	beq.n	80029a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028da:	4b4c      	ldr	r3, [pc, #304]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028e6:	4b49      	ldr	r3, [pc, #292]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d11c      	bne.n	800292c <HAL_RCC_OscConfig+0x18c>
 80028f2:	4b46      	ldr	r3, [pc, #280]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d116      	bne.n	800292c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	4b43      	ldr	r3, [pc, #268]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x176>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e1c0      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002916:	4b3d      	ldr	r3, [pc, #244]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4939      	ldr	r1, [pc, #228]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	e03a      	b.n	80029a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002934:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe ff6b 	bl	8001814 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002942:	f7fe ff67 	bl	8001814 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1a1      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4927      	ldr	r1, [pc, #156]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]
 8002974:	e015      	b.n	80029a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002976:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <HAL_RCC_OscConfig+0x270>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe ff4a 	bl	8001814 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe ff46 	bl	8001814 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e180      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d03a      	beq.n	8002a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d019      	beq.n	80029ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b6:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029bc:	f7fe ff2a 	bl	8001814 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c4:	f7fe ff26 	bl	8001814 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e160      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <HAL_RCC_OscConfig+0x26c>)
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029e2:	2001      	movs	r0, #1
 80029e4:	f000 face 	bl	8002f84 <RCC_Delay>
 80029e8:	e01c      	b.n	8002a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_RCC_OscConfig+0x274>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f0:	f7fe ff10 	bl	8001814 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f6:	e00f      	b.n	8002a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7fe ff0c 	bl	8001814 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d908      	bls.n	8002a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e146      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	42420000 	.word	0x42420000
 8002a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	4b92      	ldr	r3, [pc, #584]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e9      	bne.n	80029f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80a6 	beq.w	8002b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b8b      	ldr	r3, [pc, #556]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b88      	ldr	r3, [pc, #544]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a87      	ldr	r2, [pc, #540]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	61d3      	str	r3, [r2, #28]
 8002a4e:	4b85      	ldr	r3, [pc, #532]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b82      	ldr	r3, [pc, #520]	@ (8002c68 <HAL_RCC_OscConfig+0x4c8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d118      	bne.n	8002a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c68 <HAL_RCC_OscConfig+0x4c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c68 <HAL_RCC_OscConfig+0x4c8>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fecd 	bl	8001814 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7fe fec9 	bl	8001814 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	@ 0x64
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e103      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	4b75      	ldr	r3, [pc, #468]	@ (8002c68 <HAL_RCC_OscConfig+0x4c8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x312>
 8002aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	e02d      	b.n	8002b0e <HAL_RCC_OscConfig+0x36e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x334>
 8002aba:	4b6a      	ldr	r3, [pc, #424]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4a69      	ldr	r2, [pc, #420]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	4b67      	ldr	r3, [pc, #412]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a66      	ldr	r2, [pc, #408]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6213      	str	r3, [r2, #32]
 8002ad2:	e01c      	b.n	8002b0e <HAL_RCC_OscConfig+0x36e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x356>
 8002adc:	4b61      	ldr	r3, [pc, #388]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a60      	ldr	r2, [pc, #384]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a5d      	ldr	r2, [pc, #372]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	e00b      	b.n	8002b0e <HAL_RCC_OscConfig+0x36e>
 8002af6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a5a      	ldr	r2, [pc, #360]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6213      	str	r3, [r2, #32]
 8002b02:	4b58      	ldr	r3, [pc, #352]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a57      	ldr	r2, [pc, #348]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b16:	f7fe fe7d 	bl	8001814 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fe79 	bl	8001814 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0b1      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	4b4b      	ldr	r3, [pc, #300]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ee      	beq.n	8002b1e <HAL_RCC_OscConfig+0x37e>
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7fe fe67 	bl	8001814 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fe63 	bl	8001814 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e09b      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b60:	4b40      	ldr	r3, [pc, #256]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ee      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d105      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b72:	4b3c      	ldr	r3, [pc, #240]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4a3b      	ldr	r2, [pc, #236]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8087 	beq.w	8002c96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b88:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d061      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d146      	bne.n	8002c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b33      	ldr	r3, [pc, #204]	@ (8002c6c <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fe37 	bl	8001814 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fe fe33 	bl	8001814 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e06d      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbc:	4b29      	ldr	r3, [pc, #164]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd0:	d108      	bne.n	8002be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bd2:	4b24      	ldr	r3, [pc, #144]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4921      	ldr	r1, [pc, #132]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a19      	ldr	r1, [r3, #32]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	491b      	ldr	r1, [pc, #108]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <HAL_RCC_OscConfig+0x4cc>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe fe07 	bl	8001814 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fe fe03 	bl	8001814 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e03d      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c1c:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x46a>
 8002c28:	e035      	b.n	8002c96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_RCC_OscConfig+0x4cc>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe fdf0 	bl	8001814 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fdec 	bl	8001814 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e026      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x498>
 8002c56:	e01e      	b.n	8002c96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e019      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <HAL_RCC_OscConfig+0x500>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0d0      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d910      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b67      	ldr	r3, [pc, #412]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 0207 	bic.w	r2, r3, #7
 8002cce:	4965      	ldr	r1, [pc, #404]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4a58      	ldr	r2, [pc, #352]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d040      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d115      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b41      	ldr	r3, [pc, #260]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e073      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	4b3d      	ldr	r3, [pc, #244]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06b      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4936      	ldr	r1, [pc, #216]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d94:	f7fe fd3e 	bl	8001814 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7fe fd3a 	bl	8001814 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e053      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b27      	ldr	r3, [pc, #156]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d210      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b24      	ldr	r3, [pc, #144]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 0207 	bic.w	r2, r3, #7
 8002dda:	4922      	ldr	r1, [pc, #136]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 f821 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	490a      	ldr	r1, [pc, #40]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c8>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <HAL_RCC_ClockConfig+0x1cc>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_RCC_ClockConfig+0x1d0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fc9c 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40022000 	.word	0x40022000
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08004384 	.word	0x08004384
 8002e70:	20000020 	.word	0x20000020
 8002e74:	20000024 	.word	0x20000024

08002e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e92:	4b1e      	ldr	r3, [pc, #120]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d002      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x36>
 8002ea6:	e027      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eaa:	613b      	str	r3, [r7, #16]
      break;
 8002eac:	e027      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0c9b      	lsrs	r3, r3, #18
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	4a17      	ldr	r2, [pc, #92]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eb8:	5cd3      	ldrb	r3, [r2, r3]
 8002eba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ec6:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	0c5b      	lsrs	r3, r3, #17
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	4a11      	ldr	r2, [pc, #68]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eda:	fb03 f202 	mul.w	r2, r3, r2
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	e004      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a0c      	ldr	r2, [pc, #48]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	613b      	str	r3, [r7, #16]
      break;
 8002ef6:	e002      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002efa:	613b      	str	r3, [r7, #16]
      break;
 8002efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efe:	693b      	ldr	r3, [r7, #16]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	007a1200 	.word	0x007a1200
 8002f14:	0800439c 	.word	0x0800439c
 8002f18:	080043ac 	.word	0x080043ac
 8002f1c:	003d0900 	.word	0x003d0900

08002f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b02      	ldr	r3, [pc, #8]	@ (8002f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	20000020 	.word	0x20000020

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f38:	f7ff fff2 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4903      	ldr	r1, [pc, #12]	@ (8002f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	08004394 	.word	0x08004394

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f60:	f7ff ffde 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	0adb      	lsrs	r3, r3, #11
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4903      	ldr	r1, [pc, #12]	@ (8002f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	08004394 	.word	0x08004394

08002f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <RCC_Delay+0x34>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <RCC_Delay+0x38>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0a5b      	lsrs	r3, r3, #9
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fa0:	bf00      	nop
  }
  while (Delay --);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1e5a      	subs	r2, r3, #1
 8002fa6:	60fa      	str	r2, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f9      	bne.n	8002fa0 <RCC_Delay+0x1c>
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	20000020 	.word	0x20000020
 8002fbc:	10624dd3 	.word	0x10624dd3

08002fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e041      	b.n	8003056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe faba 	bl	8001560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f000 fa5c 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d001      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e03a      	b.n	80030ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a18      	ldr	r2, [pc, #96]	@ (80030f8 <HAL_TIM_Base_Start_IT+0x98>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00e      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x58>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a2:	d009      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x58>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a14      	ldr	r2, [pc, #80]	@ (80030fc <HAL_TIM_Base_Start_IT+0x9c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x58>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a13      	ldr	r2, [pc, #76]	@ (8003100 <HAL_TIM_Base_Start_IT+0xa0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d010      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030da:	e007      	b.n	80030ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40000400 	.word	0x40000400
 8003100:	40000800 	.word	0x40000800

08003104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d020      	beq.n	8003168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01b      	beq.n	8003168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0202 	mvn.w	r2, #2
 8003138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f998 	bl	8003484 <HAL_TIM_IC_CaptureCallback>
 8003154:	e005      	b.n	8003162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f98b 	bl	8003472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f99a 	bl	8003496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d020      	beq.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0204 	mvn.w	r2, #4
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f972 	bl	8003484 <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f965 	bl	8003472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f974 	bl	8003496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d020      	beq.n	8003200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01b      	beq.n	8003200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0208 	mvn.w	r2, #8
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2204      	movs	r2, #4
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f94c 	bl	8003484 <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f93f 	bl	8003472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f94e 	bl	8003496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d020      	beq.n	800324c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0210 	mvn.w	r2, #16
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2208      	movs	r2, #8
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f926 	bl	8003484 <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f919 	bl	8003472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f928 	bl	8003496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0201 	mvn.w	r2, #1
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd ff56 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00c      	beq.n	8003294 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa7f 	bl	8003792 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8f8 	bl	80034a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0220 	mvn.w	r2, #32
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa52 	bl	8003780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_TIM_ConfigClockSource+0x1c>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e0b4      	b.n	800346a <HAL_TIM_ConfigClockSource+0x186>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800331e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003338:	d03e      	beq.n	80033b8 <HAL_TIM_ConfigClockSource+0xd4>
 800333a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800333e:	f200 8087 	bhi.w	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003346:	f000 8086 	beq.w	8003456 <HAL_TIM_ConfigClockSource+0x172>
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800334e:	d87f      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003350:	2b70      	cmp	r3, #112	@ 0x70
 8003352:	d01a      	beq.n	800338a <HAL_TIM_ConfigClockSource+0xa6>
 8003354:	2b70      	cmp	r3, #112	@ 0x70
 8003356:	d87b      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	2b60      	cmp	r3, #96	@ 0x60
 800335a:	d050      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x11a>
 800335c:	2b60      	cmp	r3, #96	@ 0x60
 800335e:	d877      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003360:	2b50      	cmp	r3, #80	@ 0x50
 8003362:	d03c      	beq.n	80033de <HAL_TIM_ConfigClockSource+0xfa>
 8003364:	2b50      	cmp	r3, #80	@ 0x50
 8003366:	d873      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003368:	2b40      	cmp	r3, #64	@ 0x40
 800336a:	d058      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x13a>
 800336c:	2b40      	cmp	r3, #64	@ 0x40
 800336e:	d86f      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b30      	cmp	r3, #48	@ 0x30
 8003372:	d064      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x15a>
 8003374:	2b30      	cmp	r3, #48	@ 0x30
 8003376:	d86b      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b20      	cmp	r3, #32
 800337a:	d060      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x15a>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d867      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d05c      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x15a>
 8003384:	2b10      	cmp	r3, #16
 8003386:	d05a      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x15a>
 8003388:	e062      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800339a:	f000 f974 	bl	8003686 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	609a      	str	r2, [r3, #8]
      break;
 80033b6:	e04f      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033c8:	f000 f95d 	bl	8003686 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033da:	609a      	str	r2, [r3, #8]
      break;
 80033dc:	e03c      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	461a      	mov	r2, r3
 80033ec:	f000 f8d4 	bl	8003598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2150      	movs	r1, #80	@ 0x50
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f92b 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 80033fc:	e02c      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800340a:	461a      	mov	r2, r3
 800340c:	f000 f8f2 	bl	80035f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2160      	movs	r1, #96	@ 0x60
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f91b 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 800341c:	e01c      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800342a:	461a      	mov	r2, r3
 800342c:	f000 f8b4 	bl	8003598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2140      	movs	r1, #64	@ 0x40
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f90b 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 800343c:	e00c      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f000 f902 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 800344e:	e003      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e000      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
	...

080034bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a2f      	ldr	r2, [pc, #188]	@ (800358c <TIM_Base_SetConfig+0xd0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00b      	beq.n	80034ec <TIM_Base_SetConfig+0x30>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034da:	d007      	beq.n	80034ec <TIM_Base_SetConfig+0x30>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a2c      	ldr	r2, [pc, #176]	@ (8003590 <TIM_Base_SetConfig+0xd4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_Base_SetConfig+0x30>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003594 <TIM_Base_SetConfig+0xd8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a22      	ldr	r2, [pc, #136]	@ (800358c <TIM_Base_SetConfig+0xd0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00b      	beq.n	800351e <TIM_Base_SetConfig+0x62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350c:	d007      	beq.n	800351e <TIM_Base_SetConfig+0x62>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1f      	ldr	r2, [pc, #124]	@ (8003590 <TIM_Base_SetConfig+0xd4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_Base_SetConfig+0x62>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1e      	ldr	r2, [pc, #120]	@ (8003594 <TIM_Base_SetConfig+0xd8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d108      	bne.n	8003530 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <TIM_Base_SetConfig+0xd0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d103      	bne.n	8003564 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	611a      	str	r2, [r3, #16]
  }
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40000400 	.word	0x40000400
 8003594:	40000800 	.word	0x40000800

08003598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 030a 	bic.w	r3, r3, #10
 80035d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0210 	bic.w	r2, r3, #16
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	031b      	lsls	r3, r3, #12
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003630:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	621a      	str	r2, [r3, #32]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	f043 0307 	orr.w	r3, r3, #7
 8003674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	021a      	lsls	r2, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	609a      	str	r2, [r3, #8]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d8:	2302      	movs	r3, #2
 80036da:	e046      	b.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a16      	ldr	r2, [pc, #88]	@ (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003728:	d009      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a12      	ldr	r2, [pc, #72]	@ (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a10      	ldr	r2, [pc, #64]	@ (800377c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10c      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800

08003780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e042      	b.n	800383c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd feec 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	@ 0x24
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f82b 	bl	8003844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800380c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800381c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800387e:	f023 030c 	bic.w	r3, r3, #12
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	430b      	orrs	r3, r1
 800388a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003958 <UART_SetConfig+0x114>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d103      	bne.n	80038b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038ac:	f7ff fb56 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	e002      	b.n	80038ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038b4:	f7ff fb3e 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 80038b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009a      	lsls	r2, r3, #2
 80038c4:	441a      	add	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	4a22      	ldr	r2, [pc, #136]	@ (800395c <UART_SetConfig+0x118>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	0119      	lsls	r1, r3, #4
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009a      	lsls	r2, r3, #2
 80038e4:	441a      	add	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f0:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <UART_SetConfig+0x118>)
 80038f2:	fba3 0302 	umull	r0, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2064      	movs	r0, #100	@ 0x64
 80038fa:	fb00 f303 	mul.w	r3, r0, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	3332      	adds	r3, #50	@ 0x32
 8003904:	4a15      	ldr	r2, [pc, #84]	@ (800395c <UART_SetConfig+0x118>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003910:	4419      	add	r1, r3
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	441a      	add	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	fbb2 f2f3 	udiv	r2, r2, r3
 8003928:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <UART_SetConfig+0x118>)
 800392a:	fba3 0302 	umull	r0, r3, r3, r2
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2064      	movs	r0, #100	@ 0x64
 8003932:	fb00 f303 	mul.w	r3, r0, r3
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	3332      	adds	r3, #50	@ 0x32
 800393c:	4a07      	ldr	r2, [pc, #28]	@ (800395c <UART_SetConfig+0x118>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	f003 020f 	and.w	r2, r3, #15
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	440a      	add	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40013800 	.word	0x40013800
 800395c:	51eb851f 	.word	0x51eb851f

08003960 <malloc>:
 8003960:	4b02      	ldr	r3, [pc, #8]	@ (800396c <malloc+0xc>)
 8003962:	4601      	mov	r1, r0
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	f000 b82d 	b.w	80039c4 <_malloc_r>
 800396a:	bf00      	nop
 800396c:	2000002c 	.word	0x2000002c

08003970 <free>:
 8003970:	4b02      	ldr	r3, [pc, #8]	@ (800397c <free+0xc>)
 8003972:	4601      	mov	r1, r0
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	f000 b915 	b.w	8003ba4 <_free_r>
 800397a:	bf00      	nop
 800397c:	2000002c 	.word	0x2000002c

08003980 <sbrk_aligned>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	4e0f      	ldr	r6, [pc, #60]	@ (80039c0 <sbrk_aligned+0x40>)
 8003984:	460c      	mov	r4, r1
 8003986:	6831      	ldr	r1, [r6, #0]
 8003988:	4605      	mov	r5, r0
 800398a:	b911      	cbnz	r1, 8003992 <sbrk_aligned+0x12>
 800398c:	f000 f8ce 	bl	8003b2c <_sbrk_r>
 8003990:	6030      	str	r0, [r6, #0]
 8003992:	4621      	mov	r1, r4
 8003994:	4628      	mov	r0, r5
 8003996:	f000 f8c9 	bl	8003b2c <_sbrk_r>
 800399a:	1c43      	adds	r3, r0, #1
 800399c:	d103      	bne.n	80039a6 <sbrk_aligned+0x26>
 800399e:	f04f 34ff 	mov.w	r4, #4294967295
 80039a2:	4620      	mov	r0, r4
 80039a4:	bd70      	pop	{r4, r5, r6, pc}
 80039a6:	1cc4      	adds	r4, r0, #3
 80039a8:	f024 0403 	bic.w	r4, r4, #3
 80039ac:	42a0      	cmp	r0, r4
 80039ae:	d0f8      	beq.n	80039a2 <sbrk_aligned+0x22>
 80039b0:	1a21      	subs	r1, r4, r0
 80039b2:	4628      	mov	r0, r5
 80039b4:	f000 f8ba 	bl	8003b2c <_sbrk_r>
 80039b8:	3001      	adds	r0, #1
 80039ba:	d1f2      	bne.n	80039a2 <sbrk_aligned+0x22>
 80039bc:	e7ef      	b.n	800399e <sbrk_aligned+0x1e>
 80039be:	bf00      	nop
 80039c0:	200001a8 	.word	0x200001a8

080039c4 <_malloc_r>:
 80039c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c8:	1ccd      	adds	r5, r1, #3
 80039ca:	f025 0503 	bic.w	r5, r5, #3
 80039ce:	3508      	adds	r5, #8
 80039d0:	2d0c      	cmp	r5, #12
 80039d2:	bf38      	it	cc
 80039d4:	250c      	movcc	r5, #12
 80039d6:	2d00      	cmp	r5, #0
 80039d8:	4606      	mov	r6, r0
 80039da:	db01      	blt.n	80039e0 <_malloc_r+0x1c>
 80039dc:	42a9      	cmp	r1, r5
 80039de:	d904      	bls.n	80039ea <_malloc_r+0x26>
 80039e0:	230c      	movs	r3, #12
 80039e2:	6033      	str	r3, [r6, #0]
 80039e4:	2000      	movs	r0, #0
 80039e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ac0 <_malloc_r+0xfc>
 80039ee:	f000 f869 	bl	8003ac4 <__malloc_lock>
 80039f2:	f8d8 3000 	ldr.w	r3, [r8]
 80039f6:	461c      	mov	r4, r3
 80039f8:	bb44      	cbnz	r4, 8003a4c <_malloc_r+0x88>
 80039fa:	4629      	mov	r1, r5
 80039fc:	4630      	mov	r0, r6
 80039fe:	f7ff ffbf 	bl	8003980 <sbrk_aligned>
 8003a02:	1c43      	adds	r3, r0, #1
 8003a04:	4604      	mov	r4, r0
 8003a06:	d158      	bne.n	8003aba <_malloc_r+0xf6>
 8003a08:	f8d8 4000 	ldr.w	r4, [r8]
 8003a0c:	4627      	mov	r7, r4
 8003a0e:	2f00      	cmp	r7, #0
 8003a10:	d143      	bne.n	8003a9a <_malloc_r+0xd6>
 8003a12:	2c00      	cmp	r4, #0
 8003a14:	d04b      	beq.n	8003aae <_malloc_r+0xea>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	4639      	mov	r1, r7
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	eb04 0903 	add.w	r9, r4, r3
 8003a20:	f000 f884 	bl	8003b2c <_sbrk_r>
 8003a24:	4581      	cmp	r9, r0
 8003a26:	d142      	bne.n	8003aae <_malloc_r+0xea>
 8003a28:	6821      	ldr	r1, [r4, #0]
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	1a6d      	subs	r5, r5, r1
 8003a2e:	4629      	mov	r1, r5
 8003a30:	f7ff ffa6 	bl	8003980 <sbrk_aligned>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d03a      	beq.n	8003aae <_malloc_r+0xea>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	442b      	add	r3, r5
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	bb62      	cbnz	r2, 8003aa0 <_malloc_r+0xdc>
 8003a46:	f8c8 7000 	str.w	r7, [r8]
 8003a4a:	e00f      	b.n	8003a6c <_malloc_r+0xa8>
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	1b52      	subs	r2, r2, r5
 8003a50:	d420      	bmi.n	8003a94 <_malloc_r+0xd0>
 8003a52:	2a0b      	cmp	r2, #11
 8003a54:	d917      	bls.n	8003a86 <_malloc_r+0xc2>
 8003a56:	1961      	adds	r1, r4, r5
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	6025      	str	r5, [r4, #0]
 8003a5c:	bf18      	it	ne
 8003a5e:	6059      	strne	r1, [r3, #4]
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	bf08      	it	eq
 8003a64:	f8c8 1000 	streq.w	r1, [r8]
 8003a68:	5162      	str	r2, [r4, r5]
 8003a6a:	604b      	str	r3, [r1, #4]
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f000 f82f 	bl	8003ad0 <__malloc_unlock>
 8003a72:	f104 000b 	add.w	r0, r4, #11
 8003a76:	1d23      	adds	r3, r4, #4
 8003a78:	f020 0007 	bic.w	r0, r0, #7
 8003a7c:	1ac2      	subs	r2, r0, r3
 8003a7e:	bf1c      	itt	ne
 8003a80:	1a1b      	subne	r3, r3, r0
 8003a82:	50a3      	strne	r3, [r4, r2]
 8003a84:	e7af      	b.n	80039e6 <_malloc_r+0x22>
 8003a86:	6862      	ldr	r2, [r4, #4]
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	bf0c      	ite	eq
 8003a8c:	f8c8 2000 	streq.w	r2, [r8]
 8003a90:	605a      	strne	r2, [r3, #4]
 8003a92:	e7eb      	b.n	8003a6c <_malloc_r+0xa8>
 8003a94:	4623      	mov	r3, r4
 8003a96:	6864      	ldr	r4, [r4, #4]
 8003a98:	e7ae      	b.n	80039f8 <_malloc_r+0x34>
 8003a9a:	463c      	mov	r4, r7
 8003a9c:	687f      	ldr	r7, [r7, #4]
 8003a9e:	e7b6      	b.n	8003a0e <_malloc_r+0x4a>
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	42a3      	cmp	r3, r4
 8003aa6:	d1fb      	bne.n	8003aa0 <_malloc_r+0xdc>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6053      	str	r3, [r2, #4]
 8003aac:	e7de      	b.n	8003a6c <_malloc_r+0xa8>
 8003aae:	230c      	movs	r3, #12
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	6033      	str	r3, [r6, #0]
 8003ab4:	f000 f80c 	bl	8003ad0 <__malloc_unlock>
 8003ab8:	e794      	b.n	80039e4 <_malloc_r+0x20>
 8003aba:	6005      	str	r5, [r0, #0]
 8003abc:	e7d6      	b.n	8003a6c <_malloc_r+0xa8>
 8003abe:	bf00      	nop
 8003ac0:	200001ac 	.word	0x200001ac

08003ac4 <__malloc_lock>:
 8003ac4:	4801      	ldr	r0, [pc, #4]	@ (8003acc <__malloc_lock+0x8>)
 8003ac6:	f000 b86b 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 8003aca:	bf00      	nop
 8003acc:	200002ec 	.word	0x200002ec

08003ad0 <__malloc_unlock>:
 8003ad0:	4801      	ldr	r0, [pc, #4]	@ (8003ad8 <__malloc_unlock+0x8>)
 8003ad2:	f000 b866 	b.w	8003ba2 <__retarget_lock_release_recursive>
 8003ad6:	bf00      	nop
 8003ad8:	200002ec 	.word	0x200002ec

08003adc <siprintf>:
 8003adc:	b40e      	push	{r1, r2, r3}
 8003ade:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ae2:	b500      	push	{lr}
 8003ae4:	b09c      	sub	sp, #112	@ 0x70
 8003ae6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003ae8:	9002      	str	r0, [sp, #8]
 8003aea:	9006      	str	r0, [sp, #24]
 8003aec:	9107      	str	r1, [sp, #28]
 8003aee:	9104      	str	r1, [sp, #16]
 8003af0:	4808      	ldr	r0, [pc, #32]	@ (8003b14 <siprintf+0x38>)
 8003af2:	4909      	ldr	r1, [pc, #36]	@ (8003b18 <siprintf+0x3c>)
 8003af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003af8:	9105      	str	r1, [sp, #20]
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	a902      	add	r1, sp, #8
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	f000 f8f4 	bl	8003cec <_svfiprintf_r>
 8003b04:	2200      	movs	r2, #0
 8003b06:	9b02      	ldr	r3, [sp, #8]
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	b01c      	add	sp, #112	@ 0x70
 8003b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b10:	b003      	add	sp, #12
 8003b12:	4770      	bx	lr
 8003b14:	2000002c 	.word	0x2000002c
 8003b18:	ffff0208 	.word	0xffff0208

08003b1c <memset>:
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4402      	add	r2, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memset+0xa>
 8003b24:	4770      	bx	lr
 8003b26:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2a:	e7f9      	b.n	8003b20 <memset+0x4>

08003b2c <_sbrk_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	2300      	movs	r3, #0
 8003b30:	4d05      	ldr	r5, [pc, #20]	@ (8003b48 <_sbrk_r+0x1c>)
 8003b32:	4604      	mov	r4, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	602b      	str	r3, [r5, #0]
 8003b38:	f7fd fdb2 	bl	80016a0 <_sbrk>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d102      	bne.n	8003b46 <_sbrk_r+0x1a>
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	b103      	cbz	r3, 8003b46 <_sbrk_r+0x1a>
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
 8003b48:	200002e8 	.word	0x200002e8

08003b4c <__errno>:
 8003b4c:	4b01      	ldr	r3, [pc, #4]	@ (8003b54 <__errno+0x8>)
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	2000002c 	.word	0x2000002c

08003b58 <__libc_init_array>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	2600      	movs	r6, #0
 8003b5c:	4d0c      	ldr	r5, [pc, #48]	@ (8003b90 <__libc_init_array+0x38>)
 8003b5e:	4c0d      	ldr	r4, [pc, #52]	@ (8003b94 <__libc_init_array+0x3c>)
 8003b60:	1b64      	subs	r4, r4, r5
 8003b62:	10a4      	asrs	r4, r4, #2
 8003b64:	42a6      	cmp	r6, r4
 8003b66:	d109      	bne.n	8003b7c <__libc_init_array+0x24>
 8003b68:	f000 fbba 	bl	80042e0 <_init>
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	4d0a      	ldr	r5, [pc, #40]	@ (8003b98 <__libc_init_array+0x40>)
 8003b70:	4c0a      	ldr	r4, [pc, #40]	@ (8003b9c <__libc_init_array+0x44>)
 8003b72:	1b64      	subs	r4, r4, r5
 8003b74:	10a4      	asrs	r4, r4, #2
 8003b76:	42a6      	cmp	r6, r4
 8003b78:	d105      	bne.n	8003b86 <__libc_init_array+0x2e>
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b80:	4798      	blx	r3
 8003b82:	3601      	adds	r6, #1
 8003b84:	e7ee      	b.n	8003b64 <__libc_init_array+0xc>
 8003b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8a:	4798      	blx	r3
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	e7f2      	b.n	8003b76 <__libc_init_array+0x1e>
 8003b90:	080043e4 	.word	0x080043e4
 8003b94:	080043e4 	.word	0x080043e4
 8003b98:	080043e4 	.word	0x080043e4
 8003b9c:	080043e8 	.word	0x080043e8

08003ba0 <__retarget_lock_acquire_recursive>:
 8003ba0:	4770      	bx	lr

08003ba2 <__retarget_lock_release_recursive>:
 8003ba2:	4770      	bx	lr

08003ba4 <_free_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	2900      	cmp	r1, #0
 8003baa:	d040      	beq.n	8003c2e <_free_r+0x8a>
 8003bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb0:	1f0c      	subs	r4, r1, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bfb8      	it	lt
 8003bb6:	18e4      	addlt	r4, r4, r3
 8003bb8:	f7ff ff84 	bl	8003ac4 <__malloc_lock>
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c30 <_free_r+0x8c>)
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	b933      	cbnz	r3, 8003bd0 <_free_r+0x2c>
 8003bc2:	6063      	str	r3, [r4, #4]
 8003bc4:	6014      	str	r4, [r2, #0]
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bcc:	f7ff bf80 	b.w	8003ad0 <__malloc_unlock>
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	d908      	bls.n	8003be6 <_free_r+0x42>
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	1821      	adds	r1, r4, r0
 8003bd8:	428b      	cmp	r3, r1
 8003bda:	bf01      	itttt	eq
 8003bdc:	6819      	ldreq	r1, [r3, #0]
 8003bde:	685b      	ldreq	r3, [r3, #4]
 8003be0:	1809      	addeq	r1, r1, r0
 8003be2:	6021      	streq	r1, [r4, #0]
 8003be4:	e7ed      	b.n	8003bc2 <_free_r+0x1e>
 8003be6:	461a      	mov	r2, r3
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	b10b      	cbz	r3, 8003bf0 <_free_r+0x4c>
 8003bec:	42a3      	cmp	r3, r4
 8003bee:	d9fa      	bls.n	8003be6 <_free_r+0x42>
 8003bf0:	6811      	ldr	r1, [r2, #0]
 8003bf2:	1850      	adds	r0, r2, r1
 8003bf4:	42a0      	cmp	r0, r4
 8003bf6:	d10b      	bne.n	8003c10 <_free_r+0x6c>
 8003bf8:	6820      	ldr	r0, [r4, #0]
 8003bfa:	4401      	add	r1, r0
 8003bfc:	1850      	adds	r0, r2, r1
 8003bfe:	4283      	cmp	r3, r0
 8003c00:	6011      	str	r1, [r2, #0]
 8003c02:	d1e0      	bne.n	8003bc6 <_free_r+0x22>
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4408      	add	r0, r1
 8003c0a:	6010      	str	r0, [r2, #0]
 8003c0c:	6053      	str	r3, [r2, #4]
 8003c0e:	e7da      	b.n	8003bc6 <_free_r+0x22>
 8003c10:	d902      	bls.n	8003c18 <_free_r+0x74>
 8003c12:	230c      	movs	r3, #12
 8003c14:	602b      	str	r3, [r5, #0]
 8003c16:	e7d6      	b.n	8003bc6 <_free_r+0x22>
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	1821      	adds	r1, r4, r0
 8003c1c:	428b      	cmp	r3, r1
 8003c1e:	bf01      	itttt	eq
 8003c20:	6819      	ldreq	r1, [r3, #0]
 8003c22:	685b      	ldreq	r3, [r3, #4]
 8003c24:	1809      	addeq	r1, r1, r0
 8003c26:	6021      	streq	r1, [r4, #0]
 8003c28:	6063      	str	r3, [r4, #4]
 8003c2a:	6054      	str	r4, [r2, #4]
 8003c2c:	e7cb      	b.n	8003bc6 <_free_r+0x22>
 8003c2e:	bd38      	pop	{r3, r4, r5, pc}
 8003c30:	200001ac 	.word	0x200001ac

08003c34 <__ssputs_r>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	461f      	mov	r7, r3
 8003c3a:	688e      	ldr	r6, [r1, #8]
 8003c3c:	4682      	mov	sl, r0
 8003c3e:	42be      	cmp	r6, r7
 8003c40:	460c      	mov	r4, r1
 8003c42:	4690      	mov	r8, r2
 8003c44:	680b      	ldr	r3, [r1, #0]
 8003c46:	d82d      	bhi.n	8003ca4 <__ssputs_r+0x70>
 8003c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c50:	d026      	beq.n	8003ca0 <__ssputs_r+0x6c>
 8003c52:	6965      	ldr	r5, [r4, #20]
 8003c54:	6909      	ldr	r1, [r1, #16]
 8003c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c5a:	eba3 0901 	sub.w	r9, r3, r1
 8003c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c62:	1c7b      	adds	r3, r7, #1
 8003c64:	444b      	add	r3, r9
 8003c66:	106d      	asrs	r5, r5, #1
 8003c68:	429d      	cmp	r5, r3
 8003c6a:	bf38      	it	cc
 8003c6c:	461d      	movcc	r5, r3
 8003c6e:	0553      	lsls	r3, r2, #21
 8003c70:	d527      	bpl.n	8003cc2 <__ssputs_r+0x8e>
 8003c72:	4629      	mov	r1, r5
 8003c74:	f7ff fea6 	bl	80039c4 <_malloc_r>
 8003c78:	4606      	mov	r6, r0
 8003c7a:	b360      	cbz	r0, 8003cd6 <__ssputs_r+0xa2>
 8003c7c:	464a      	mov	r2, r9
 8003c7e:	6921      	ldr	r1, [r4, #16]
 8003c80:	f000 faea 	bl	8004258 <memcpy>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	6126      	str	r6, [r4, #16]
 8003c92:	444e      	add	r6, r9
 8003c94:	6026      	str	r6, [r4, #0]
 8003c96:	463e      	mov	r6, r7
 8003c98:	6165      	str	r5, [r4, #20]
 8003c9a:	eba5 0509 	sub.w	r5, r5, r9
 8003c9e:	60a5      	str	r5, [r4, #8]
 8003ca0:	42be      	cmp	r6, r7
 8003ca2:	d900      	bls.n	8003ca6 <__ssputs_r+0x72>
 8003ca4:	463e      	mov	r6, r7
 8003ca6:	4632      	mov	r2, r6
 8003ca8:	4641      	mov	r1, r8
 8003caa:	6820      	ldr	r0, [r4, #0]
 8003cac:	f000 faac 	bl	8004208 <memmove>
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	68a3      	ldr	r3, [r4, #8]
 8003cb4:	1b9b      	subs	r3, r3, r6
 8003cb6:	60a3      	str	r3, [r4, #8]
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	4433      	add	r3, r6
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	f000 fad6 	bl	8004274 <_realloc_r>
 8003cc8:	4606      	mov	r6, r0
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d1e0      	bne.n	8003c90 <__ssputs_r+0x5c>
 8003cce:	4650      	mov	r0, sl
 8003cd0:	6921      	ldr	r1, [r4, #16]
 8003cd2:	f7ff ff67 	bl	8003ba4 <_free_r>
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	f8ca 3000 	str.w	r3, [sl]
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce6:	81a3      	strh	r3, [r4, #12]
 8003ce8:	e7e9      	b.n	8003cbe <__ssputs_r+0x8a>
	...

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	460d      	mov	r5, r1
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	b09d      	sub	sp, #116	@ 0x74
 8003cfe:	d510      	bpl.n	8003d22 <_svfiprintf_r+0x36>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b973      	cbnz	r3, 8003d22 <_svfiprintf_r+0x36>
 8003d04:	2140      	movs	r1, #64	@ 0x40
 8003d06:	f7ff fe5d 	bl	80039c4 <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b930      	cbnz	r0, 8003d1e <_svfiprintf_r+0x32>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	b01d      	add	sp, #116	@ 0x74
 8003d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1e:	2340      	movs	r3, #64	@ 0x40
 8003d20:	616b      	str	r3, [r5, #20]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d26:	2320      	movs	r3, #32
 8003d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d2c:	2330      	movs	r3, #48	@ 0x30
 8003d2e:	f04f 0901 	mov.w	r9, #1
 8003d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003ed0 <_svfiprintf_r+0x1e4>
 8003d3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d3e:	4623      	mov	r3, r4
 8003d40:	469a      	mov	sl, r3
 8003d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d46:	b10a      	cbz	r2, 8003d4c <_svfiprintf_r+0x60>
 8003d48:	2a25      	cmp	r2, #37	@ 0x25
 8003d4a:	d1f9      	bne.n	8003d40 <_svfiprintf_r+0x54>
 8003d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d50:	d00b      	beq.n	8003d6a <_svfiprintf_r+0x7e>
 8003d52:	465b      	mov	r3, fp
 8003d54:	4622      	mov	r2, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	4638      	mov	r0, r7
 8003d5a:	f7ff ff6b 	bl	8003c34 <__ssputs_r>
 8003d5e:	3001      	adds	r0, #1
 8003d60:	f000 80a7 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d66:	445a      	add	r2, fp
 8003d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 809f 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7e:	f10a 0a01 	add.w	sl, sl, #1
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	9307      	str	r3, [sp, #28]
 8003d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d8c:	4654      	mov	r4, sl
 8003d8e:	2205      	movs	r2, #5
 8003d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d94:	484e      	ldr	r0, [pc, #312]	@ (8003ed0 <_svfiprintf_r+0x1e4>)
 8003d96:	f000 fa51 	bl	800423c <memchr>
 8003d9a:	9a04      	ldr	r2, [sp, #16]
 8003d9c:	b9d8      	cbnz	r0, 8003dd6 <_svfiprintf_r+0xea>
 8003d9e:	06d0      	lsls	r0, r2, #27
 8003da0:	bf44      	itt	mi
 8003da2:	2320      	movmi	r3, #32
 8003da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003da8:	0711      	lsls	r1, r2, #28
 8003daa:	bf44      	itt	mi
 8003dac:	232b      	movmi	r3, #43	@ 0x2b
 8003dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003db2:	f89a 3000 	ldrb.w	r3, [sl]
 8003db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db8:	d015      	beq.n	8003de6 <_svfiprintf_r+0xfa>
 8003dba:	4654      	mov	r4, sl
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f04f 0c0a 	mov.w	ip, #10
 8003dc2:	9a07      	ldr	r2, [sp, #28]
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dca:	3b30      	subs	r3, #48	@ 0x30
 8003dcc:	2b09      	cmp	r3, #9
 8003dce:	d94b      	bls.n	8003e68 <_svfiprintf_r+0x17c>
 8003dd0:	b1b0      	cbz	r0, 8003e00 <_svfiprintf_r+0x114>
 8003dd2:	9207      	str	r2, [sp, #28]
 8003dd4:	e014      	b.n	8003e00 <_svfiprintf_r+0x114>
 8003dd6:	eba0 0308 	sub.w	r3, r0, r8
 8003dda:	fa09 f303 	lsl.w	r3, r9, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	46a2      	mov	sl, r4
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	e7d2      	b.n	8003d8c <_svfiprintf_r+0xa0>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	1d19      	adds	r1, r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	9103      	str	r1, [sp, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfbb      	ittet	lt
 8003df2:	425b      	neglt	r3, r3
 8003df4:	f042 0202 	orrlt.w	r2, r2, #2
 8003df8:	9307      	strge	r3, [sp, #28]
 8003dfa:	9307      	strlt	r3, [sp, #28]
 8003dfc:	bfb8      	it	lt
 8003dfe:	9204      	strlt	r2, [sp, #16]
 8003e00:	7823      	ldrb	r3, [r4, #0]
 8003e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e04:	d10a      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e06:	7863      	ldrb	r3, [r4, #1]
 8003e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e0a:	d132      	bne.n	8003e72 <_svfiprintf_r+0x186>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	3402      	adds	r4, #2
 8003e10:	1d1a      	adds	r2, r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	9203      	str	r2, [sp, #12]
 8003e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003ed4 <_svfiprintf_r+0x1e8>
 8003e20:	2203      	movs	r2, #3
 8003e22:	4650      	mov	r0, sl
 8003e24:	7821      	ldrb	r1, [r4, #0]
 8003e26:	f000 fa09 	bl	800423c <memchr>
 8003e2a:	b138      	cbz	r0, 8003e3c <_svfiprintf_r+0x150>
 8003e2c:	2240      	movs	r2, #64	@ 0x40
 8003e2e:	9b04      	ldr	r3, [sp, #16]
 8003e30:	eba0 000a 	sub.w	r0, r0, sl
 8003e34:	4082      	lsls	r2, r0
 8003e36:	4313      	orrs	r3, r2
 8003e38:	3401      	adds	r4, #1
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	2206      	movs	r2, #6
 8003e42:	4825      	ldr	r0, [pc, #148]	@ (8003ed8 <_svfiprintf_r+0x1ec>)
 8003e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e48:	f000 f9f8 	bl	800423c <memchr>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d036      	beq.n	8003ebe <_svfiprintf_r+0x1d2>
 8003e50:	4b22      	ldr	r3, [pc, #136]	@ (8003edc <_svfiprintf_r+0x1f0>)
 8003e52:	bb1b      	cbnz	r3, 8003e9c <_svfiprintf_r+0x1b0>
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	3307      	adds	r3, #7
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	9303      	str	r3, [sp, #12]
 8003e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e62:	4433      	add	r3, r6
 8003e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e66:	e76a      	b.n	8003d3e <_svfiprintf_r+0x52>
 8003e68:	460c      	mov	r4, r1
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e70:	e7a8      	b.n	8003dc4 <_svfiprintf_r+0xd8>
 8003e72:	2300      	movs	r3, #0
 8003e74:	f04f 0c0a 	mov.w	ip, #10
 8003e78:	4619      	mov	r1, r3
 8003e7a:	3401      	adds	r4, #1
 8003e7c:	9305      	str	r3, [sp, #20]
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e84:	3a30      	subs	r2, #48	@ 0x30
 8003e86:	2a09      	cmp	r2, #9
 8003e88:	d903      	bls.n	8003e92 <_svfiprintf_r+0x1a6>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0c6      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e8e:	9105      	str	r1, [sp, #20]
 8003e90:	e7c4      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e92:	4604      	mov	r4, r0
 8003e94:	2301      	movs	r3, #1
 8003e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e9a:	e7f0      	b.n	8003e7e <_svfiprintf_r+0x192>
 8003e9c:	ab03      	add	r3, sp, #12
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <_svfiprintf_r+0x1f4>)
 8003ea6:	a904      	add	r1, sp, #16
 8003ea8:	f3af 8000 	nop.w
 8003eac:	1c42      	adds	r2, r0, #1
 8003eae:	4606      	mov	r6, r0
 8003eb0:	d1d6      	bne.n	8003e60 <_svfiprintf_r+0x174>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	065b      	lsls	r3, r3, #25
 8003eb6:	f53f af2d 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ebc:	e72c      	b.n	8003d18 <_svfiprintf_r+0x2c>
 8003ebe:	ab03      	add	r3, sp, #12
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	462a      	mov	r2, r5
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <_svfiprintf_r+0x1f4>)
 8003ec8:	a904      	add	r1, sp, #16
 8003eca:	f000 f87d 	bl	8003fc8 <_printf_i>
 8003ece:	e7ed      	b.n	8003eac <_svfiprintf_r+0x1c0>
 8003ed0:	080043ae 	.word	0x080043ae
 8003ed4:	080043b4 	.word	0x080043b4
 8003ed8:	080043b8 	.word	0x080043b8
 8003edc:	00000000 	.word	0x00000000
 8003ee0:	08003c35 	.word	0x08003c35

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4698      	mov	r8, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bfb8      	it	lt
 8003ef6:	4613      	movlt	r3, r2
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003efe:	460c      	mov	r4, r1
 8003f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f04:	b10a      	cbz	r2, 8003f0a <_printf_common+0x26>
 8003f06:	3301      	adds	r3, #1
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0699      	lsls	r1, r3, #26
 8003f0e:	bf42      	ittt	mi
 8003f10:	6833      	ldrmi	r3, [r6, #0]
 8003f12:	3302      	addmi	r3, #2
 8003f14:	6033      	strmi	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	f015 0506 	ands.w	r5, r5, #6
 8003f1c:	d106      	bne.n	8003f2c <_printf_common+0x48>
 8003f1e:	f104 0a19 	add.w	sl, r4, #25
 8003f22:	68e3      	ldr	r3, [r4, #12]
 8003f24:	6832      	ldr	r2, [r6, #0]
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	dc2b      	bgt.n	8003f84 <_printf_common+0xa0>
 8003f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f30:	6822      	ldr	r2, [r4, #0]
 8003f32:	3b00      	subs	r3, #0
 8003f34:	bf18      	it	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	0692      	lsls	r2, r2, #26
 8003f3a:	d430      	bmi.n	8003f9e <_printf_common+0xba>
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f44:	47c8      	blx	r9
 8003f46:	3001      	adds	r0, #1
 8003f48:	d023      	beq.n	8003f92 <_printf_common+0xae>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	6922      	ldr	r2, [r4, #16]
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf14      	ite	ne
 8003f56:	2500      	movne	r5, #0
 8003f58:	6833      	ldreq	r3, [r6, #0]
 8003f5a:	f04f 0600 	mov.w	r6, #0
 8003f5e:	bf08      	it	eq
 8003f60:	68e5      	ldreq	r5, [r4, #12]
 8003f62:	f104 041a 	add.w	r4, r4, #26
 8003f66:	bf08      	it	eq
 8003f68:	1aed      	subeq	r5, r5, r3
 8003f6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f6e:	bf08      	it	eq
 8003f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bfc4      	itt	gt
 8003f78:	1a9b      	subgt	r3, r3, r2
 8003f7a:	18ed      	addgt	r5, r5, r3
 8003f7c:	42b5      	cmp	r5, r6
 8003f7e:	d11a      	bne.n	8003fb6 <_printf_common+0xd2>
 8003f80:	2000      	movs	r0, #0
 8003f82:	e008      	b.n	8003f96 <_printf_common+0xb2>
 8003f84:	2301      	movs	r3, #1
 8003f86:	4652      	mov	r2, sl
 8003f88:	4641      	mov	r1, r8
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	47c8      	blx	r9
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d103      	bne.n	8003f9a <_printf_common+0xb6>
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295
 8003f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9a:	3501      	adds	r5, #1
 8003f9c:	e7c1      	b.n	8003f22 <_printf_common+0x3e>
 8003f9e:	2030      	movs	r0, #48	@ 0x30
 8003fa0:	18e1      	adds	r1, r4, r3
 8003fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fac:	4422      	add	r2, r4
 8003fae:	3302      	adds	r3, #2
 8003fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fb4:	e7c2      	b.n	8003f3c <_printf_common+0x58>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4622      	mov	r2, r4
 8003fba:	4641      	mov	r1, r8
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	47c8      	blx	r9
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d0e6      	beq.n	8003f92 <_printf_common+0xae>
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	e7d9      	b.n	8003f7c <_printf_common+0x98>

08003fc8 <_printf_i>:
 8003fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	7e0f      	ldrb	r7, [r1, #24]
 8003fce:	4691      	mov	r9, r2
 8003fd0:	2f78      	cmp	r7, #120	@ 0x78
 8003fd2:	4680      	mov	r8, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	469a      	mov	sl, r3
 8003fd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fde:	d807      	bhi.n	8003ff0 <_printf_i+0x28>
 8003fe0:	2f62      	cmp	r7, #98	@ 0x62
 8003fe2:	d80a      	bhi.n	8003ffa <_printf_i+0x32>
 8003fe4:	2f00      	cmp	r7, #0
 8003fe6:	f000 80d3 	beq.w	8004190 <_printf_i+0x1c8>
 8003fea:	2f58      	cmp	r7, #88	@ 0x58
 8003fec:	f000 80ba 	beq.w	8004164 <_printf_i+0x19c>
 8003ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ff8:	e03a      	b.n	8004070 <_printf_i+0xa8>
 8003ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ffe:	2b15      	cmp	r3, #21
 8004000:	d8f6      	bhi.n	8003ff0 <_printf_i+0x28>
 8004002:	a101      	add	r1, pc, #4	@ (adr r1, 8004008 <_printf_i+0x40>)
 8004004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004008:	08004061 	.word	0x08004061
 800400c:	08004075 	.word	0x08004075
 8004010:	08003ff1 	.word	0x08003ff1
 8004014:	08003ff1 	.word	0x08003ff1
 8004018:	08003ff1 	.word	0x08003ff1
 800401c:	08003ff1 	.word	0x08003ff1
 8004020:	08004075 	.word	0x08004075
 8004024:	08003ff1 	.word	0x08003ff1
 8004028:	08003ff1 	.word	0x08003ff1
 800402c:	08003ff1 	.word	0x08003ff1
 8004030:	08003ff1 	.word	0x08003ff1
 8004034:	08004177 	.word	0x08004177
 8004038:	0800409f 	.word	0x0800409f
 800403c:	08004131 	.word	0x08004131
 8004040:	08003ff1 	.word	0x08003ff1
 8004044:	08003ff1 	.word	0x08003ff1
 8004048:	08004199 	.word	0x08004199
 800404c:	08003ff1 	.word	0x08003ff1
 8004050:	0800409f 	.word	0x0800409f
 8004054:	08003ff1 	.word	0x08003ff1
 8004058:	08003ff1 	.word	0x08003ff1
 800405c:	08004139 	.word	0x08004139
 8004060:	6833      	ldr	r3, [r6, #0]
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6032      	str	r2, [r6, #0]
 8004068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800406c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004070:	2301      	movs	r3, #1
 8004072:	e09e      	b.n	80041b2 <_printf_i+0x1ea>
 8004074:	6833      	ldr	r3, [r6, #0]
 8004076:	6820      	ldr	r0, [r4, #0]
 8004078:	1d19      	adds	r1, r3, #4
 800407a:	6031      	str	r1, [r6, #0]
 800407c:	0606      	lsls	r6, r0, #24
 800407e:	d501      	bpl.n	8004084 <_printf_i+0xbc>
 8004080:	681d      	ldr	r5, [r3, #0]
 8004082:	e003      	b.n	800408c <_printf_i+0xc4>
 8004084:	0645      	lsls	r5, r0, #25
 8004086:	d5fb      	bpl.n	8004080 <_printf_i+0xb8>
 8004088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800408c:	2d00      	cmp	r5, #0
 800408e:	da03      	bge.n	8004098 <_printf_i+0xd0>
 8004090:	232d      	movs	r3, #45	@ 0x2d
 8004092:	426d      	negs	r5, r5
 8004094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004098:	230a      	movs	r3, #10
 800409a:	4859      	ldr	r0, [pc, #356]	@ (8004200 <_printf_i+0x238>)
 800409c:	e011      	b.n	80040c2 <_printf_i+0xfa>
 800409e:	6821      	ldr	r1, [r4, #0]
 80040a0:	6833      	ldr	r3, [r6, #0]
 80040a2:	0608      	lsls	r0, r1, #24
 80040a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80040a8:	d402      	bmi.n	80040b0 <_printf_i+0xe8>
 80040aa:	0649      	lsls	r1, r1, #25
 80040ac:	bf48      	it	mi
 80040ae:	b2ad      	uxthmi	r5, r5
 80040b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80040b2:	6033      	str	r3, [r6, #0]
 80040b4:	bf14      	ite	ne
 80040b6:	230a      	movne	r3, #10
 80040b8:	2308      	moveq	r3, #8
 80040ba:	4851      	ldr	r0, [pc, #324]	@ (8004200 <_printf_i+0x238>)
 80040bc:	2100      	movs	r1, #0
 80040be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040c2:	6866      	ldr	r6, [r4, #4]
 80040c4:	2e00      	cmp	r6, #0
 80040c6:	bfa8      	it	ge
 80040c8:	6821      	ldrge	r1, [r4, #0]
 80040ca:	60a6      	str	r6, [r4, #8]
 80040cc:	bfa4      	itt	ge
 80040ce:	f021 0104 	bicge.w	r1, r1, #4
 80040d2:	6021      	strge	r1, [r4, #0]
 80040d4:	b90d      	cbnz	r5, 80040da <_printf_i+0x112>
 80040d6:	2e00      	cmp	r6, #0
 80040d8:	d04b      	beq.n	8004172 <_printf_i+0x1aa>
 80040da:	4616      	mov	r6, r2
 80040dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80040e0:	fb03 5711 	mls	r7, r3, r1, r5
 80040e4:	5dc7      	ldrb	r7, [r0, r7]
 80040e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040ea:	462f      	mov	r7, r5
 80040ec:	42bb      	cmp	r3, r7
 80040ee:	460d      	mov	r5, r1
 80040f0:	d9f4      	bls.n	80040dc <_printf_i+0x114>
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d10b      	bne.n	800410e <_printf_i+0x146>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	07df      	lsls	r7, r3, #31
 80040fa:	d508      	bpl.n	800410e <_printf_i+0x146>
 80040fc:	6923      	ldr	r3, [r4, #16]
 80040fe:	6861      	ldr	r1, [r4, #4]
 8004100:	4299      	cmp	r1, r3
 8004102:	bfde      	ittt	le
 8004104:	2330      	movle	r3, #48	@ 0x30
 8004106:	f806 3c01 	strble.w	r3, [r6, #-1]
 800410a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800410e:	1b92      	subs	r2, r2, r6
 8004110:	6122      	str	r2, [r4, #16]
 8004112:	464b      	mov	r3, r9
 8004114:	4621      	mov	r1, r4
 8004116:	4640      	mov	r0, r8
 8004118:	f8cd a000 	str.w	sl, [sp]
 800411c:	aa03      	add	r2, sp, #12
 800411e:	f7ff fee1 	bl	8003ee4 <_printf_common>
 8004122:	3001      	adds	r0, #1
 8004124:	d14a      	bne.n	80041bc <_printf_i+0x1f4>
 8004126:	f04f 30ff 	mov.w	r0, #4294967295
 800412a:	b004      	add	sp, #16
 800412c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	f043 0320 	orr.w	r3, r3, #32
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	2778      	movs	r7, #120	@ 0x78
 800413a:	4832      	ldr	r0, [pc, #200]	@ (8004204 <_printf_i+0x23c>)
 800413c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	6831      	ldr	r1, [r6, #0]
 8004144:	061f      	lsls	r7, r3, #24
 8004146:	f851 5b04 	ldr.w	r5, [r1], #4
 800414a:	d402      	bmi.n	8004152 <_printf_i+0x18a>
 800414c:	065f      	lsls	r7, r3, #25
 800414e:	bf48      	it	mi
 8004150:	b2ad      	uxthmi	r5, r5
 8004152:	6031      	str	r1, [r6, #0]
 8004154:	07d9      	lsls	r1, r3, #31
 8004156:	bf44      	itt	mi
 8004158:	f043 0320 	orrmi.w	r3, r3, #32
 800415c:	6023      	strmi	r3, [r4, #0]
 800415e:	b11d      	cbz	r5, 8004168 <_printf_i+0x1a0>
 8004160:	2310      	movs	r3, #16
 8004162:	e7ab      	b.n	80040bc <_printf_i+0xf4>
 8004164:	4826      	ldr	r0, [pc, #152]	@ (8004200 <_printf_i+0x238>)
 8004166:	e7e9      	b.n	800413c <_printf_i+0x174>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	f023 0320 	bic.w	r3, r3, #32
 800416e:	6023      	str	r3, [r4, #0]
 8004170:	e7f6      	b.n	8004160 <_printf_i+0x198>
 8004172:	4616      	mov	r6, r2
 8004174:	e7bd      	b.n	80040f2 <_printf_i+0x12a>
 8004176:	6833      	ldr	r3, [r6, #0]
 8004178:	6825      	ldr	r5, [r4, #0]
 800417a:	1d18      	adds	r0, r3, #4
 800417c:	6961      	ldr	r1, [r4, #20]
 800417e:	6030      	str	r0, [r6, #0]
 8004180:	062e      	lsls	r6, r5, #24
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	d501      	bpl.n	800418a <_printf_i+0x1c2>
 8004186:	6019      	str	r1, [r3, #0]
 8004188:	e002      	b.n	8004190 <_printf_i+0x1c8>
 800418a:	0668      	lsls	r0, r5, #25
 800418c:	d5fb      	bpl.n	8004186 <_printf_i+0x1be>
 800418e:	8019      	strh	r1, [r3, #0]
 8004190:	2300      	movs	r3, #0
 8004192:	4616      	mov	r6, r2
 8004194:	6123      	str	r3, [r4, #16]
 8004196:	e7bc      	b.n	8004112 <_printf_i+0x14a>
 8004198:	6833      	ldr	r3, [r6, #0]
 800419a:	2100      	movs	r1, #0
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	6032      	str	r2, [r6, #0]
 80041a0:	681e      	ldr	r6, [r3, #0]
 80041a2:	6862      	ldr	r2, [r4, #4]
 80041a4:	4630      	mov	r0, r6
 80041a6:	f000 f849 	bl	800423c <memchr>
 80041aa:	b108      	cbz	r0, 80041b0 <_printf_i+0x1e8>
 80041ac:	1b80      	subs	r0, r0, r6
 80041ae:	6060      	str	r0, [r4, #4]
 80041b0:	6863      	ldr	r3, [r4, #4]
 80041b2:	6123      	str	r3, [r4, #16]
 80041b4:	2300      	movs	r3, #0
 80041b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ba:	e7aa      	b.n	8004112 <_printf_i+0x14a>
 80041bc:	4632      	mov	r2, r6
 80041be:	4649      	mov	r1, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	6923      	ldr	r3, [r4, #16]
 80041c4:	47d0      	blx	sl
 80041c6:	3001      	adds	r0, #1
 80041c8:	d0ad      	beq.n	8004126 <_printf_i+0x15e>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	079b      	lsls	r3, r3, #30
 80041ce:	d413      	bmi.n	80041f8 <_printf_i+0x230>
 80041d0:	68e0      	ldr	r0, [r4, #12]
 80041d2:	9b03      	ldr	r3, [sp, #12]
 80041d4:	4298      	cmp	r0, r3
 80041d6:	bfb8      	it	lt
 80041d8:	4618      	movlt	r0, r3
 80041da:	e7a6      	b.n	800412a <_printf_i+0x162>
 80041dc:	2301      	movs	r3, #1
 80041de:	4632      	mov	r2, r6
 80041e0:	4649      	mov	r1, r9
 80041e2:	4640      	mov	r0, r8
 80041e4:	47d0      	blx	sl
 80041e6:	3001      	adds	r0, #1
 80041e8:	d09d      	beq.n	8004126 <_printf_i+0x15e>
 80041ea:	3501      	adds	r5, #1
 80041ec:	68e3      	ldr	r3, [r4, #12]
 80041ee:	9903      	ldr	r1, [sp, #12]
 80041f0:	1a5b      	subs	r3, r3, r1
 80041f2:	42ab      	cmp	r3, r5
 80041f4:	dcf2      	bgt.n	80041dc <_printf_i+0x214>
 80041f6:	e7eb      	b.n	80041d0 <_printf_i+0x208>
 80041f8:	2500      	movs	r5, #0
 80041fa:	f104 0619 	add.w	r6, r4, #25
 80041fe:	e7f5      	b.n	80041ec <_printf_i+0x224>
 8004200:	080043bf 	.word	0x080043bf
 8004204:	080043d0 	.word	0x080043d0

08004208 <memmove>:
 8004208:	4288      	cmp	r0, r1
 800420a:	b510      	push	{r4, lr}
 800420c:	eb01 0402 	add.w	r4, r1, r2
 8004210:	d902      	bls.n	8004218 <memmove+0x10>
 8004212:	4284      	cmp	r4, r0
 8004214:	4623      	mov	r3, r4
 8004216:	d807      	bhi.n	8004228 <memmove+0x20>
 8004218:	1e43      	subs	r3, r0, #1
 800421a:	42a1      	cmp	r1, r4
 800421c:	d008      	beq.n	8004230 <memmove+0x28>
 800421e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004226:	e7f8      	b.n	800421a <memmove+0x12>
 8004228:	4601      	mov	r1, r0
 800422a:	4402      	add	r2, r0
 800422c:	428a      	cmp	r2, r1
 800422e:	d100      	bne.n	8004232 <memmove+0x2a>
 8004230:	bd10      	pop	{r4, pc}
 8004232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800423a:	e7f7      	b.n	800422c <memmove+0x24>

0800423c <memchr>:
 800423c:	4603      	mov	r3, r0
 800423e:	b510      	push	{r4, lr}
 8004240:	b2c9      	uxtb	r1, r1
 8004242:	4402      	add	r2, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	4618      	mov	r0, r3
 8004248:	d101      	bne.n	800424e <memchr+0x12>
 800424a:	2000      	movs	r0, #0
 800424c:	e003      	b.n	8004256 <memchr+0x1a>
 800424e:	7804      	ldrb	r4, [r0, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	428c      	cmp	r4, r1
 8004254:	d1f6      	bne.n	8004244 <memchr+0x8>
 8004256:	bd10      	pop	{r4, pc}

08004258 <memcpy>:
 8004258:	440a      	add	r2, r1
 800425a:	4291      	cmp	r1, r2
 800425c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004260:	d100      	bne.n	8004264 <memcpy+0xc>
 8004262:	4770      	bx	lr
 8004264:	b510      	push	{r4, lr}
 8004266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800426a:	4291      	cmp	r1, r2
 800426c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004270:	d1f9      	bne.n	8004266 <memcpy+0xe>
 8004272:	bd10      	pop	{r4, pc}

08004274 <_realloc_r>:
 8004274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004278:	4680      	mov	r8, r0
 800427a:	4615      	mov	r5, r2
 800427c:	460c      	mov	r4, r1
 800427e:	b921      	cbnz	r1, 800428a <_realloc_r+0x16>
 8004280:	4611      	mov	r1, r2
 8004282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004286:	f7ff bb9d 	b.w	80039c4 <_malloc_r>
 800428a:	b92a      	cbnz	r2, 8004298 <_realloc_r+0x24>
 800428c:	f7ff fc8a 	bl	8003ba4 <_free_r>
 8004290:	2400      	movs	r4, #0
 8004292:	4620      	mov	r0, r4
 8004294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004298:	f000 f81a 	bl	80042d0 <_malloc_usable_size_r>
 800429c:	4285      	cmp	r5, r0
 800429e:	4606      	mov	r6, r0
 80042a0:	d802      	bhi.n	80042a8 <_realloc_r+0x34>
 80042a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042a6:	d8f4      	bhi.n	8004292 <_realloc_r+0x1e>
 80042a8:	4629      	mov	r1, r5
 80042aa:	4640      	mov	r0, r8
 80042ac:	f7ff fb8a 	bl	80039c4 <_malloc_r>
 80042b0:	4607      	mov	r7, r0
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d0ec      	beq.n	8004290 <_realloc_r+0x1c>
 80042b6:	42b5      	cmp	r5, r6
 80042b8:	462a      	mov	r2, r5
 80042ba:	4621      	mov	r1, r4
 80042bc:	bf28      	it	cs
 80042be:	4632      	movcs	r2, r6
 80042c0:	f7ff ffca 	bl	8004258 <memcpy>
 80042c4:	4621      	mov	r1, r4
 80042c6:	4640      	mov	r0, r8
 80042c8:	f7ff fc6c 	bl	8003ba4 <_free_r>
 80042cc:	463c      	mov	r4, r7
 80042ce:	e7e0      	b.n	8004292 <_realloc_r+0x1e>

080042d0 <_malloc_usable_size_r>:
 80042d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d4:	1f18      	subs	r0, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bfbc      	itt	lt
 80042da:	580b      	ldrlt	r3, [r1, r0]
 80042dc:	18c0      	addlt	r0, r0, r3
 80042de:	4770      	bx	lr

080042e0 <_init>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	bf00      	nop
 80042e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e6:	bc08      	pop	{r3}
 80042e8:	469e      	mov	lr, r3
 80042ea:	4770      	bx	lr

080042ec <_fini>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr
