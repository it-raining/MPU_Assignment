
MPU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004290  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800439c  0800439c  0000539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004478  08004478  0000607c  2**0
                  CONTENTS
  4 .ARM          00000000  08004478  08004478  0000607c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004478  08004478  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004478  08004478  00005478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800447c  0800447c  0000547c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004480  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000007c  080044fc  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080044fc  000062f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f615  00000000  00000000  000060a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002598  00000000  00000000  000156ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00017c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c54  00000000  00000000  00018c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196df  00000000  00000000  0001986c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a64  00000000  00000000  00032f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da3f  00000000  00000000  000479af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d53ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ac  00000000  00000000  000d5434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000d9ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004384 	.word	0x08004384

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08004384 	.word	0x08004384

0800014c <fsm_for_button>:

#include "fsm_for_button.h"

enum ButtonState button_state[NO_OF_BUTTONS] = { 1, 1, 1 };

void fsm_for_button(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	////////////////// BUTTON 1 ////////////////////////////
	switch (button_state[MODIFY_BUTTON]) {
 8000150:	4b94      	ldr	r3, [pc, #592]	@ (80003a4 <fsm_for_button+0x258>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b02      	cmp	r3, #2
 8000156:	d055      	beq.n	8000204 <fsm_for_button+0xb8>
 8000158:	2b02      	cmp	r3, #2
 800015a:	dc62      	bgt.n	8000222 <fsm_for_button+0xd6>
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <fsm_for_button+0x1a>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d03b      	beq.n	80001dc <fsm_for_button+0x90>
 8000164:	e05d      	b.n	8000222 <fsm_for_button+0xd6>
	case BUTTON_RELEASED:
		if (is_button_pressed(MODIFY_BUTTON)) {
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fde0 	bl	8000d2c <is_button_pressed>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d052      	beq.n	8000218 <fsm_for_button+0xcc>
			LED_A_1_GPIO_Port->ODR |= ALL_LED;
 8000172:	4b8d      	ldr	r3, [pc, #564]	@ (80003a8 <fsm_for_button+0x25c>)
 8000174:	68db      	ldr	r3, [r3, #12]
 8000176:	4a8c      	ldr	r2, [pc, #560]	@ (80003a8 <fsm_for_button+0x25c>)
 8000178:	f443 6387 	orr.w	r3, r3, #1080	@ 0x438
 800017c:	60d3      	str	r3, [r2, #12]
			switch (mode) {
 800017e:	4b8b      	ldr	r3, [pc, #556]	@ (80003ac <fsm_for_button+0x260>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b03      	cmp	r3, #3
 8000184:	d01e      	beq.n	80001c4 <fsm_for_button+0x78>
 8000186:	2b03      	cmp	r3, #3
 8000188:	dc20      	bgt.n	80001cc <fsm_for_button+0x80>
 800018a:	2b01      	cmp	r3, #1
 800018c:	d002      	beq.n	8000194 <fsm_for_button+0x48>
 800018e:	2b02      	cmp	r3, #2
 8000190:	d00a      	beq.n	80001a8 <fsm_for_button+0x5c>
 8000192:	e01b      	b.n	80001cc <fsm_for_button+0x80>
			case AUTO:
				mode = MANUAL;
 8000194:	4b85      	ldr	r3, [pc, #532]	@ (80003ac <fsm_for_button+0x260>)
 8000196:	2202      	movs	r2, #2
 8000198:	701a      	strb	r2, [r3, #0]
				line_1 = RED;
 800019a:	4b85      	ldr	r3, [pc, #532]	@ (80003b0 <fsm_for_button+0x264>)
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
				line_2 = GREEN;
 80001a0:	4b84      	ldr	r3, [pc, #528]	@ (80003b4 <fsm_for_button+0x268>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
				break;
 80001a6:	e015      	b.n	80001d4 <fsm_for_button+0x88>
			case MANUAL:
				mode = MODIFY;
 80001a8:	4b80      	ldr	r3, [pc, #512]	@ (80003ac <fsm_for_button+0x260>)
 80001aa:	2203      	movs	r2, #3
 80001ac:	701a      	strb	r2, [r3, #0]
				buffer = red_light;
 80001ae:	4b82      	ldr	r3, [pc, #520]	@ (80003b8 <fsm_for_button+0x26c>)
 80001b0:	781a      	ldrb	r2, [r3, #0]
 80001b2:	4b82      	ldr	r3, [pc, #520]	@ (80003bc <fsm_for_button+0x270>)
 80001b4:	701a      	strb	r2, [r3, #0]
				line_1 = RED;
 80001b6:	4b7e      	ldr	r3, [pc, #504]	@ (80003b0 <fsm_for_button+0x264>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	701a      	strb	r2, [r3, #0]
				line_2 = RED;
 80001bc:	4b7d      	ldr	r3, [pc, #500]	@ (80003b4 <fsm_for_button+0x268>)
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]
				break;
 80001c2:	e007      	b.n	80001d4 <fsm_for_button+0x88>
			case MODIFY:
				mode = INIT;
 80001c4:	4b79      	ldr	r3, [pc, #484]	@ (80003ac <fsm_for_button+0x260>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
				break;
 80001ca:	e003      	b.n	80001d4 <fsm_for_button+0x88>
			default:
				mode = INIT;
 80001cc:	4b77      	ldr	r3, [pc, #476]	@ (80003ac <fsm_for_button+0x260>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	701a      	strb	r2, [r3, #0]
				break;
 80001d2:	bf00      	nop
			}
			button_state[MODIFY_BUTTON] = BUTTON_PRESSED;
 80001d4:	4b73      	ldr	r3, [pc, #460]	@ (80003a4 <fsm_for_button+0x258>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80001da:	e01d      	b.n	8000218 <fsm_for_button+0xcc>
	case BUTTON_PRESSED:
		if (!is_button_pressed(MODIFY_BUTTON)) {
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 fda5 	bl	8000d2c <is_button_pressed>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d103      	bne.n	80001f0 <fsm_for_button+0xa4>
			button_state[MODIFY_BUTTON] = BUTTON_RELEASED;
 80001e8:	4b6e      	ldr	r3, [pc, #440]	@ (80003a4 <fsm_for_button+0x258>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]
		} else {
			if (is_button_pressed_1s(MODIFY_BUTTON)) {
				button_state[MODIFY_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
			}
		}
		break;
 80001ee:	e015      	b.n	800021c <fsm_for_button+0xd0>
			if (is_button_pressed_1s(MODIFY_BUTTON)) {
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 fdb5 	bl	8000d60 <is_button_pressed_1s>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d00f      	beq.n	800021c <fsm_for_button+0xd0>
				button_state[MODIFY_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80001fc:	4b69      	ldr	r3, [pc, #420]	@ (80003a4 <fsm_for_button+0x258>)
 80001fe:	2202      	movs	r2, #2
 8000200:	701a      	strb	r2, [r3, #0]
		break;
 8000202:	e00b      	b.n	800021c <fsm_for_button+0xd0>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (!is_button_pressed(MODIFY_BUTTON)) {
 8000204:	2000      	movs	r0, #0
 8000206:	f000 fd91 	bl	8000d2c <is_button_pressed>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d107      	bne.n	8000220 <fsm_for_button+0xd4>
			button_state[MODIFY_BUTTON] = BUTTON_RELEASED;
 8000210:	4b64      	ldr	r3, [pc, #400]	@ (80003a4 <fsm_for_button+0x258>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000216:	e003      	b.n	8000220 <fsm_for_button+0xd4>
		break;
 8000218:	bf00      	nop
 800021a:	e002      	b.n	8000222 <fsm_for_button+0xd6>
		break;
 800021c:	bf00      	nop
 800021e:	e000      	b.n	8000222 <fsm_for_button+0xd6>
		break;
 8000220:	bf00      	nop
	}
	////////////////// BUTTON 2 ////////////////////////////

	switch (button_state[STATE_BUTTON]) {
 8000222:	4b60      	ldr	r3, [pc, #384]	@ (80003a4 <fsm_for_button+0x258>)
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2b02      	cmp	r3, #2
 8000228:	f000 8097 	beq.w	800035a <fsm_for_button+0x20e>
 800022c:	2b02      	cmp	r3, #2
 800022e:	f300 80a3 	bgt.w	8000378 <fsm_for_button+0x22c>
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <fsm_for_button+0xf0>
 8000236:	2b01      	cmp	r3, #1
 8000238:	d00b      	beq.n	8000252 <fsm_for_button+0x106>
 800023a:	e09d      	b.n	8000378 <fsm_for_button+0x22c>
	case BUTTON_RELEASED:
		if (is_button_pressed(STATE_BUTTON)) {
 800023c:	2001      	movs	r0, #1
 800023e:	f000 fd75 	bl	8000d2c <is_button_pressed>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	f000 8092 	beq.w	800036e <fsm_for_button+0x222>
			button_state[STATE_BUTTON] = BUTTON_PRESSED;
 800024a:	4b56      	ldr	r3, [pc, #344]	@ (80003a4 <fsm_for_button+0x258>)
 800024c:	2201      	movs	r2, #1
 800024e:	705a      	strb	r2, [r3, #1]
		}
		break;
 8000250:	e08d      	b.n	800036e <fsm_for_button+0x222>
	case BUTTON_PRESSED:
		if (!is_button_pressed(STATE_BUTTON)) {
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fd6a 	bl	8000d2c <is_button_pressed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d154      	bne.n	8000308 <fsm_for_button+0x1bc>
			switch (mode) {
 800025e:	4b53      	ldr	r3, [pc, #332]	@ (80003ac <fsm_for_button+0x260>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b02      	cmp	r3, #2
 8000264:	d002      	beq.n	800026c <fsm_for_button+0x120>
 8000266:	2b03      	cmp	r3, #3
 8000268:	d01f      	beq.n	80002aa <fsm_for_button+0x15e>
				default:
					break;
				}
				break;
			default:
				break;
 800026a:	e049      	b.n	8000300 <fsm_for_button+0x1b4>
				line_1 = (line_1 + 1) % NO_OF_STATE;
 800026c:	4b50      	ldr	r3, [pc, #320]	@ (80003b0 <fsm_for_button+0x264>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	4b53      	ldr	r3, [pc, #332]	@ (80003c0 <fsm_for_button+0x274>)
 8000274:	fb83 3102 	smull	r3, r1, r3, r2
 8000278:	17d3      	asrs	r3, r2, #31
 800027a:	1ac9      	subs	r1, r1, r3
 800027c:	460b      	mov	r3, r1
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	440b      	add	r3, r1
 8000282:	1ad1      	subs	r1, r2, r3
 8000284:	b2ca      	uxtb	r2, r1
 8000286:	4b4a      	ldr	r3, [pc, #296]	@ (80003b0 <fsm_for_button+0x264>)
 8000288:	701a      	strb	r2, [r3, #0]
				line_2 = (line_2 + 1) % NO_OF_STATE;
 800028a:	4b4a      	ldr	r3, [pc, #296]	@ (80003b4 <fsm_for_button+0x268>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	1c5a      	adds	r2, r3, #1
 8000290:	4b4b      	ldr	r3, [pc, #300]	@ (80003c0 <fsm_for_button+0x274>)
 8000292:	fb83 3102 	smull	r3, r1, r3, r2
 8000296:	17d3      	asrs	r3, r2, #31
 8000298:	1ac9      	subs	r1, r1, r3
 800029a:	460b      	mov	r3, r1
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	440b      	add	r3, r1
 80002a0:	1ad1      	subs	r1, r2, r3
 80002a2:	b2ca      	uxtb	r2, r1
 80002a4:	4b43      	ldr	r3, [pc, #268]	@ (80003b4 <fsm_for_button+0x268>)
 80002a6:	701a      	strb	r2, [r3, #0]
				break;
 80002a8:	e02a      	b.n	8000300 <fsm_for_button+0x1b4>
				line_1 = (line_1 + 1) % NO_OF_STATE;
 80002aa:	4b41      	ldr	r3, [pc, #260]	@ (80003b0 <fsm_for_button+0x264>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	4b43      	ldr	r3, [pc, #268]	@ (80003c0 <fsm_for_button+0x274>)
 80002b2:	fb83 3102 	smull	r3, r1, r3, r2
 80002b6:	17d3      	asrs	r3, r2, #31
 80002b8:	1ac9      	subs	r1, r1, r3
 80002ba:	460b      	mov	r3, r1
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	440b      	add	r3, r1
 80002c0:	1ad1      	subs	r1, r2, r3
 80002c2:	b2ca      	uxtb	r2, r1
 80002c4:	4b3a      	ldr	r3, [pc, #232]	@ (80003b0 <fsm_for_button+0x264>)
 80002c6:	701a      	strb	r2, [r3, #0]
				switch (line_1) {
 80002c8:	4b39      	ldr	r3, [pc, #228]	@ (80003b0 <fsm_for_button+0x264>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d00b      	beq.n	80002e8 <fsm_for_button+0x19c>
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	dc13      	bgt.n	80002fc <fsm_for_button+0x1b0>
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d002      	beq.n	80002de <fsm_for_button+0x192>
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d00a      	beq.n	80002f2 <fsm_for_button+0x1a6>
					break;
 80002dc:	e00e      	b.n	80002fc <fsm_for_button+0x1b0>
					buffer = red_light;
 80002de:	4b36      	ldr	r3, [pc, #216]	@ (80003b8 <fsm_for_button+0x26c>)
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b36      	ldr	r3, [pc, #216]	@ (80003bc <fsm_for_button+0x270>)
 80002e4:	701a      	strb	r2, [r3, #0]
					break;
 80002e6:	e00a      	b.n	80002fe <fsm_for_button+0x1b2>
					buffer = amber_light;
 80002e8:	4b36      	ldr	r3, [pc, #216]	@ (80003c4 <fsm_for_button+0x278>)
 80002ea:	781a      	ldrb	r2, [r3, #0]
 80002ec:	4b33      	ldr	r3, [pc, #204]	@ (80003bc <fsm_for_button+0x270>)
 80002ee:	701a      	strb	r2, [r3, #0]
					break;
 80002f0:	e005      	b.n	80002fe <fsm_for_button+0x1b2>
					buffer = green_light;
 80002f2:	4b35      	ldr	r3, [pc, #212]	@ (80003c8 <fsm_for_button+0x27c>)
 80002f4:	781a      	ldrb	r2, [r3, #0]
 80002f6:	4b31      	ldr	r3, [pc, #196]	@ (80003bc <fsm_for_button+0x270>)
 80002f8:	701a      	strb	r2, [r3, #0]
					break;
 80002fa:	e000      	b.n	80002fe <fsm_for_button+0x1b2>
					break;
 80002fc:	bf00      	nop
				break;
 80002fe:	bf00      	nop
			}
			button_state[STATE_BUTTON] = BUTTON_RELEASED;
 8000300:	4b28      	ldr	r3, [pc, #160]	@ (80003a4 <fsm_for_button+0x258>)
 8000302:	2200      	movs	r2, #0
 8000304:	705a      	strb	r2, [r3, #1]
					}
				}
				button_state[STATE_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
			}
		}
		break;
 8000306:	e034      	b.n	8000372 <fsm_for_button+0x226>
			if (is_button_pressed_1s(STATE_BUTTON)) {
 8000308:	2001      	movs	r0, #1
 800030a:	f000 fd29 	bl	8000d60 <is_button_pressed_1s>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d02e      	beq.n	8000372 <fsm_for_button+0x226>
				if (mode == MODIFY) {
 8000314:	4b25      	ldr	r3, [pc, #148]	@ (80003ac <fsm_for_button+0x260>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d11a      	bne.n	8000352 <fsm_for_button+0x206>
					switch (line_1) {
 800031c:	4b24      	ldr	r3, [pc, #144]	@ (80003b0 <fsm_for_button+0x264>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b02      	cmp	r3, #2
 8000322:	d00b      	beq.n	800033c <fsm_for_button+0x1f0>
 8000324:	2b02      	cmp	r3, #2
 8000326:	dc13      	bgt.n	8000350 <fsm_for_button+0x204>
 8000328:	2b00      	cmp	r3, #0
 800032a:	d002      	beq.n	8000332 <fsm_for_button+0x1e6>
 800032c:	2b01      	cmp	r3, #1
 800032e:	d00a      	beq.n	8000346 <fsm_for_button+0x1fa>
						break;
 8000330:	e00e      	b.n	8000350 <fsm_for_button+0x204>
						red_light = buffer;
 8000332:	4b22      	ldr	r3, [pc, #136]	@ (80003bc <fsm_for_button+0x270>)
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b20      	ldr	r3, [pc, #128]	@ (80003b8 <fsm_for_button+0x26c>)
 8000338:	701a      	strb	r2, [r3, #0]
						break;
 800033a:	e00a      	b.n	8000352 <fsm_for_button+0x206>
						amber_light = buffer;
 800033c:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <fsm_for_button+0x270>)
 800033e:	781a      	ldrb	r2, [r3, #0]
 8000340:	4b20      	ldr	r3, [pc, #128]	@ (80003c4 <fsm_for_button+0x278>)
 8000342:	701a      	strb	r2, [r3, #0]
						break;
 8000344:	e005      	b.n	8000352 <fsm_for_button+0x206>
						green_light = buffer;
 8000346:	4b1d      	ldr	r3, [pc, #116]	@ (80003bc <fsm_for_button+0x270>)
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	4b1f      	ldr	r3, [pc, #124]	@ (80003c8 <fsm_for_button+0x27c>)
 800034c:	701a      	strb	r2, [r3, #0]
						break;
 800034e:	e000      	b.n	8000352 <fsm_for_button+0x206>
						break;
 8000350:	bf00      	nop
				button_state[STATE_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000352:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <fsm_for_button+0x258>)
 8000354:	2202      	movs	r2, #2
 8000356:	705a      	strb	r2, [r3, #1]
		break;
 8000358:	e00b      	b.n	8000372 <fsm_for_button+0x226>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (!is_button_pressed(STATE_BUTTON)) {
 800035a:	2001      	movs	r0, #1
 800035c:	f000 fce6 	bl	8000d2c <is_button_pressed>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d107      	bne.n	8000376 <fsm_for_button+0x22a>
			button_state[STATE_BUTTON] = BUTTON_RELEASED;
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <fsm_for_button+0x258>)
 8000368:	2200      	movs	r2, #0
 800036a:	705a      	strb	r2, [r3, #1]
		}
		break;
 800036c:	e003      	b.n	8000376 <fsm_for_button+0x22a>
		break;
 800036e:	bf00      	nop
 8000370:	e002      	b.n	8000378 <fsm_for_button+0x22c>
		break;
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <fsm_for_button+0x22c>
		break;
 8000376:	bf00      	nop
	}

	////////////////// BUTTON 3 ////////////////////////////
	switch (button_state[INC_BUTTON]) {
 8000378:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <fsm_for_button+0x258>)
 800037a:	789b      	ldrb	r3, [r3, #2]
 800037c:	2b02      	cmp	r3, #2
 800037e:	d050      	beq.n	8000422 <fsm_for_button+0x2d6>
 8000380:	2b02      	cmp	r3, #2
 8000382:	dc5d      	bgt.n	8000440 <fsm_for_button+0x2f4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	d002      	beq.n	800038e <fsm_for_button+0x242>
 8000388:	2b01      	cmp	r3, #1
 800038a:	d01f      	beq.n	80003cc <fsm_for_button+0x280>
		if (!is_button_pressed(INC_BUTTON)) {
			button_state[INC_BUTTON] = BUTTON_RELEASED;
		}
		break;
	}
}
 800038c:	e058      	b.n	8000440 <fsm_for_button+0x2f4>
		if (is_button_pressed(INC_BUTTON)) {
 800038e:	2002      	movs	r0, #2
 8000390:	f000 fccc 	bl	8000d2c <is_button_pressed>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d04d      	beq.n	8000436 <fsm_for_button+0x2ea>
			button_state[INC_BUTTON] = BUTTON_PRESSED;
 800039a:	4b02      	ldr	r3, [pc, #8]	@ (80003a4 <fsm_for_button+0x258>)
 800039c:	2201      	movs	r2, #1
 800039e:	709a      	strb	r2, [r3, #2]
		break;
 80003a0:	e049      	b.n	8000436 <fsm_for_button+0x2ea>
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	2000009c 	.word	0x2000009c
 80003b0:	2000009d 	.word	0x2000009d
 80003b4:	20000003 	.word	0x20000003
 80003b8:	20000004 	.word	0x20000004
 80003bc:	200000a0 	.word	0x200000a0
 80003c0:	55555556 	.word	0x55555556
 80003c4:	20000005 	.word	0x20000005
 80003c8:	20000006 	.word	0x20000006
		if (!is_button_pressed(INC_BUTTON)) {
 80003cc:	2002      	movs	r0, #2
 80003ce:	f000 fcad 	bl	8000d2c <is_button_pressed>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d11a      	bne.n	800040e <fsm_for_button+0x2c2>
			if (mode == MODIFY) {
 80003d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000444 <fsm_for_button+0x2f8>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d112      	bne.n	8000406 <fsm_for_button+0x2ba>
				if (line_1 == GREEN && buffer >= red_light)
 80003e0:	4b19      	ldr	r3, [pc, #100]	@ (8000448 <fsm_for_button+0x2fc>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d108      	bne.n	80003fa <fsm_for_button+0x2ae>
 80003e8:	4b18      	ldr	r3, [pc, #96]	@ (800044c <fsm_for_button+0x300>)
 80003ea:	781a      	ldrb	r2, [r3, #0]
 80003ec:	4b18      	ldr	r3, [pc, #96]	@ (8000450 <fsm_for_button+0x304>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d302      	bcc.n	80003fa <fsm_for_button+0x2ae>
					buffer = 0;
 80003f4:	4b15      	ldr	r3, [pc, #84]	@ (800044c <fsm_for_button+0x300>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
				buffer++;
 80003fa:	4b14      	ldr	r3, [pc, #80]	@ (800044c <fsm_for_button+0x300>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	3301      	adds	r3, #1
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b12      	ldr	r3, [pc, #72]	@ (800044c <fsm_for_button+0x300>)
 8000404:	701a      	strb	r2, [r3, #0]
			button_state[INC_BUTTON] = BUTTON_RELEASED;
 8000406:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <fsm_for_button+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	709a      	strb	r2, [r3, #2]
		break;
 800040c:	e015      	b.n	800043a <fsm_for_button+0x2ee>
			if (is_button_pressed_1s(INC_BUTTON)) {
 800040e:	2002      	movs	r0, #2
 8000410:	f000 fca6 	bl	8000d60 <is_button_pressed_1s>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d00f      	beq.n	800043a <fsm_for_button+0x2ee>
				button_state[INC_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <fsm_for_button+0x308>)
 800041c:	2202      	movs	r2, #2
 800041e:	709a      	strb	r2, [r3, #2]
		break;
 8000420:	e00b      	b.n	800043a <fsm_for_button+0x2ee>
		if (!is_button_pressed(INC_BUTTON)) {
 8000422:	2002      	movs	r0, #2
 8000424:	f000 fc82 	bl	8000d2c <is_button_pressed>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d107      	bne.n	800043e <fsm_for_button+0x2f2>
			button_state[INC_BUTTON] = BUTTON_RELEASED;
 800042e:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <fsm_for_button+0x308>)
 8000430:	2200      	movs	r2, #0
 8000432:	709a      	strb	r2, [r3, #2]
		break;
 8000434:	e003      	b.n	800043e <fsm_for_button+0x2f2>
		break;
 8000436:	bf00      	nop
 8000438:	e002      	b.n	8000440 <fsm_for_button+0x2f4>
		break;
 800043a:	bf00      	nop
 800043c:	e000      	b.n	8000440 <fsm_for_button+0x2f4>
		break;
 800043e:	bf00      	nop
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	2000009c 	.word	0x2000009c
 8000448:	2000009d 	.word	0x2000009d
 800044c:	200000a0 	.word	0x200000a0
 8000450:	20000004 	.word	0x20000004
 8000454:	20000000 	.word	0x20000000

08000458 <update_buffer>:
	}
}

// SCANNING 4 7SEG-LED TO DISPLAY NUMBER //

void update_buffer(uint8_t num_1, uint8_t num_2) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	460a      	mov	r2, r1
 8000462:	71fb      	strb	r3, [r7, #7]
 8000464:	4613      	mov	r3, r2
 8000466:	71bb      	strb	r3, [r7, #6]
	led_buffer[0] = num_1 / 10;
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	4a17      	ldr	r2, [pc, #92]	@ (80004c8 <update_buffer+0x70>)
 800046c:	fba2 2303 	umull	r2, r3, r2, r3
 8000470:	08db      	lsrs	r3, r3, #3
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b15      	ldr	r3, [pc, #84]	@ (80004cc <update_buffer+0x74>)
 8000476:	701a      	strb	r2, [r3, #0]
	led_buffer[1] = num_1 % 10;
 8000478:	79fa      	ldrb	r2, [r7, #7]
 800047a:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <update_buffer+0x70>)
 800047c:	fba3 1302 	umull	r1, r3, r3, r2
 8000480:	08d9      	lsrs	r1, r3, #3
 8000482:	460b      	mov	r3, r1
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	440b      	add	r3, r1
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <update_buffer+0x74>)
 8000490:	705a      	strb	r2, [r3, #1]
	led_buffer[2] = num_2 / 10;
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	4a0c      	ldr	r2, [pc, #48]	@ (80004c8 <update_buffer+0x70>)
 8000496:	fba2 2303 	umull	r2, r3, r2, r3
 800049a:	08db      	lsrs	r3, r3, #3
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <update_buffer+0x74>)
 80004a0:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = num_2 % 10;
 80004a2:	79ba      	ldrb	r2, [r7, #6]
 80004a4:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <update_buffer+0x70>)
 80004a6:	fba3 1302 	umull	r1, r3, r3, r2
 80004aa:	08d9      	lsrs	r1, r3, #3
 80004ac:	460b      	mov	r3, r1
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	440b      	add	r3, r1
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	4b04      	ldr	r3, [pc, #16]	@ (80004cc <update_buffer+0x74>)
 80004ba:	70da      	strb	r2, [r3, #3]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	cccccccd 	.word	0xcccccccd
 80004cc:	20000098 	.word	0x20000098

080004d0 <update_led_traffic>:
	EN0_GPIO_Port->ODR |= (EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin);
	display7SEG(led_buffer[scanning_idx]);
	EN0_GPIO_Port->ODR &= ~(EN_Pin[scanning_idx]);
	scanning_idx = (scanning_idx + 1) % NO_OF_7SEG;
}
void update_led_traffic() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	switch (line_1) {
 80004d4:	4b54      	ldr	r3, [pc, #336]	@ (8000628 <update_led_traffic+0x158>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d032      	beq.n	8000542 <update_led_traffic+0x72>
 80004dc:	2b02      	cmp	r3, #2
 80004de:	dc4b      	bgt.n	8000578 <update_led_traffic+0xa8>
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <update_led_traffic+0x1a>
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d016      	beq.n	8000516 <update_led_traffic+0x46>
 80004e8:	e046      	b.n	8000578 <update_led_traffic+0xa8>
	case RED:
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 1);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2120      	movs	r1, #32
 80004ee:	484f      	ldr	r0, [pc, #316]	@ (800062c <update_led_traffic+0x15c>)
 80004f0:	f001 fcb9 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2108      	movs	r1, #8
 80004f8:	484c      	ldr	r0, [pc, #304]	@ (800062c <update_led_traffic+0x15c>)
 80004fa:	f001 fcb4 	bl	8001e66 <HAL_GPIO_WritePin>
		if (count_1 <= 0) {
 80004fe:	4b4c      	ldr	r3, [pc, #304]	@ (8000630 <update_led_traffic+0x160>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d133      	bne.n	800056e <update_led_traffic+0x9e>
			line_1 = GREEN;
 8000506:	4b48      	ldr	r3, [pc, #288]	@ (8000628 <update_led_traffic+0x158>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
			count_1 = green_light;
 800050c:	4b49      	ldr	r3, [pc, #292]	@ (8000634 <update_led_traffic+0x164>)
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	4b47      	ldr	r3, [pc, #284]	@ (8000630 <update_led_traffic+0x160>)
 8000512:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000514:	e02b      	b.n	800056e <update_led_traffic+0x9e>
	case GREEN:
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2120      	movs	r1, #32
 800051a:	4844      	ldr	r0, [pc, #272]	@ (800062c <update_led_traffic+0x15c>)
 800051c:	f001 fca3 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	2108      	movs	r1, #8
 8000524:	4841      	ldr	r0, [pc, #260]	@ (800062c <update_led_traffic+0x15c>)
 8000526:	f001 fc9e 	bl	8001e66 <HAL_GPIO_WritePin>
		if (count_1 <= 0) {
 800052a:	4b41      	ldr	r3, [pc, #260]	@ (8000630 <update_led_traffic+0x160>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d11f      	bne.n	8000572 <update_led_traffic+0xa2>
			line_1 = AMBER;
 8000532:	4b3d      	ldr	r3, [pc, #244]	@ (8000628 <update_led_traffic+0x158>)
 8000534:	2202      	movs	r2, #2
 8000536:	701a      	strb	r2, [r3, #0]
			count_1 = amber_light;
 8000538:	4b3f      	ldr	r3, [pc, #252]	@ (8000638 <update_led_traffic+0x168>)
 800053a:	781a      	ldrb	r2, [r3, #0]
 800053c:	4b3c      	ldr	r3, [pc, #240]	@ (8000630 <update_led_traffic+0x160>)
 800053e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000540:	e017      	b.n	8000572 <update_led_traffic+0xa2>
	case AMBER:
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	2120      	movs	r1, #32
 8000546:	4839      	ldr	r0, [pc, #228]	@ (800062c <update_led_traffic+0x15c>)
 8000548:	f001 fc8d 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	4836      	ldr	r0, [pc, #216]	@ (800062c <update_led_traffic+0x15c>)
 8000552:	f001 fc88 	bl	8001e66 <HAL_GPIO_WritePin>
		if (count_1 <= 0) {
 8000556:	4b36      	ldr	r3, [pc, #216]	@ (8000630 <update_led_traffic+0x160>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d10b      	bne.n	8000576 <update_led_traffic+0xa6>
			line_1 = RED;
 800055e:	4b32      	ldr	r3, [pc, #200]	@ (8000628 <update_led_traffic+0x158>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
			count_1 = red_light;
 8000564:	4b35      	ldr	r3, [pc, #212]	@ (800063c <update_led_traffic+0x16c>)
 8000566:	781a      	ldrb	r2, [r3, #0]
 8000568:	4b31      	ldr	r3, [pc, #196]	@ (8000630 <update_led_traffic+0x160>)
 800056a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800056c:	e003      	b.n	8000576 <update_led_traffic+0xa6>
		break;
 800056e:	bf00      	nop
 8000570:	e002      	b.n	8000578 <update_led_traffic+0xa8>
		break;
 8000572:	bf00      	nop
 8000574:	e000      	b.n	8000578 <update_led_traffic+0xa8>
		break;
 8000576:	bf00      	nop
	}
	//	LED_RED_2_GPIO_Port->ODR |= ALL_LED;
	switch (line_2) {
 8000578:	4b31      	ldr	r3, [pc, #196]	@ (8000640 <update_led_traffic+0x170>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d034      	beq.n	80005ea <update_led_traffic+0x11a>
 8000580:	2b02      	cmp	r3, #2
 8000582:	dc4e      	bgt.n	8000622 <update_led_traffic+0x152>
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <update_led_traffic+0xbe>
 8000588:	2b01      	cmp	r3, #1
 800058a:	d017      	beq.n	80005bc <update_led_traffic+0xec>
			line_2 = RED;
			count_2 = red_light;
		}
		break;
	}
}
 800058c:	e049      	b.n	8000622 <update_led_traffic+0x152>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000594:	4825      	ldr	r0, [pc, #148]	@ (800062c <update_led_traffic+0x15c>)
 8000596:	f001 fc66 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 1);
 800059a:	2201      	movs	r2, #1
 800059c:	2110      	movs	r1, #16
 800059e:	4823      	ldr	r0, [pc, #140]	@ (800062c <update_led_traffic+0x15c>)
 80005a0:	f001 fc61 	bl	8001e66 <HAL_GPIO_WritePin>
		if (count_2 <= 0) {
 80005a4:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <update_led_traffic+0x174>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d135      	bne.n	8000618 <update_led_traffic+0x148>
			line_2 = GREEN;
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <update_led_traffic+0x170>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
			count_2 = green_light;
 80005b2:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <update_led_traffic+0x164>)
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <update_led_traffic+0x174>)
 80005b8:	701a      	strb	r2, [r3, #0]
		break;
 80005ba:	e02d      	b.n	8000618 <update_led_traffic+0x148>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c2:	481a      	ldr	r0, [pc, #104]	@ (800062c <update_led_traffic+0x15c>)
 80005c4:	f001 fc4f 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	4817      	ldr	r0, [pc, #92]	@ (800062c <update_led_traffic+0x15c>)
 80005ce:	f001 fc4a 	bl	8001e66 <HAL_GPIO_WritePin>
		if (count_2 <= 0) {
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <update_led_traffic+0x174>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d120      	bne.n	800061c <update_led_traffic+0x14c>
			line_2 = AMBER;
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <update_led_traffic+0x170>)
 80005dc:	2202      	movs	r2, #2
 80005de:	701a      	strb	r2, [r3, #0]
			count_2 = amber_light;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <update_led_traffic+0x168>)
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <update_led_traffic+0x174>)
 80005e6:	701a      	strb	r2, [r3, #0]
		break;
 80005e8:	e018      	b.n	800061c <update_led_traffic+0x14c>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f0:	480e      	ldr	r0, [pc, #56]	@ (800062c <update_led_traffic+0x15c>)
 80005f2:	f001 fc38 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2110      	movs	r1, #16
 80005fa:	480c      	ldr	r0, [pc, #48]	@ (800062c <update_led_traffic+0x15c>)
 80005fc:	f001 fc33 	bl	8001e66 <HAL_GPIO_WritePin>
		if (count_2 <= 0) {
 8000600:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <update_led_traffic+0x174>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10b      	bne.n	8000620 <update_led_traffic+0x150>
			line_2 = RED;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <update_led_traffic+0x170>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
			count_2 = red_light;
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <update_led_traffic+0x16c>)
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <update_led_traffic+0x174>)
 8000614:	701a      	strb	r2, [r3, #0]
		break;
 8000616:	e003      	b.n	8000620 <update_led_traffic+0x150>
		break;
 8000618:	bf00      	nop
 800061a:	e002      	b.n	8000622 <update_led_traffic+0x152>
		break;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <update_led_traffic+0x152>
		break;
 8000620:	bf00      	nop
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000009d 	.word	0x2000009d
 800062c:	40010c00 	.word	0x40010c00
 8000630:	2000009e 	.word	0x2000009e
 8000634:	20000006 	.word	0x20000006
 8000638:	20000005 	.word	0x20000005
 800063c:	20000004 	.word	0x20000004
 8000640:	20000003 	.word	0x20000003
 8000644:	2000009f 	.word	0x2000009f

08000648 <fsm_for_auto>:

// AUTOMATIC RUN DEFINE //
void fsm_for_auto(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	update_buffer(count_1, count_2);
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <fsm_for_auto+0x44>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <fsm_for_auto+0x48>)
 8000652:	7812      	ldrb	r2, [r2, #0]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fefe 	bl	8000458 <update_buffer>
	update_led_traffic();
 800065c:	f7ff ff38 	bl	80004d0 <update_led_traffic>
	if (count_1 > 0)
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <fsm_for_auto+0x44>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <fsm_for_auto+0x2c>
		count_1 = count_1 - 1;
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <fsm_for_auto+0x44>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <fsm_for_auto+0x44>)
 8000672:	701a      	strb	r2, [r3, #0]
	if (count_2 > 0)
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <fsm_for_auto+0x48>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d005      	beq.n	8000688 <fsm_for_auto+0x40>
		count_2 = count_2 - 1;
 800067c:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <fsm_for_auto+0x48>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3b01      	subs	r3, #1
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b02      	ldr	r3, [pc, #8]	@ (8000690 <fsm_for_auto+0x48>)
 8000686:	701a      	strb	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000009e 	.word	0x2000009e
 8000690:	2000009f 	.word	0x2000009f

08000694 <fsm_for_manual>:
void fsm_for_manual(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	count_1 = 1;
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <fsm_for_manual+0x18>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
	count_2 = 1;
 800069e:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <fsm_for_manual+0x1c>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
	update_led_traffic();
 80006a4:	f7ff ff14 	bl	80004d0 <update_led_traffic>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000009e 	.word	0x2000009e
 80006b0:	2000009f 	.word	0x2000009f

080006b4 <fsm_for_modify>:

void fsm_for_modify() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	switch (line_1) {
 80006b8:	4b30      	ldr	r3, [pc, #192]	@ (800077c <fsm_for_modify+0xc8>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d022      	beq.n	8000706 <fsm_for_modify+0x52>
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	dc58      	bgt.n	8000776 <fsm_for_modify+0xc2>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <fsm_for_modify+0x1a>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d038      	beq.n	800073e <fsm_for_modify+0x8a>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 0);
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 1);
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 0);
		break;
	default:
		break;
 80006cc:	e053      	b.n	8000776 <fsm_for_modify+0xc2>
		update_buffer(01, buffer);
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <fsm_for_modify+0xcc>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4619      	mov	r1, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff febf 	bl	8000458 <update_buffer>
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4829      	ldr	r0, [pc, #164]	@ (8000784 <fsm_for_modify+0xd0>)
 80006e0:	f001 fbc1 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2108      	movs	r1, #8
 80006e8:	4826      	ldr	r0, [pc, #152]	@ (8000784 <fsm_for_modify+0xd0>)
 80006ea:	f001 fbbc 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f4:	4823      	ldr	r0, [pc, #140]	@ (8000784 <fsm_for_modify+0xd0>)
 80006f6:	f001 fbb6 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2110      	movs	r1, #16
 80006fe:	4821      	ldr	r0, [pc, #132]	@ (8000784 <fsm_for_modify+0xd0>)
 8000700:	f001 fbb1 	bl	8001e66 <HAL_GPIO_WritePin>
		break;
 8000704:	e038      	b.n	8000778 <fsm_for_modify+0xc4>
		update_buffer(02, buffer);
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <fsm_for_modify+0xcc>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff fea3 	bl	8000458 <update_buffer>
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	481b      	ldr	r0, [pc, #108]	@ (8000784 <fsm_for_modify+0xd0>)
 8000718:	f001 fba5 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	2108      	movs	r1, #8
 8000720:	4818      	ldr	r0, [pc, #96]	@ (8000784 <fsm_for_modify+0xd0>)
 8000722:	f001 fba0 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072c:	4815      	ldr	r0, [pc, #84]	@ (8000784 <fsm_for_modify+0xd0>)
 800072e:	f001 fb9a 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	2110      	movs	r1, #16
 8000736:	4813      	ldr	r0, [pc, #76]	@ (8000784 <fsm_for_modify+0xd0>)
 8000738:	f001 fb95 	bl	8001e66 <HAL_GPIO_WritePin>
		break;
 800073c:	e01c      	b.n	8000778 <fsm_for_modify+0xc4>
		update_buffer(03, buffer);
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <fsm_for_modify+0xcc>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4619      	mov	r1, r3
 8000744:	2003      	movs	r0, #3
 8000746:	f7ff fe87 	bl	8000458 <update_buffer>
		HAL_GPIO_WritePin(LED_A_1_GPIO_Port, LED_A_1_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	2120      	movs	r1, #32
 800074e:	480d      	ldr	r0, [pc, #52]	@ (8000784 <fsm_for_modify+0xd0>)
 8000750:	f001 fb89 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_1_GPIO_Port, LED_B_1_Pin, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2108      	movs	r1, #8
 8000758:	480a      	ldr	r0, [pc, #40]	@ (8000784 <fsm_for_modify+0xd0>)
 800075a:	f001 fb84 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_A_2_GPIO_Port, LED_A_2_Pin, 1);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000764:	4807      	ldr	r0, [pc, #28]	@ (8000784 <fsm_for_modify+0xd0>)
 8000766:	f001 fb7e 	bl	8001e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_2_GPIO_Port, LED_B_2_Pin, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2110      	movs	r1, #16
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <fsm_for_modify+0xd0>)
 8000770:	f001 fb79 	bl	8001e66 <HAL_GPIO_WritePin>
		break;
 8000774:	e000      	b.n	8000778 <fsm_for_modify+0xc4>
		break;
 8000776:	bf00      	nop
	}
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000009d 	.word	0x2000009d
 8000780:	200000a0 	.word	0x200000a0
 8000784:	40010c00 	.word	0x40010c00

08000788 <fsm_for_traffic_light>:

void fsm_for_traffic_light(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	switch (mode) {
 800078c:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <fsm_for_traffic_light+0x9c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b03      	cmp	r3, #3
 8000792:	d841      	bhi.n	8000818 <fsm_for_traffic_light+0x90>
 8000794:	a201      	add	r2, pc, #4	@ (adr r2, 800079c <fsm_for_traffic_light+0x14>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	080007ed 	.word	0x080007ed
 80007a4:	0800080d 	.word	0x0800080d
 80007a8:	08000813 	.word	0x08000813
	case INIT:
		LED_A_1_GPIO_Port->ODR |= ALL_LED;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <fsm_for_traffic_light+0xa0>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000828 <fsm_for_traffic_light+0xa0>)
 80007b2:	f443 6387 	orr.w	r3, r3, #1080	@ 0x438
 80007b6:	60d3      	str	r3, [r2, #12]
		amber_light = red_light - green_light; // adjust timing
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <fsm_for_traffic_light+0xa4>)
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <fsm_for_traffic_light+0xa8>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <fsm_for_traffic_light+0xac>)
 80007c6:	701a      	strb	r2, [r3, #0]
		count_1 = red_light;
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <fsm_for_traffic_light+0xa4>)
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <fsm_for_traffic_light+0xb0>)
 80007ce:	701a      	strb	r2, [r3, #0]
		count_2 = green_light;
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <fsm_for_traffic_light+0xa8>)
 80007d2:	781a      	ldrb	r2, [r3, #0]
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <fsm_for_traffic_light+0xb4>)
 80007d6:	701a      	strb	r2, [r3, #0]
		line_1 = RED, line_2 = GREEN;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <fsm_for_traffic_light+0xb8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <fsm_for_traffic_light+0xbc>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
		mode = AUTO;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <fsm_for_traffic_light+0x9c>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
		break;
 80007ea:	e018      	b.n	800081e <fsm_for_traffic_light+0x96>
	case AUTO:
		buffer++;
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <fsm_for_traffic_light+0xc0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <fsm_for_traffic_light+0xc0>)
 80007f6:	701a      	strb	r2, [r3, #0]
		if (buffer % 2 == 1)
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <fsm_for_traffic_light+0xc0>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00a      	beq.n	800081c <fsm_for_traffic_light+0x94>
			fsm_for_auto();
 8000806:	f7ff ff1f 	bl	8000648 <fsm_for_auto>
		break;
 800080a:	e007      	b.n	800081c <fsm_for_traffic_light+0x94>
	case MANUAL:
		fsm_for_manual();
 800080c:	f7ff ff42 	bl	8000694 <fsm_for_manual>
		break;
 8000810:	e005      	b.n	800081e <fsm_for_traffic_light+0x96>
	case MODIFY:
		fsm_for_modify();
 8000812:	f7ff ff4f 	bl	80006b4 <fsm_for_modify>
		break;
 8000816:	e002      	b.n	800081e <fsm_for_traffic_light+0x96>
	default:
		break;
 8000818:	bf00      	nop
 800081a:	e000      	b.n	800081e <fsm_for_traffic_light+0x96>
		break;
 800081c:	bf00      	nop
	}
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000009c 	.word	0x2000009c
 8000828:	40010c00 	.word	0x40010c00
 800082c:	20000004 	.word	0x20000004
 8000830:	20000006 	.word	0x20000006
 8000834:	20000005 	.word	0x20000005
 8000838:	2000009e 	.word	0x2000009e
 800083c:	2000009f 	.word	0x2000009f
 8000840:	2000009d 	.word	0x2000009d
 8000844:	20000003 	.word	0x20000003
 8000848:	200000a0 	.word	0x200000a0

0800084c <lcd_send_cmd>:
}
void Init_I2C(I2C_HandleTypeDef *hal_i2c) {
	hi2c = hal_i2c;
	lcd_init();
}
static uint8_t lcd_send_cmd(uint8_t cmd) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af02      	add	r7, sp, #8
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = { LCD_CMD_MSB_EN(cmd), LCD_CMD_MSB_DIS(cmd),
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	f023 030f 	bic.w	r3, r3, #15
 800085e:	b25b      	sxtb	r3, r3
 8000860:	f043 030c 	orr.w	r3, r3, #12
 8000864:	b25b      	sxtb	r3, r3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	733b      	strb	r3, [r7, #12]
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	f023 030f 	bic.w	r3, r3, #15
 8000872:	b25b      	sxtb	r3, r3
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	b25b      	sxtb	r3, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	737b      	strb	r3, [r7, #13]
			LCD_CMD_LSB_EN(cmd), LCD_CMD_LSB_DIS(cmd) };
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	b25b      	sxtb	r3, r3
 8000884:	f043 030c 	orr.w	r3, r3, #12
 8000888:	b25b      	sxtb	r3, r3
 800088a:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = { LCD_CMD_MSB_EN(cmd), LCD_CMD_MSB_DIS(cmd),
 800088c:	73bb      	strb	r3, [r7, #14]
			LCD_CMD_LSB_EN(cmd), LCD_CMD_LSB_DIS(cmd) };
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	b25b      	sxtb	r3, r3
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	b25b      	sxtb	r3, r3
 800089a:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = { LCD_CMD_MSB_EN(cmd), LCD_CMD_MSB_DIS(cmd),
 800089c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, (uint8_t*) buffer, 4,
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <lcd_send_cmd+0x7c>)
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	f107 020c 	add.w	r2, r7, #12
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2304      	movs	r3, #4
 80008ae:	2142      	movs	r1, #66	@ 0x42
 80008b0:	f001 fc70 	bl	8002194 <HAL_I2C_Master_Transmit>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <lcd_send_cmd+0x72>
	HAL_MAX_DELAY) != HAL_OK) {
		return 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <lcd_send_cmd+0x74>
	}
	return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000a4 	.word	0x200000a4

080008cc <lcd_send_data>:

static uint8_t lcd_send_data(uint8_t data) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = { LCD_DATA_MSB_EN(data), LCD_DATA_MSB_DIS(data),
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	f023 030f 	bic.w	r3, r3, #15
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	f043 030d 	orr.w	r3, r3, #13
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	733b      	strb	r3, [r7, #12]
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	f023 030f 	bic.w	r3, r3, #15
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	f043 0309 	orr.w	r3, r3, #9
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	737b      	strb	r3, [r7, #13]
			LCD_DATA_LSB_EN(data), LCD_DATA_LSB_DIS(data) };
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	b25b      	sxtb	r3, r3
 8000904:	f043 030d 	orr.w	r3, r3, #13
 8000908:	b25b      	sxtb	r3, r3
 800090a:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = { LCD_DATA_MSB_EN(data), LCD_DATA_MSB_DIS(data),
 800090c:	73bb      	strb	r3, [r7, #14]
			LCD_DATA_LSB_EN(data), LCD_DATA_LSB_DIS(data) };
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	b25b      	sxtb	r3, r3
 8000914:	f043 0309 	orr.w	r3, r3, #9
 8000918:	b25b      	sxtb	r3, r3
 800091a:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = { LCD_DATA_MSB_EN(data), LCD_DATA_MSB_DIS(data),
 800091c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, (uint8_t*) buffer, 4,
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <lcd_send_data+0x7c>)
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	f107 020c 	add.w	r2, r7, #12
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2304      	movs	r3, #4
 800092e:	2142      	movs	r1, #66	@ 0x42
 8000930:	f001 fc30 	bl	8002194 <HAL_I2C_Master_Transmit>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <lcd_send_data+0x72>
	HAL_MAX_DELAY) != HAL_OK) {
		return 0;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <lcd_send_data+0x74>
	}
	return 1;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000a4 	.word	0x200000a4

0800094c <generate_str_from_mode>:


static void generate_str_from_mode(uint8_t status, char *str) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
	switch (status) {
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d014      	beq.n	8000988 <generate_str_from_mode+0x3c>
 800095e:	2b02      	cmp	r3, #2
 8000960:	dc19      	bgt.n	8000996 <generate_str_from_mode+0x4a>
 8000962:	2b00      	cmp	r3, #0
 8000964:	d002      	beq.n	800096c <generate_str_from_mode+0x20>
 8000966:	2b01      	cmp	r3, #1
 8000968:	d007      	beq.n	800097a <generate_str_from_mode+0x2e>
 800096a:	e014      	b.n	8000996 <generate_str_from_mode+0x4a>
	case RED:
		strcpy(str, "R");
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	4910      	ldr	r1, [pc, #64]	@ (80009b0 <generate_str_from_mode+0x64>)
 8000970:	461a      	mov	r2, r3
 8000972:	460b      	mov	r3, r1
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	8013      	strh	r3, [r2, #0]
		break;
 8000978:	e015      	b.n	80009a6 <generate_str_from_mode+0x5a>
	case GREEN:
		strcpy(str, "G");
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	490d      	ldr	r1, [pc, #52]	@ (80009b4 <generate_str_from_mode+0x68>)
 800097e:	461a      	mov	r2, r3
 8000980:	460b      	mov	r3, r1
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	8013      	strh	r3, [r2, #0]
		break;
 8000986:	e00e      	b.n	80009a6 <generate_str_from_mode+0x5a>
	case AMBER:
		strcpy(str, "A");
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	490b      	ldr	r1, [pc, #44]	@ (80009b8 <generate_str_from_mode+0x6c>)
 800098c:	461a      	mov	r2, r3
 800098e:	460b      	mov	r3, r1
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	8013      	strh	r3, [r2, #0]
		break;
 8000994:	e007      	b.n	80009a6 <generate_str_from_mode+0x5a>
	default:
		strcpy(str, "UNKNOWN");
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	4908      	ldr	r1, [pc, #32]	@ (80009bc <generate_str_from_mode+0x70>)
 800099a:	461a      	mov	r2, r3
 800099c:	460b      	mov	r3, r1
 800099e:	cb03      	ldmia	r3!, {r0, r1}
 80009a0:	6010      	str	r0, [r2, #0]
 80009a2:	6051      	str	r1, [r2, #4]
		break;
 80009a4:	bf00      	nop
	}
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	0800439c 	.word	0x0800439c
 80009b4:	080043a0 	.word	0x080043a0
 80009b8:	080043a4 	.word	0x080043a4
 80009bc:	080043a8 	.word	0x080043a8

080009c0 <lcd_init>:
void lcd_init() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	// Init LCD
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80009c4:	2032      	movs	r0, #50	@ 0x32
 80009c6:	f000 ff81 	bl	80018cc <HAL_Delay>
	lcd_send_cmd(0x30);
 80009ca:	2030      	movs	r0, #48	@ 0x30
 80009cc:	f7ff ff3e 	bl	800084c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80009d0:	2005      	movs	r0, #5
 80009d2:	f000 ff7b 	bl	80018cc <HAL_Delay>
	lcd_send_cmd(0x30);
 80009d6:	2030      	movs	r0, #48	@ 0x30
 80009d8:	f7ff ff38 	bl	800084c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80009dc:	2001      	movs	r0, #1
 80009de:	f000 ff75 	bl	80018cc <HAL_Delay>
	lcd_send_cmd(0x30);
 80009e2:	2030      	movs	r0, #48	@ 0x30
 80009e4:	f7ff ff32 	bl	800084c <lcd_send_cmd>
	HAL_Delay(10);
 80009e8:	200a      	movs	r0, #10
 80009ea:	f000 ff6f 	bl	80018cc <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 80009ee:	2020      	movs	r0, #32
 80009f0:	f7ff ff2c 	bl	800084c <lcd_send_cmd>
	HAL_Delay(10);
 80009f4:	200a      	movs	r0, #10
 80009f6:	f000 ff69 	bl	80018cc <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80009fa:	2028      	movs	r0, #40	@ 0x28
 80009fc:	f7ff ff26 	bl	800084c <lcd_send_cmd>
	HAL_Delay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f000 ff63 	bl	80018cc <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a06:	2008      	movs	r0, #8
 8000a08:	f7ff ff20 	bl	800084c <lcd_send_cmd>
	HAL_Delay(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f000 ff5d 	bl	80018cc <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff ff1a 	bl	800084c <lcd_send_cmd>
	HAL_Delay(1);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f000 ff57 	bl	80018cc <HAL_Delay>
	HAL_Delay(1);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f000 ff54 	bl	80018cc <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a24:	2006      	movs	r0, #6
 8000a26:	f7ff ff11 	bl	800084c <lcd_send_cmd>
	HAL_Delay(1);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f000 ff4e 	bl	80018cc <HAL_Delay>
	lcd_send_cmd(0x0C);
 8000a30:	200c      	movs	r0, #12
 8000a32:	f7ff ff0b 	bl	800084c <lcd_send_cmd>

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <lcd_send_string>:

void lcd_send_string(char *str) {
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000a42:	e006      	b.n	8000a52 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff3d 	bl	80008cc <lcd_send_data>
	while (*str) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1f4      	bne.n	8000a44 <lcd_send_string+0xa>
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <lcd_clear>:

void lcd_clear(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	lcd_send_cmd(LCD_CLEAR_DISPLAY);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff feef 	bl	800084c <lcd_send_cmd>
	HAL_Delay(2);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	f000 ff2c 	bl	80018cc <HAL_Delay>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	71bb      	strb	r3, [r7, #6]
	uint8_t addr = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
	if (col >= 20)
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2b13      	cmp	r3, #19
 8000a90:	d901      	bls.n	8000a96 <lcd_set_cursor+0x1e>
		col = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	71bb      	strb	r3, [r7, #6]
	if (row == 0) {
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d103      	bne.n	8000aa4 <lcd_set_cursor+0x2c>
		addr = 0x80 + col;
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	3b80      	subs	r3, #128	@ 0x80
 8000aa0:	73fb      	strb	r3, [r7, #15]
 8000aa2:	e005      	b.n	8000ab0 <lcd_set_cursor+0x38>
	} else if (row == 1) {
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <lcd_set_cursor+0x38>
		addr = 0xC0 + col;
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	3b40      	subs	r3, #64	@ 0x40
 8000aae:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(addr);
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff feca 	bl	800084c <lcd_send_cmd>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <lcd_display_mode>:
	char buffer[16];
	sprintf(buffer, "%d", num);
	lcd_send_string(buffer);
}

void lcd_display_mode(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
	lcd_clear();
 8000ac6:	f7ff ffcd 	bl	8000a64 <lcd_clear>
	int curent_value = buffer;
 8000aca:	4b56      	ldr	r3, [pc, #344]	@ (8000c24 <lcd_display_mode+0x164>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	61fb      	str	r3, [r7, #28]
	char buffer[6];
	char temp[16];
	switch (mode) {
 8000ad0:	4b55      	ldr	r3, [pc, #340]	@ (8000c28 <lcd_display_mode+0x168>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d079      	beq.n	8000bcc <lcd_display_mode+0x10c>
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	f300 8096 	bgt.w	8000c0a <lcd_display_mode+0x14a>
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d002      	beq.n	8000ae8 <lcd_display_mode+0x28>
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d03a      	beq.n	8000b5c <lcd_display_mode+0x9c>
 8000ae6:	e090      	b.n	8000c0a <lcd_display_mode+0x14a>
	case AUTO:

		lcd_set_cursor(0, 0);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff ffc4 	bl	8000a78 <lcd_set_cursor>
		lcd_send_string("MODE : AUTO");
 8000af0:	484e      	ldr	r0, [pc, #312]	@ (8000c2c <lcd_display_mode+0x16c>)
 8000af2:	f7ff ffa2 	bl	8000a3a <lcd_send_string>

		generate_str_from_mode(line_1, buffer);
 8000af6:	4b4e      	ldr	r3, [pc, #312]	@ (8000c30 <lcd_display_mode+0x170>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	f107 0214 	add.w	r2, r7, #20
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff23 	bl	800094c <generate_str_from_mode>

		lcd_set_cursor(1, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff ffb5 	bl	8000a78 <lcd_set_cursor>
		sprintf(temp, "%s %d\0", buffer, count_1);
 8000b0e:	4b49      	ldr	r3, [pc, #292]	@ (8000c34 <lcd_display_mode+0x174>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	f107 0214 	add.w	r2, r7, #20
 8000b16:	1d38      	adds	r0, r7, #4
 8000b18:	4947      	ldr	r1, [pc, #284]	@ (8000c38 <lcd_display_mode+0x178>)
 8000b1a:	f003 f831 	bl	8003b80 <siprintf>
		lcd_send_string(temp);
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff8a 	bl	8000a3a <lcd_send_string>

		strcpy(temp, "");
 8000b26:	2300      	movs	r3, #0
 8000b28:	713b      	strb	r3, [r7, #4]
		generate_str_from_mode(line_2, buffer);
 8000b2a:	4b44      	ldr	r3, [pc, #272]	@ (8000c3c <lcd_display_mode+0x17c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	f107 0214 	add.w	r2, r7, #20
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff09 	bl	800094c <generate_str_from_mode>
		lcd_set_cursor(1, 8);
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f7ff ff9b 	bl	8000a78 <lcd_set_cursor>
		sprintf(temp, "%s %d\0", buffer, count_2);
 8000b42:	4b3f      	ldr	r3, [pc, #252]	@ (8000c40 <lcd_display_mode+0x180>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	f107 0214 	add.w	r2, r7, #20
 8000b4a:	1d38      	adds	r0, r7, #4
 8000b4c:	493a      	ldr	r1, [pc, #232]	@ (8000c38 <lcd_display_mode+0x178>)
 8000b4e:	f003 f817 	bl	8003b80 <siprintf>
		lcd_send_string(temp);
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff70 	bl	8000a3a <lcd_send_string>
		break;
 8000b5a:	e05e      	b.n	8000c1a <lcd_display_mode+0x15a>

	case MANUAL:

		generate_str_from_mode(line_1, buffer);
 8000b5c:	4b34      	ldr	r3, [pc, #208]	@ (8000c30 <lcd_display_mode+0x170>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f107 0214 	add.w	r2, r7, #20
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fef0 	bl	800094c <generate_str_from_mode>

		lcd_set_cursor(0, 0);
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff ff82 	bl	8000a78 <lcd_set_cursor>
		lcd_send_string("MODE : MANUAL");
 8000b74:	4833      	ldr	r0, [pc, #204]	@ (8000c44 <lcd_display_mode+0x184>)
 8000b76:	f7ff ff60 	bl	8000a3a <lcd_send_string>

		lcd_set_cursor(1, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff ff7b 	bl	8000a78 <lcd_set_cursor>
		sprintf(temp, "1: %s\0", buffer);
 8000b82:	f107 0214 	add.w	r2, r7, #20
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	492f      	ldr	r1, [pc, #188]	@ (8000c48 <lcd_display_mode+0x188>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fff8 	bl	8003b80 <siprintf>
		lcd_send_string(temp);
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff51 	bl	8000a3a <lcd_send_string>

		generate_str_from_mode(line_2, buffer);
 8000b98:	4b28      	ldr	r3, [pc, #160]	@ (8000c3c <lcd_display_mode+0x17c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f107 0214 	add.w	r2, r7, #20
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fed2 	bl	800094c <generate_str_from_mode>

		strcpy(temp, "");
 8000ba8:	2300      	movs	r3, #0
 8000baa:	713b      	strb	r3, [r7, #4]
		lcd_set_cursor(1, 10);
 8000bac:	210a      	movs	r1, #10
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff ff62 	bl	8000a78 <lcd_set_cursor>
		sprintf(temp, "2: %s\0", buffer);
 8000bb4:	f107 0214 	add.w	r2, r7, #20
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4924      	ldr	r1, [pc, #144]	@ (8000c4c <lcd_display_mode+0x18c>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 ffdf 	bl	8003b80 <siprintf>
		lcd_send_string(temp);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff38 	bl	8000a3a <lcd_send_string>

		break;
 8000bca:	e026      	b.n	8000c1a <lcd_display_mode+0x15a>

	case MODIFY:

		generate_str_from_mode(line_1, buffer);
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <lcd_display_mode+0x170>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f107 0214 	add.w	r2, r7, #20
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff feb8 	bl	800094c <generate_str_from_mode>

		lcd_set_cursor(0, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff ff4a 	bl	8000a78 <lcd_set_cursor>
		lcd_send_string("MODE : TUNING");
 8000be4:	481a      	ldr	r0, [pc, #104]	@ (8000c50 <lcd_display_mode+0x190>)
 8000be6:	f7ff ff28 	bl	8000a3a <lcd_send_string>

		lcd_set_cursor(1, 0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2001      	movs	r0, #1
 8000bee:	f7ff ff43 	bl	8000a78 <lcd_set_cursor>
		sprintf(temp, "%s TIME: %d\0", buffer, curent_value);
 8000bf2:	f107 0214 	add.w	r2, r7, #20
 8000bf6:	1d38      	adds	r0, r7, #4
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	4916      	ldr	r1, [pc, #88]	@ (8000c54 <lcd_display_mode+0x194>)
 8000bfc:	f002 ffc0 	bl	8003b80 <siprintf>
		lcd_send_string(temp);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff19 	bl	8000a3a <lcd_send_string>
		break;
 8000c08:	e007      	b.n	8000c1a <lcd_display_mode+0x15a>

	default:
		lcd_set_cursor(0, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff ff33 	bl	8000a78 <lcd_set_cursor>
		lcd_send_string("MODE : UNKNOWN");
 8000c12:	4811      	ldr	r0, [pc, #68]	@ (8000c58 <lcd_display_mode+0x198>)
 8000c14:	f7ff ff11 	bl	8000a3a <lcd_send_string>
		break;
 8000c18:	bf00      	nop
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000a0 	.word	0x200000a0
 8000c28:	2000009c 	.word	0x2000009c
 8000c2c:	080043b4 	.word	0x080043b4
 8000c30:	2000009d 	.word	0x2000009d
 8000c34:	2000009e 	.word	0x2000009e
 8000c38:	080043c0 	.word	0x080043c0
 8000c3c:	20000003 	.word	0x20000003
 8000c40:	2000009f 	.word	0x2000009f
 8000c44:	080043c8 	.word	0x080043c8
 8000c48:	080043d8 	.word	0x080043d8
 8000c4c:	080043e0 	.word	0x080043e0
 8000c50:	080043e8 	.word	0x080043e8
 8000c54:	080043f8 	.word	0x080043f8
 8000c58:	08004408 	.word	0x08004408

08000c5c <button_reading>:
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS] = { 0 };
GPIO_TypeDef *BTN_Port[NO_OF_BUTTONS] = { BTN1_GPIO_Port, BTN2_GPIO_Port,
		BTN3_GPIO_Port };
uint16_t BTN_Pin[NO_OF_BUTTONS] = { BTN1_Pin, BTN2_Pin, BTN3_Pin };

void button_reading(void) {
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	e04a      	b.n	8000cfe <button_reading+0xa2>
//		buttonBuffer[i] = GPIO_PIN_SET;
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000c68:	79fa      	ldrb	r2, [r7, #7]
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	4928      	ldr	r1, [pc, #160]	@ (8000d10 <button_reading+0xb4>)
 8000c6e:	5c89      	ldrb	r1, [r1, r2]
 8000c70:	4a28      	ldr	r2, [pc, #160]	@ (8000d14 <button_reading+0xb8>)
 8000c72:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_Port[i], BTN_Pin[i]);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4a28      	ldr	r2, [pc, #160]	@ (8000d18 <button_reading+0xbc>)
 8000c78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4927      	ldr	r1, [pc, #156]	@ (8000d1c <button_reading+0xc0>)
 8000c80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c84:	79fc      	ldrb	r4, [r7, #7]
 8000c86:	4619      	mov	r1, r3
 8000c88:	4610      	mov	r0, r2
 8000c8a:	f001 f8d5 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <button_reading+0xb4>)
 8000c94:	551a      	strb	r2, [r3, r4]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	4a1d      	ldr	r2, [pc, #116]	@ (8000d10 <button_reading+0xb4>)
 8000c9a:	5cd2      	ldrb	r2, [r2, r3]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	491d      	ldr	r1, [pc, #116]	@ (8000d14 <button_reading+0xb8>)
 8000ca0:	5ccb      	ldrb	r3, [r1, r3]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d105      	bne.n	8000cb2 <button_reading+0x56>
			buttonBuffer[i] = debounceButtonBuffer2[i];
 8000ca6:	79fa      	ldrb	r2, [r7, #7]
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	491a      	ldr	r1, [pc, #104]	@ (8000d14 <button_reading+0xb8>)
 8000cac:	5c89      	ldrb	r1, [r1, r2]
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <button_reading+0xc4>)
 8000cb0:	54d1      	strb	r1, [r2, r3]
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d20 <button_reading+0xc4>)
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d114      	bne.n	8000ce6 <button_reading+0x8a>
			// if a button is pressed , we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a19      	ldr	r2, [pc, #100]	@ (8000d24 <button_reading+0xc8>)
 8000cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc4:	2b63      	cmp	r3, #99	@ 0x63
 8000cc6:	d809      	bhi.n	8000cdc <button_reading+0x80>
				counterForButtonPress1s[i]++;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4a16      	ldr	r2, [pc, #88]	@ (8000d24 <button_reading+0xc8>)
 8000ccc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cd0:	3201      	adds	r2, #1
 8000cd2:	b291      	uxth	r1, r2
 8000cd4:	4a13      	ldr	r2, [pc, #76]	@ (8000d24 <button_reading+0xc8>)
 8000cd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000cda:	e00d      	b.n	8000cf8 <button_reading+0x9c>
			} else {
				flagForButtonPress1s[i] = 1;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <button_reading+0xcc>)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	54d1      	strb	r1, [r2, r3]
 8000ce4:	e008      	b.n	8000cf8 <button_reading+0x9c>
				// todo
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8000d24 <button_reading+0xc8>)
 8000cea:	2100      	movs	r1, #0
 8000cec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <button_reading+0xcc>)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d9b1      	bls.n	8000c68 <button_reading+0xc>
		}
	}
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd90      	pop	{r4, r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000a8 	.word	0x200000a8
 8000d14:	200000ac 	.word	0x200000ac
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	20000018 	.word	0x20000018
 8000d20:	20000008 	.word	0x20000008
 8000d24:	200000b4 	.word	0x200000b4
 8000d28:	200000b0 	.word	0x200000b0

08000d2c <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d901      	bls.n	8000d40 <is_button_pressed+0x14>
		return 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e007      	b.n	8000d50 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4a06      	ldr	r2, [pc, #24]	@ (8000d5c <is_button_pressed+0x30>)
 8000d44:	5cd3      	ldrb	r3, [r2, r3]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bf0c      	ite	eq
 8000d4a:	2301      	moveq	r3, #1
 8000d4c:	2300      	movne	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <is_button_pressed_1s+0x14>
		return 0xff;
 8000d70:	23ff      	movs	r3, #255	@ 0xff
 8000d72:	e007      	b.n	8000d84 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <is_button_pressed_1s+0x30>)
 8000d78:	5cd3      	ldrb	r3, [r2, r3]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	bf0c      	ite	eq
 8000d7e:	2301      	moveq	r3, #1
 8000d80:	2300      	movne	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200000b0 	.word	0x200000b0

08000d94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000da4:	d103      	bne.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x1a>
		Scheduler_Update();
 8000da6:	f000 fa63 	bl	8001270 <Scheduler_Update>
		button_reading();
 8000daa:	f7ff ff57 	bl	8000c5c <button_reading>
	}
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <BlinkyLED>:
void BlinkyLED(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <BlinkyLED+0x10>)
 8000dc0:	f001 f869 	bl	8001e96 <HAL_GPIO_TogglePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010800 	.word	0x40010800

08000dcc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dd0:	f000 fd1a 	bl	8001808 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dd4:	f000 f85e 	bl	8000e94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dd8:	f000 f942 	bl	8001060 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ddc:	f000 f916 	bl	800100c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000de0:	f000 f89a 	bl	8000f18 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000de4:	f000 f8c6 	bl	8000f74 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000de8:	4823      	ldr	r0, [pc, #140]	@ (8000e78 <main+0xac>)
 8000dea:	f002 f98b 	bl	8003104 <HAL_TIM_Base_Start_IT>
	Scheduler_Init();
 8000dee:	f000 fa11 	bl	8001214 <Scheduler_Init>
	lcd_init();
 8000df2:	f7ff fde5 	bl	80009c0 <lcd_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
//	Scheduler_Add_Task(scanning_led, 1000, 1000 * SCANNING_FREQ / NO_OF_7SEG);
	Scheduler_Add_Task(fsm_for_button, 50, 50);
 8000df6:	2232      	movs	r2, #50	@ 0x32
 8000df8:	2132      	movs	r1, #50	@ 0x32
 8000dfa:	4820      	ldr	r0, [pc, #128]	@ (8000e7c <main+0xb0>)
 8000dfc:	f000 faf0 	bl	80013e0 <Scheduler_Add_Task>
	Scheduler_Add_Task(fsm_for_traffic_light, 500, 1000 / 2);
 8000e00:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e04:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e08:	481d      	ldr	r0, [pc, #116]	@ (8000e80 <main+0xb4>)
 8000e0a:	f000 fae9 	bl	80013e0 <Scheduler_Add_Task>
	Scheduler_Add_Task(lcd_display_mode, 1000, 1000);
 8000e0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e12:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e16:	481b      	ldr	r0, [pc, #108]	@ (8000e84 <main+0xb8>)
 8000e18:	f000 fae2 	bl	80013e0 <Scheduler_Add_Task>
	Scheduler_Add_Task(BlinkyLED, 20, 500);
 8000e1c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e20:	2114      	movs	r1, #20
 8000e22:	4819      	ldr	r0, [pc, #100]	@ (8000e88 <main+0xbc>)
 8000e24:	f000 fadc 	bl	80013e0 <Scheduler_Add_Task>
	while (1) {
		if (is_button_pressed(0))
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff ff7f 	bl	8000d2c <is_button_pressed>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <main+0x74>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2120      	movs	r1, #32
 8000e38:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <main+0xc0>)
 8000e3a:	f001 f814 	bl	8001e66 <HAL_GPIO_WritePin>
 8000e3e:	e004      	b.n	8000e4a <main+0x7e>
		else
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2120      	movs	r1, #32
 8000e44:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <main+0xc0>)
 8000e46:	f001 f80e 	bl	8001e66 <HAL_GPIO_WritePin>
		if (is_button_pressed(1))
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff ff6e 	bl	8000d2c <is_button_pressed>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <main+0x98>
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <main+0xc4>)
 8000e5e:	f001 f802 	bl	8001e66 <HAL_GPIO_WritePin>
 8000e62:	e005      	b.n	8000e70 <main+0xa4>
		else
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6a:	4809      	ldr	r0, [pc, #36]	@ (8000e90 <main+0xc4>)
 8000e6c:	f000 fffb 	bl	8001e66 <HAL_GPIO_WritePin>

		Scheduler_Dispatch_Tasks();
 8000e70:	f000 fad4 	bl	800141c <Scheduler_Dispatch_Tasks>
		if (is_button_pressed(0))
 8000e74:	e7d8      	b.n	8000e28 <main+0x5c>
 8000e76:	bf00      	nop
 8000e78:	20000110 	.word	0x20000110
 8000e7c:	0800014d 	.word	0x0800014d
 8000e80:	08000789 	.word	0x08000789
 8000e84:	08000ac1 	.word	0x08000ac1
 8000e88:	08000db9 	.word	0x08000db9
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	40011000 	.word	0x40011000

08000e94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b090      	sub	sp, #64	@ 0x40
 8000e98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	2228      	movs	r2, #40	@ 0x28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fe8c 	bl	8003bc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eca:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fcb5 	bl	8002844 <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x50>
		Error_Handler();
 8000ee0:	f000 f97e 	bl	80011e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000eec:	23a0      	movs	r3, #160	@ 0xa0
 8000eee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ef4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2102      	movs	r1, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 ff22 	bl	8002d48 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x7a>
		Error_Handler();
 8000f0a:	f000 f969 	bl	80011e0 <Error_Handler>
	}
}
 8000f0e:	bf00      	nop
 8000f10:	3740      	adds	r7, #64	@ 0x40
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	@ (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f000 ffd9 	bl	8001f0c <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000f60:	f000 f93e 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000bc 	.word	0x200000bc
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <MX_TIM2_Init+0x94>)
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f96:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <MX_TIM2_Init+0x94>)
 8000f9a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f9e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_TIM2_Init+0x94>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_TIM2_Init+0x94>)
 8000fa8:	2209      	movs	r2, #9
 8000faa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <MX_TIM2_Init+0x94>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_TIM2_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000fb8:	4813      	ldr	r0, [pc, #76]	@ (8001008 <MX_TIM2_Init+0x94>)
 8000fba:	f002 f853 	bl	8003064 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000fc4:	f000 f90c 	bl	80011e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <MX_TIM2_Init+0x94>)
 8000fd6:	f002 f9d7 	bl	8003388 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000fe0:	f000 f8fe 	bl	80011e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_TIM2_Init+0x94>)
 8000ff2:	f002 fbb9 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000ffc:	f000 f8f0 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000110 	.word	0x20000110

0800100c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_USART2_UART_Init+0x4c>)
 8001012:	4a12      	ldr	r2, [pc, #72]	@ (800105c <MX_USART2_UART_Init+0x50>)
 8001014:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <MX_USART2_UART_Init+0x4c>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_USART2_UART_Init+0x4c>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_USART2_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001042:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_USART2_UART_Init+0x4c>)
 8001044:	f002 fc00 	bl	8003848 <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800104e:	f000 f8c7 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000158 	.word	0x20000158
 800105c:	40004400 	.word	0x40004400

08001060 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	4b55      	ldr	r3, [pc, #340]	@ (80011cc <MX_GPIO_Init+0x16c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a54      	ldr	r2, [pc, #336]	@ (80011cc <MX_GPIO_Init+0x16c>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <MX_GPIO_Init+0x16c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800108c:	4b4f      	ldr	r3, [pc, #316]	@ (80011cc <MX_GPIO_Init+0x16c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a4e      	ldr	r2, [pc, #312]	@ (80011cc <MX_GPIO_Init+0x16c>)
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b4c      	ldr	r3, [pc, #304]	@ (80011cc <MX_GPIO_Init+0x16c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0320 	and.w	r3, r3, #32
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b49      	ldr	r3, [pc, #292]	@ (80011cc <MX_GPIO_Init+0x16c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a48      	ldr	r2, [pc, #288]	@ (80011cc <MX_GPIO_Init+0x16c>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b46      	ldr	r3, [pc, #280]	@ (80011cc <MX_GPIO_Init+0x16c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b43      	ldr	r3, [pc, #268]	@ (80011cc <MX_GPIO_Init+0x16c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a42      	ldr	r2, [pc, #264]	@ (80011cc <MX_GPIO_Init+0x16c>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b40      	ldr	r3, [pc, #256]	@ (80011cc <MX_GPIO_Init+0x16c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80010d4:	2200      	movs	r2, #0
 80010d6:	f240 217f 	movw	r1, #639	@ 0x27f
 80010da:	483d      	ldr	r0, [pc, #244]	@ (80011d0 <MX_GPIO_Init+0x170>)
 80010dc:	f000 fec3 	bl	8001e66 <HAL_GPIO_WritePin>
			SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin
					| SEG_5_Pin | SEG_6_Pin | LED_BLUE_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	483b      	ldr	r0, [pc, #236]	@ (80011d4 <MX_GPIO_Init+0x174>)
 80010e6:	f000 febe 	bl	8001e66 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80010ea:	2200      	movs	r2, #0
 80010ec:	f24f 4138 	movw	r1, #62520	@ 0xf438
 80010f0:	4839      	ldr	r0, [pc, #228]	@ (80011d8 <MX_GPIO_Init+0x178>)
 80010f2:	f000 feb8 	bl	8001e66 <HAL_GPIO_WritePin>
			LED_A_2_Pin | EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | LED_B_1_Pin
					| LED_B_2_Pin | LED_A_1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80010f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fc:	4b37      	ldr	r3, [pc, #220]	@ (80011dc <MX_GPIO_Init+0x17c>)
 80010fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	4831      	ldr	r0, [pc, #196]	@ (80011d0 <MX_GPIO_Init+0x170>)
 800110c:	f000 fd10 	bl	8001b30 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
	 SEG_4_Pin SEG_5_Pin SEG_6_Pin LED_BLUE_Pin */
	GPIO_InitStruct.Pin = SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin
 8001110:	f240 237f 	movw	r3, #639	@ 0x27f
 8001114:	613b      	str	r3, [r7, #16]
			| SEG_4_Pin | SEG_5_Pin | SEG_6_Pin | LED_BLUE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2302      	movs	r3, #2
 8001120:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	4829      	ldr	r0, [pc, #164]	@ (80011d0 <MX_GPIO_Init+0x170>)
 800112a:	f000 fd01 	bl	8001b30 <HAL_GPIO_Init>

	/*Configure GPIO pin : RED_LED_Pin */
	GPIO_InitStruct.Pin = RED_LED_Pin;
 800112e:	2320      	movs	r3, #32
 8001130:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2302      	movs	r3, #2
 800113c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4619      	mov	r1, r3
 8001144:	4823      	ldr	r0, [pc, #140]	@ (80011d4 <MX_GPIO_Init+0x174>)
 8001146:	f000 fcf3 	bl	8001b30 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_A_2_Pin EN0_Pin EN1_Pin EN2_Pin
	 EN3_Pin LED_B_1_Pin LED_B_2_Pin LED_A_1_Pin */
	GPIO_InitStruct.Pin = LED_A_2_Pin | EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin
 800114a:	f24f 4338 	movw	r3, #62520	@ 0xf438
 800114e:	613b      	str	r3, [r7, #16]
			| LED_B_1_Pin | LED_B_2_Pin | LED_A_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2302      	movs	r3, #2
 800115a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	481d      	ldr	r0, [pc, #116]	@ (80011d8 <MX_GPIO_Init+0x178>)
 8001164:	f000 fce4 	bl	8001b30 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN1_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin;
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001170:	2301      	movs	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	4815      	ldr	r0, [pc, #84]	@ (80011d0 <MX_GPIO_Init+0x170>)
 800117c:	f000 fcd8 	bl	8001b30 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN3_Pin */
	GPIO_InitStruct.Pin = BTN3_Pin;
 8001180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001184:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN3_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480f      	ldr	r0, [pc, #60]	@ (80011d4 <MX_GPIO_Init+0x174>)
 8001196:	f000 fccb 	bl	8001b30 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN2_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin;
 800119a:	2340      	movs	r3, #64	@ 0x40
 800119c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	480a      	ldr	r0, [pc, #40]	@ (80011d8 <MX_GPIO_Init+0x178>)
 80011ae:	f000 fcbf 	bl	8001b30 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2028      	movs	r0, #40	@ 0x28
 80011b8:	f000 fc83 	bl	8001ac2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011bc:	2028      	movs	r0, #40	@ 0x28
 80011be:	f000 fc9c 	bl	8001afa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40010800 	.word	0x40010800
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	10110000 	.word	0x10110000

080011e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <Error_Handler+0x8>

080011ec <is_avail>:
 *      Author: HP
 */
#include "scheduler.h"
Tasks_t tasks;

int is_avail(TaskNode *task) {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if (task->runMe == 1) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7c1b      	ldrb	r3, [r3, #16]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d104      	bne.n	8001206 <is_avail+0x1a>
		task->runMe = 0;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	741a      	strb	r2, [r3, #16]
		return 1;
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <is_avail+0x1c>
	}
	return 0;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
	...

08001214 <Scheduler_Init>:
void Scheduler_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
	if (!tasks.head) {
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <Scheduler_Init+0x58>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <Scheduler_Init+0x1c>
		tasks.head = NULL;
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <Scheduler_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
		tasks.nTasks = 0;
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <Scheduler_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
			current = current->next;
			free(tmp);
		}
		tasks.head = NULL;
	}
}
 800122e:	e018      	b.n	8001262 <Scheduler_Init+0x4e>
		TaskNode *current = tasks.head;
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <Scheduler_Init+0x58>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	72fb      	strb	r3, [r7, #11]
 800123a:	e00a      	b.n	8001252 <Scheduler_Init+0x3e>
			TaskNode *tmp = current;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	607b      	str	r3, [r7, #4]
			current = current->next;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	60fb      	str	r3, [r7, #12]
			free(tmp);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f002 fbe4 	bl	8003a14 <free>
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	3301      	adds	r3, #1
 8001250:	72fb      	strb	r3, [r7, #11]
 8001252:	7afa      	ldrb	r2, [r7, #11]
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <Scheduler_Init+0x58>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3ef      	bcc.n	800123c <Scheduler_Init+0x28>
		tasks.head = NULL;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <Scheduler_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001a0 	.word	0x200001a0

08001270 <Scheduler_Update>:

void Scheduler_Update(void) {
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	if (!tasks.head)
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <Scheduler_Update+0x34>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00f      	beq.n	800129c <Scheduler_Update+0x2c>
		return;
	if (tasks.head->delay <= 0) {
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <Scheduler_Update+0x34>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d104      	bne.n	8001290 <Scheduler_Update+0x20>
		tasks.head->runMe = 1;
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <Scheduler_Update+0x34>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	741a      	strb	r2, [r3, #16]
 800128e:	e006      	b.n	800129e <Scheduler_Update+0x2e>
	} else
		tasks.head->delay--;
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <Scheduler_Update+0x34>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	3a01      	subs	r2, #1
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	e000      	b.n	800129e <Scheduler_Update+0x2e>
		return;
 800129c:	bf00      	nop
}
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	200001a0 	.word	0x200001a0

080012a8 <Scheduler_Add_Task_ID>:

uint32_t Scheduler_Add_Task_ID(void (*pF)(void), uint32_t taskID,
		uint32_t DELAY, uint32_t PERIOD) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
	TaskNode *newTask = (TaskNode*) malloc(sizeof(TaskNode));
 80012b6:	2018      	movs	r0, #24
 80012b8:	f002 fba4 	bl	8003a04 <malloc>
 80012bc:	4603      	mov	r3, r0
 80012be:	617b      	str	r3, [r7, #20]
	if (tasks.nTasks >= MAX_TASKS || !newTask)
 80012c0:	4b46      	ldr	r3, [pc, #280]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b09      	cmp	r3, #9
 80012c6:	d802      	bhi.n	80012ce <Scheduler_Add_Task_ID+0x26>
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <Scheduler_Add_Task_ID+0x2a>
		return ADD_TASK_ERROR;
 80012ce:	236e      	movs	r3, #110	@ 0x6e
 80012d0:	e07f      	b.n	80013d2 <Scheduler_Add_Task_ID+0x12a>
	newTask->pTask = pF;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	601a      	str	r2, [r3, #0]
	newTask->delay = DELAY;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	609a      	str	r2, [r3, #8]
	newTask->period = PERIOD;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	60da      	str	r2, [r3, #12]
	newTask->runMe = 0;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2200      	movs	r2, #0
 80012e8:	741a      	strb	r2, [r3, #16]
	newTask->TaskID = taskID;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	615a      	str	r2, [r3, #20]
	newTask->next = NULL;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]

	if (!tasks.head || DELAY <= tasks.head->delay) {
 80012f6:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <Scheduler_Add_Task_ID+0x62>
 80012fe:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	429a      	cmp	r2, r3
 8001308:	d813      	bhi.n	8001332 <Scheduler_Add_Task_ID+0x8a>
		// add at head
		if (tasks.head) {
 800130a:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <Scheduler_Add_Task_ID+0x7a>
			tasks.head->delay -= DELAY;
 8001312:	4b32      	ldr	r3, [pc, #200]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6899      	ldr	r1, [r3, #8]
 8001318:	4b30      	ldr	r3, [pc, #192]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	1a8a      	subs	r2, r1, r2
 8001320:	609a      	str	r2, [r3, #8]
		}
		newTask->next = tasks.head;
 8001322:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	605a      	str	r2, [r3, #4]
		tasks.head = newTask;
 800132a:	4a2c      	ldr	r2, [pc, #176]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	e048      	b.n	80013c4 <Scheduler_Add_Task_ID+0x11c>
	} else {
		// add at middle
		uint32_t sumDelay = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
		TaskNode *current = tasks.head;
 8001336:	4b29      	ldr	r3, [pc, #164]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	623b      	str	r3, [r7, #32]
		TaskNode *prev = NULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < tasks.nTasks; i++) {
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	e029      	b.n	800139a <Scheduler_Add_Task_ID+0xf2>
			sumDelay += current->delay;
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800134c:	4413      	add	r3, r2
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
			if (sumDelay > DELAY) {
 8001350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d918      	bls.n	800138a <Scheduler_Add_Task_ID+0xe2>
				newTask->delay = DELAY - (sumDelay - current->delay);
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	441a      	add	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	609a      	str	r2, [r3, #8]
				current->delay -= newTask->delay;
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	1ad2      	subs	r2, r2, r3
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	609a      	str	r2, [r3, #8]
				newTask->next = current;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	6a3a      	ldr	r2, [r7, #32]
 800137a:	605a      	str	r2, [r3, #4]
				if (prev) {
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d011      	beq.n	80013a6 <Scheduler_Add_Task_ID+0xfe>
					prev->next = newTask;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	605a      	str	r2, [r3, #4]
				}
				break;
 8001388:	e00d      	b.n	80013a6 <Scheduler_Add_Task_ID+0xfe>
			}
			prev = current;
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	61fb      	str	r3, [r7, #28]
			current = current->next;
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < tasks.nTasks; i++) {
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	3301      	adds	r3, #1
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8d0      	bhi.n	8001346 <Scheduler_Add_Task_ID+0x9e>
 80013a4:	e000      	b.n	80013a8 <Scheduler_Add_Task_ID+0x100>
				break;
 80013a6:	bf00      	nop
		}
		// add at bottom
		if (!current && prev) {
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10a      	bne.n	80013c4 <Scheduler_Add_Task_ID+0x11c>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <Scheduler_Add_Task_ID+0x11c>
			newTask->delay = DELAY - sumDelay;
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	1ad2      	subs	r2, r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	609a      	str	r2, [r3, #8]
			prev->next = newTask;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	605a      	str	r2, [r3, #4]
		}
	}
	tasks.nTasks++;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <Scheduler_Add_Task_ID+0x134>)
 80013cc:	6053      	str	r3, [r2, #4]
	return newTask->TaskID;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	695b      	ldr	r3, [r3, #20]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200001a0 	.word	0x200001a0

080013e0 <Scheduler_Add_Task>:
uint32_t Scheduler_Add_Task(void (*pF)(void), uint32_t DELAY, uint32_t PERIOD) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	return Scheduler_Add_Task_ID(pF, tasks.nTasks, DELAY / TICK,
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <Scheduler_Add_Task+0x34>)
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4a09      	ldr	r2, [pc, #36]	@ (8001418 <Scheduler_Add_Task+0x38>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4806      	ldr	r0, [pc, #24]	@ (8001418 <Scheduler_Add_Task+0x38>)
 80013fe:	fba0 0303 	umull	r0, r3, r0, r3
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff ff4f 	bl	80012a8 <Scheduler_Add_Task_ID>
 800140a:	4603      	mov	r3, r0
			PERIOD / TICK);
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200001a0 	.word	0x200001a0
 8001418:	cccccccd 	.word	0xcccccccd

0800141c <Scheduler_Dispatch_Tasks>:

void Scheduler_Dispatch_Tasks(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
	if (!tasks.head)
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <Scheduler_Dispatch_Tasks+0x5c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d022      	beq.n	8001470 <Scheduler_Dispatch_Tasks+0x54>
		return;
	TaskNode *task = tasks.head;
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <Scheduler_Dispatch_Tasks+0x5c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	607b      	str	r3, [r7, #4]
	if (is_avail(task)) {
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fedb 	bl	80011ec <is_avail>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d01a      	beq.n	8001472 <Scheduler_Dispatch_Tasks+0x56>
		task->pTask();
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4798      	blx	r3
		if (Scheduler_Remove_Task(task->TaskID) && task->period > 0) {
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f818 	bl	800147c <Scheduler_Remove_Task>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00f      	beq.n	8001472 <Scheduler_Dispatch_Tasks+0x56>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <Scheduler_Dispatch_Tasks+0x56>
			Scheduler_Add_Task_ID(task->pTask, task->TaskID, task->period, task->period);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6959      	ldr	r1, [r3, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f7ff ff1d 	bl	80012a8 <Scheduler_Add_Task_ID>
 800146e:	e000      	b.n	8001472 <Scheduler_Dispatch_Tasks+0x56>
		return;
 8001470:	bf00      	nop
		}
	}
}
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200001a0 	.word	0x200001a0

0800147c <Scheduler_Remove_Task>:

uint8_t Scheduler_Remove_Task(uint32_t TaskID) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	if (!tasks.head)
 8001484:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <Scheduler_Remove_Task+0x80>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <Scheduler_Remove_Task+0x14>
		return NOT_VALID_TASK_ID;
 800148c:	236f      	movs	r3, #111	@ 0x6f
 800148e:	e030      	b.n	80014f2 <Scheduler_Remove_Task+0x76>
	TaskNode *current = tasks.head, *prev = NULL;
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <Scheduler_Remove_Task+0x80>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]

	for (uint32_t i = 0; i < tasks.nTasks; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e022      	b.n	80014e6 <Scheduler_Remove_Task+0x6a>
		if (current->TaskID == TaskID) {
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d115      	bne.n	80014d6 <Scheduler_Remove_Task+0x5a>
			if (prev) {
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <Scheduler_Remove_Task+0x3e>
				prev->next = current->next;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	e003      	b.n	80014c2 <Scheduler_Remove_Task+0x46>
			} else {
				tasks.head = current->next;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <Scheduler_Remove_Task+0x80>)
 80014c0:	6013      	str	r3, [r2, #0]
			}
			free(current);
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f002 faa6 	bl	8003a14 <free>
			tasks.nTasks--;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <Scheduler_Remove_Task+0x80>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <Scheduler_Remove_Task+0x80>)
 80014d0:	6053      	str	r3, [r2, #4]
			return 1; // Task successfully removed
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00d      	b.n	80014f2 <Scheduler_Remove_Task+0x76>
		}
		prev = current;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	613b      	str	r3, [r7, #16]
		current = current->next;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < tasks.nTasks; i++) {
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <Scheduler_Remove_Task+0x80>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d3d7      	bcc.n	80014a0 <Scheduler_Remove_Task+0x24>
	}
	return NOT_VALID_TASK_ID;
 80014f0:	236f      	movs	r3, #111	@ 0x6f
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001a0 	.word	0x200001a0

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_MspInit+0x5c>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4a14      	ldr	r2, [pc, #80]	@ (800155c <HAL_MspInit+0x5c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6193      	str	r3, [r2, #24]
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_MspInit+0x5c>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <HAL_MspInit+0x5c>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a0e      	ldr	r2, [pc, #56]	@ (800155c <HAL_MspInit+0x5c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <HAL_MspInit+0x5c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001536:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <HAL_MspInit+0x60>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <HAL_MspInit+0x60>)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000

08001564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <HAL_I2C_MspInit+0x90>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d132      	bne.n	80015ea <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <HAL_I2C_MspInit+0x94>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <HAL_I2C_MspInit+0x94>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_I2C_MspInit+0x94>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800159c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a2:	2312      	movs	r3, #18
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4812      	ldr	r0, [pc, #72]	@ (80015fc <HAL_I2C_MspInit+0x98>)
 80015b2:	f000 fabd 	bl	8001b30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_I2C_MspInit+0x9c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	f043 0302 	orr.w	r3, r3, #2
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80015cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001600 <HAL_I2C_MspInit+0x9c>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_I2C_MspInit+0x94>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <HAL_I2C_MspInit+0x94>)
 80015d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_I2C_MspInit+0x94>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	@ 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	40010000 	.word	0x40010000

08001604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001614:	d113      	bne.n	800163e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_TIM_Base_MspInit+0x44>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <HAL_TIM_Base_MspInit+0x44>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_TIM_Base_MspInit+0x44>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	201c      	movs	r0, #28
 8001634:	f000 fa45 	bl	8001ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001638:	201c      	movs	r0, #28
 800163a:	f000 fa5e 	bl	8001afa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <HAL_UART_MspInit+0x70>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d123      	bne.n	80016b4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <HAL_UART_MspInit+0x74>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	4a13      	ldr	r2, [pc, #76]	@ (80016c0 <HAL_UART_MspInit+0x74>)
 8001672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001676:	61d3      	str	r3, [r2, #28]
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_UART_MspInit+0x74>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_UART_MspInit+0x74>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <HAL_UART_MspInit+0x74>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <HAL_UART_MspInit+0x74>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800169c:	230c      	movs	r3, #12
 800169e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4619      	mov	r1, r3
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <HAL_UART_MspInit+0x78>)
 80016b0:	f000 fa3e 	bl	8001b30 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80016b4:	bf00      	nop
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40004400 	.word	0x40004400
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010800 	.word	0x40010800

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <NMI_Handler+0x4>

080016d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <MemManage_Handler+0x4>

080016e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <UsageFault_Handler+0x4>

080016f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 f8bc 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <TIM2_IRQHandler+0x10>)
 8001726:	f001 fd3f 	bl	80031a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000110 	.word	0x20000110

08001734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001738:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800173c:	f000 fbc4 	bl	8001ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800174c:	4a14      	ldr	r2, [pc, #80]	@ (80017a0 <_sbrk+0x5c>)
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <_sbrk+0x60>)
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <_sbrk+0x64>)
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <_sbrk+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	429a      	cmp	r2, r3
 8001772:	d207      	bcs.n	8001784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001774:	f002 fa3c 	bl	8003bf0 <__errno>
 8001778:	4603      	mov	r3, r0
 800177a:	220c      	movs	r2, #12
 800177c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e009      	b.n	8001798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <_sbrk+0x64>)
 8001794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20005000 	.word	0x20005000
 80017a4:	00000400 	.word	0x00000400
 80017a8:	200001a8 	.word	0x200001a8
 80017ac:	200002f8 	.word	0x200002f8

080017b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017bc:	f7ff fff8 	bl	80017b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017c2:	490c      	ldr	r1, [pc, #48]	@ (80017f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017c4:	4a0c      	ldr	r2, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017d8:	4c09      	ldr	r4, [pc, #36]	@ (8001800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f002 fa09 	bl	8003bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ea:	f7ff faef 	bl	8000dcc <main>
  bx lr
 80017ee:	4770      	bx	lr
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80017f8:	08004480 	.word	0x08004480
  ldr r2, =_sbss
 80017fc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001800:	200002f8 	.word	0x200002f8

08001804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_Init+0x28>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <HAL_Init+0x28>)
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 f947 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f808 	bl	8001834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fe6c 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800183c:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_InitTick+0x54>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_InitTick+0x58>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f95f 	bl	8001b16 <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e00e      	b.n	8001880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d80a      	bhi.n	800187e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 f927 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4a06      	ldr	r2, [pc, #24]	@ (8001890 <HAL_InitTick+0x5c>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000020 	.word	0x20000020
 800188c:	20000028 	.word	0x20000028
 8001890:	20000024 	.word	0x20000024

08001894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_IncTick+0x1c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_IncTick+0x20>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a03      	ldr	r2, [pc, #12]	@ (80018b4 <HAL_IncTick+0x20>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000028 	.word	0x20000028
 80018b4:	200001ac 	.word	0x200001ac

080018b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	@ (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	200001ac 	.word	0x200001ac

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffe0 	bl	80018b8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000028 	.word	0x20000028

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4906      	ldr	r1, [pc, #24]	@ (80019ac <__NVIC_EnableIRQ+0x34>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	@ (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f7ff ff90 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff2d 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff42 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff90 	bl	8001a04 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5f 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff35 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffa2 	bl	8001a68 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b08b      	sub	sp, #44	@ 0x2c
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	e169      	b.n	8001e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b44:	2201      	movs	r2, #1
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8158 	bne.w	8001e12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4a9a      	ldr	r2, [pc, #616]	@ (8001dd0 <HAL_GPIO_Init+0x2a0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d05e      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b6c:	4a98      	ldr	r2, [pc, #608]	@ (8001dd0 <HAL_GPIO_Init+0x2a0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d875      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b72:	4a98      	ldr	r2, [pc, #608]	@ (8001dd4 <HAL_GPIO_Init+0x2a4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d058      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b78:	4a96      	ldr	r2, [pc, #600]	@ (8001dd4 <HAL_GPIO_Init+0x2a4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d86f      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b7e:	4a96      	ldr	r2, [pc, #600]	@ (8001dd8 <HAL_GPIO_Init+0x2a8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d052      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b84:	4a94      	ldr	r2, [pc, #592]	@ (8001dd8 <HAL_GPIO_Init+0x2a8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d869      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b8a:	4a94      	ldr	r2, [pc, #592]	@ (8001ddc <HAL_GPIO_Init+0x2ac>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d04c      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b90:	4a92      	ldr	r2, [pc, #584]	@ (8001ddc <HAL_GPIO_Init+0x2ac>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d863      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001b96:	4a92      	ldr	r2, [pc, #584]	@ (8001de0 <HAL_GPIO_Init+0x2b0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d046      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
 8001b9c:	4a90      	ldr	r2, [pc, #576]	@ (8001de0 <HAL_GPIO_Init+0x2b0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d85d      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d82a      	bhi.n	8001bfc <HAL_GPIO_Init+0xcc>
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	d859      	bhi.n	8001c5e <HAL_GPIO_Init+0x12e>
 8001baa:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb0 <HAL_GPIO_Init+0x80>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001c2b 	.word	0x08001c2b
 8001bb4:	08001c05 	.word	0x08001c05
 8001bb8:	08001c17 	.word	0x08001c17
 8001bbc:	08001c59 	.word	0x08001c59
 8001bc0:	08001c5f 	.word	0x08001c5f
 8001bc4:	08001c5f 	.word	0x08001c5f
 8001bc8:	08001c5f 	.word	0x08001c5f
 8001bcc:	08001c5f 	.word	0x08001c5f
 8001bd0:	08001c5f 	.word	0x08001c5f
 8001bd4:	08001c5f 	.word	0x08001c5f
 8001bd8:	08001c5f 	.word	0x08001c5f
 8001bdc:	08001c5f 	.word	0x08001c5f
 8001be0:	08001c5f 	.word	0x08001c5f
 8001be4:	08001c5f 	.word	0x08001c5f
 8001be8:	08001c5f 	.word	0x08001c5f
 8001bec:	08001c5f 	.word	0x08001c5f
 8001bf0:	08001c5f 	.word	0x08001c5f
 8001bf4:	08001c0d 	.word	0x08001c0d
 8001bf8:	08001c21 	.word	0x08001c21
 8001bfc:	4a79      	ldr	r2, [pc, #484]	@ (8001de4 <HAL_GPIO_Init+0x2b4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c02:	e02c      	b.n	8001c5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e029      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	3304      	adds	r3, #4
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e024      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	3308      	adds	r3, #8
 8001c1c:	623b      	str	r3, [r7, #32]
          break;
 8001c1e:	e01f      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	330c      	adds	r3, #12
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	e01a      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c32:	2304      	movs	r3, #4
 8001c34:	623b      	str	r3, [r7, #32]
          break;
 8001c36:	e013      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c40:	2308      	movs	r3, #8
 8001c42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	611a      	str	r2, [r3, #16]
          break;
 8001c4a:	e009      	b.n	8001c60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	615a      	str	r2, [r3, #20]
          break;
 8001c56:	e003      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
          break;
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x130>
          break;
 8001c5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2bff      	cmp	r3, #255	@ 0xff
 8001c64:	d801      	bhi.n	8001c6a <HAL_GPIO_Init+0x13a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	e001      	b.n	8001c6e <HAL_GPIO_Init+0x13e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2bff      	cmp	r3, #255	@ 0xff
 8001c74:	d802      	bhi.n	8001c7c <HAL_GPIO_Init+0x14c>
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x152>
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	3b08      	subs	r3, #8
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	210f      	movs	r1, #15
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	6a39      	ldr	r1, [r7, #32]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80b1 	beq.w	8001e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8001de8 <HAL_GPIO_Init+0x2b8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8001de8 <HAL_GPIO_Init+0x2b8>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8001de8 <HAL_GPIO_Init+0x2b8>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cc8:	4a48      	ldr	r2, [pc, #288]	@ (8001dec <HAL_GPIO_Init+0x2bc>)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a40      	ldr	r2, [pc, #256]	@ (8001df0 <HAL_GPIO_Init+0x2c0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_GPIO_Init+0x1ec>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8001df4 <HAL_GPIO_Init+0x2c4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00d      	beq.n	8001d18 <HAL_GPIO_Init+0x1e8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8001df8 <HAL_GPIO_Init+0x2c8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <HAL_GPIO_Init+0x1e4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3d      	ldr	r2, [pc, #244]	@ (8001dfc <HAL_GPIO_Init+0x2cc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_GPIO_Init+0x1e0>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e006      	b.n	8001d1e <HAL_GPIO_Init+0x1ee>
 8001d10:	2304      	movs	r3, #4
 8001d12:	e004      	b.n	8001d1e <HAL_GPIO_Init+0x1ee>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e002      	b.n	8001d1e <HAL_GPIO_Init+0x1ee>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_GPIO_Init+0x1ee>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d20:	f002 0203 	and.w	r2, r2, #3
 8001d24:	0092      	lsls	r2, r2, #2
 8001d26:	4093      	lsls	r3, r2
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d2e:	492f      	ldr	r1, [pc, #188]	@ (8001dec <HAL_GPIO_Init+0x2bc>)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d48:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	492c      	ldr	r1, [pc, #176]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	608b      	str	r3, [r1, #8]
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d56:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4928      	ldr	r1, [pc, #160]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d70:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	4922      	ldr	r1, [pc, #136]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60cb      	str	r3, [r1, #12]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	491e      	ldr	r1, [pc, #120]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4918      	ldr	r1, [pc, #96]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001da6:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	4914      	ldr	r1, [pc, #80]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d021      	beq.n	8001e04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	490e      	ldr	r1, [pc, #56]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	e021      	b.n	8001e12 <HAL_GPIO_Init+0x2e2>
 8001dce:	bf00      	nop
 8001dd0:	10320000 	.word	0x10320000
 8001dd4:	10310000 	.word	0x10310000
 8001dd8:	10220000 	.word	0x10220000
 8001ddc:	10210000 	.word	0x10210000
 8001de0:	10120000 	.word	0x10120000
 8001de4:	10110000 	.word	0x10110000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40010800 	.word	0x40010800
 8001df4:	40010c00 	.word	0x40010c00
 8001df8:	40011000 	.word	0x40011000
 8001dfc:	40011400 	.word	0x40011400
 8001e00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4909      	ldr	r1, [pc, #36]	@ (8001e34 <HAL_GPIO_Init+0x304>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	3301      	adds	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f47f ae8e 	bne.w	8001b44 <HAL_GPIO_Init+0x14>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	372c      	adds	r7, #44	@ 0x2c
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	807b      	strh	r3, [r7, #2]
 8001e72:	4613      	mov	r3, r2
 8001e74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e76:	787b      	ldrb	r3, [r7, #1]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7c:	887a      	ldrh	r2, [r7, #2]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e82:	e003      	b.n	8001e8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e84:	887b      	ldrh	r3, [r7, #2]
 8001e86:	041a      	lsls	r2, r3, #16
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	611a      	str	r2, [r3, #16]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea8:	887a      	ldrh	r2, [r7, #2]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4013      	ands	r3, r2
 8001eae:	041a      	lsls	r2, r3, #16
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	400b      	ands	r3, r1
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ed2:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ede:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f806 	bl	8001ef8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e12b      	b.n	8002176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fb16 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	@ 0x24
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f70:	f001 f832 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8001f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a81      	ldr	r2, [pc, #516]	@ (8002180 <HAL_I2C_Init+0x274>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d807      	bhi.n	8001f90 <HAL_I2C_Init+0x84>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a80      	ldr	r2, [pc, #512]	@ (8002184 <HAL_I2C_Init+0x278>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e006      	b.n	8001f9e <HAL_I2C_Init+0x92>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4a7d      	ldr	r2, [pc, #500]	@ (8002188 <HAL_I2C_Init+0x27c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	bf94      	ite	ls
 8001f98:	2301      	movls	r3, #1
 8001f9a:	2300      	movhi	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0e7      	b.n	8002176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a78      	ldr	r2, [pc, #480]	@ (800218c <HAL_I2C_Init+0x280>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8002180 <HAL_I2C_Init+0x274>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_I2C_Init+0xd4>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	e009      	b.n	8001ff4 <HAL_I2C_Init+0xe8>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a69      	ldr	r2, [pc, #420]	@ (8002190 <HAL_I2C_Init+0x284>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002006:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	495c      	ldr	r1, [pc, #368]	@ (8002180 <HAL_I2C_Init+0x274>)
 8002010:	428b      	cmp	r3, r1
 8002012:	d819      	bhi.n	8002048 <HAL_I2C_Init+0x13c>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1e59      	subs	r1, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002028:	400b      	ands	r3, r1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_I2C_Init+0x138>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e59      	subs	r1, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fbb1 f3f3 	udiv	r3, r1, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002042:	e051      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002044:	2304      	movs	r3, #4
 8002046:	e04f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d111      	bne.n	8002074 <HAL_I2C_Init+0x168>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e012      	b.n	800209a <HAL_I2C_Init+0x18e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	0099      	lsls	r1, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Init+0x196>
 800209e:	2301      	movs	r3, #1
 80020a0:	e022      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10e      	bne.n	80020c8 <HAL_I2C_Init+0x1bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e58      	subs	r0, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	440b      	add	r3, r1
 80020b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	0099      	lsls	r1, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	6809      	ldr	r1, [r1, #0]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002116:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6911      	ldr	r1, [r2, #16]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68d2      	ldr	r2, [r2, #12]
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	430b      	orrs	r3, r1
 800212a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	000186a0 	.word	0x000186a0
 8002184:	001e847f 	.word	0x001e847f
 8002188:	003d08ff 	.word	0x003d08ff
 800218c:	431bde83 	.word	0x431bde83
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	817b      	strh	r3, [r7, #10]
 80021a4:	4613      	mov	r3, r2
 80021a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fb86 	bl	80018b8 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	f040 80e0 	bne.w	800237c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2319      	movs	r3, #25
 80021c2:	2201      	movs	r2, #1
 80021c4:	4970      	ldr	r1, [pc, #448]	@ (8002388 <HAL_I2C_Master_Transmit+0x1f4>)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f964 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e0d3      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0x50>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0cc      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d007      	beq.n	800220a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2221      	movs	r2, #33	@ 0x21
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2210      	movs	r2, #16
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	893a      	ldrh	r2, [r7, #8]
 800223a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a50      	ldr	r2, [pc, #320]	@ (800238c <HAL_I2C_Master_Transmit+0x1f8>)
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f89c 	bl	8002390 <I2C_MasterRequestWrite>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e08d      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002278:	e066      	b.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fa22 	bl	80026c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d107      	bne.n	80022a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_I2C_Master_Transmit+0x188>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6a39      	ldr	r1, [r7, #32]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fa19 	bl	8002758 <I2C_WaitOnBTFFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	2b04      	cmp	r3, #4
 8002332:	d107      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002342:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e01a      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d194      	bne.n	800227a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	00100002 	.word	0x00100002
 800238c:	ffff0000 	.word	0xffff0000

08002390 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	460b      	mov	r3, r1
 800239e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d006      	beq.n	80023ba <I2C_MasterRequestWrite+0x2a>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d003      	beq.n	80023ba <I2C_MasterRequestWrite+0x2a>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023b8:	d108      	bne.n	80023cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e00b      	b.n	80023e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d107      	bne.n	80023e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f84f 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800240a:	d103      	bne.n	8002414 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e035      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002420:	d108      	bne.n	8002434 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002422:	897b      	ldrh	r3, [r7, #10]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	e01b      	b.n	800246c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002434:	897b      	ldrh	r3, [r7, #10]
 8002436:	11db      	asrs	r3, r3, #7
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f003 0306 	and.w	r3, r3, #6
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f063 030f 	orn	r3, r3, #15
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	490e      	ldr	r1, [pc, #56]	@ (800248c <I2C_MasterRequestWrite+0xfc>)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f898 	bl	8002588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e010      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4907      	ldr	r1, [pc, #28]	@ (8002490 <I2C_MasterRequestWrite+0x100>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f888 	bl	8002588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	00010008 	.word	0x00010008
 8002490:	00010002 	.word	0x00010002

08002494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a4:	e048      	b.n	8002538 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d044      	beq.n	8002538 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7ff fa03 	bl	80018b8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d139      	bne.n	8002538 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	0c1b      	lsrs	r3, r3, #16
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d10d      	bne.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	43da      	mvns	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	4013      	ands	r3, r2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	e00c      	b.n	8002504 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	43da      	mvns	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4013      	ands	r3, r2
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	429a      	cmp	r2, r3
 8002508:	d116      	bne.n	8002538 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f043 0220 	orr.w	r2, r3, #32
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e023      	b.n	8002580 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	0c1b      	lsrs	r3, r3, #16
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d10d      	bne.n	800255e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	43da      	mvns	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	4013      	ands	r3, r2
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	e00c      	b.n	8002578 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	43da      	mvns	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4013      	ands	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	429a      	cmp	r2, r3
 800257c:	d093      	beq.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002596:	e071      	b.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a6:	d123      	bne.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f043 0204 	orr.w	r2, r3, #4
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e067      	b.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d041      	beq.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f8:	f7ff f95e 	bl	80018b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	d302      	bcc.n	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d136      	bne.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10c      	bne.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4013      	ands	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e00b      	b.n	800264a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	43da      	mvns	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4013      	ands	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e021      	b.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d10c      	bne.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	43da      	mvns	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4013      	ands	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e00b      	b.n	80026b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf14      	ite	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	2300      	moveq	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f af6d 	bne.w	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d4:	e034      	b.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f886 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e034      	b.n	8002750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d028      	beq.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7ff f8e3 	bl	80018b8 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d11d      	bne.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270e:	2b80      	cmp	r3, #128	@ 0x80
 8002710:	d016      	beq.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e007      	b.n	8002750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274a:	2b80      	cmp	r3, #128	@ 0x80
 800274c:	d1c3      	bne.n	80026d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002764:	e034      	b.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f83e 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e034      	b.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d028      	beq.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7ff f89b 	bl	80018b8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11d      	bne.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d016      	beq.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d1c3      	bne.n	8002766 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027fe:	d11b      	bne.n	8002838 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002808:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f043 0204 	orr.w	r2, r3, #4
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e272      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8087 	beq.w	8002972 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002864:	4b92      	ldr	r3, [pc, #584]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b04      	cmp	r3, #4
 800286e:	d00c      	beq.n	800288a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002870:	4b8f      	ldr	r3, [pc, #572]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d112      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
 800287c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002888:	d10b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288a:	4b89      	ldr	r3, [pc, #548]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d06c      	beq.n	8002970 <HAL_RCC_OscConfig+0x12c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d168      	bne.n	8002970 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e24c      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x76>
 80028ac:	4b80      	ldr	r3, [pc, #512]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e02e      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x98>
 80028c2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7a      	ldr	r2, [pc, #488]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b78      	ldr	r3, [pc, #480]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a77      	ldr	r2, [pc, #476]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0xbc>
 80028e6:	4b72      	ldr	r3, [pc, #456]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a71      	ldr	r2, [pc, #452]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 8002900:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6a      	ldr	r2, [pc, #424]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b68      	ldr	r3, [pc, #416]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a67      	ldr	r2, [pc, #412]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002916:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe ffca 	bl	80018b8 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe ffc6 	bl	80018b8 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e200      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xe4>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe ffb6 	bl	80018b8 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe ffb2 	bl	80018b8 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1ec      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b53      	ldr	r3, [pc, #332]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x10c>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d063      	beq.n	8002a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800297e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800298a:	4b49      	ldr	r3, [pc, #292]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x18c>
 8002996:	4b46      	ldr	r3, [pc, #280]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x176>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1c0      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4939      	ldr	r1, [pc, #228]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b36      	ldr	r3, [pc, #216]	@ (8002ab4 <HAL_RCC_OscConfig+0x270>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe ff6b 	bl	80018b8 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e6:	f7fe ff67 	bl	80018b8 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1a1      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4927      	ldr	r1, [pc, #156]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b26      	ldr	r3, [pc, #152]	@ (8002ab4 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe ff4a 	bl	80018b8 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fe ff46 	bl	80018b8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e180      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d03a      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d019      	beq.n	8002a8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7fe ff2a 	bl	80018b8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7fe ff26 	bl	80018b8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e160      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 face 	bl	8003028 <RCC_Delay>
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a94:	f7fe ff10 	bl	80018b8 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9a:	e00f      	b.n	8002abc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7fe ff0c 	bl	80018b8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d908      	bls.n	8002abc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e146      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	42420000 	.word	0x42420000
 8002ab8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	4b92      	ldr	r3, [pc, #584]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e9      	bne.n	8002a9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80a6 	beq.w	8002c22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ada:	4b8b      	ldr	r3, [pc, #556]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4b88      	ldr	r3, [pc, #544]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4a87      	ldr	r2, [pc, #540]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	61d3      	str	r3, [r2, #28]
 8002af2:	4b85      	ldr	r3, [pc, #532]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b02:	4b82      	ldr	r3, [pc, #520]	@ (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d118      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7e      	ldr	r2, [pc, #504]	@ (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fecd 	bl	80018b8 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b22:	f7fe fec9 	bl	80018b8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b64      	cmp	r3, #100	@ 0x64
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e103      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	4b75      	ldr	r3, [pc, #468]	@ (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x312>
 8002b48:	4b6f      	ldr	r3, [pc, #444]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	e02d      	b.n	8002bb2 <HAL_RCC_OscConfig+0x36e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x334>
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a69      	ldr	r2, [pc, #420]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b67      	ldr	r3, [pc, #412]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a66      	ldr	r2, [pc, #408]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	e01c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x36e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d10c      	bne.n	8002b9a <HAL_RCC_OscConfig+0x356>
 8002b80:	4b61      	ldr	r3, [pc, #388]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4a60      	ldr	r2, [pc, #384]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	6213      	str	r3, [r2, #32]
 8002b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4a5d      	ldr	r2, [pc, #372]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6213      	str	r3, [r2, #32]
 8002b98:	e00b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x36e>
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6213      	str	r3, [r2, #32]
 8002ba6:	4b58      	ldr	r3, [pc, #352]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4a57      	ldr	r2, [pc, #348]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d015      	beq.n	8002be6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fe7d 	bl	80018b8 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fe79 	bl	80018b8 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e0b1      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ee      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x37e>
 8002be4:	e014      	b.n	8002c10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fe67 	bl	80018b8 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fe fe63 	bl	80018b8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e09b      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	4b40      	ldr	r3, [pc, #256]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ee      	bne.n	8002bee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4b3c      	ldr	r3, [pc, #240]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8087 	beq.w	8002d3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c2c:	4b36      	ldr	r3, [pc, #216]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d061      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d146      	bne.n	8002cce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	4b33      	ldr	r3, [pc, #204]	@ (8002d10 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fe fe37 	bl	80018b8 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7fe fe33 	bl	80018b8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e06d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c60:	4b29      	ldr	r3, [pc, #164]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f0      	bne.n	8002c4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c74:	d108      	bne.n	8002c88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c76:	4b24      	ldr	r3, [pc, #144]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4921      	ldr	r1, [pc, #132]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c88:	4b1f      	ldr	r3, [pc, #124]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a19      	ldr	r1, [r3, #32]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	491b      	ldr	r1, [pc, #108]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <HAL_RCC_OscConfig+0x4cc>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fe07 	bl	80018b8 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cae:	f7fe fe03 	bl	80018b8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e03d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x46a>
 8002ccc:	e035      	b.n	8002d3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fdf0 	bl	80018b8 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe fdec 	bl	80018b8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e026      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x498>
 8002cfa:	e01e      	b.n	8002d3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e019      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_RCC_OscConfig+0x500>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0d0      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d910      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b67      	ldr	r3, [pc, #412]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4965      	ldr	r1, [pc, #404]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b63      	ldr	r3, [pc, #396]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0b8      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da4:	4b59      	ldr	r3, [pc, #356]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a58      	ldr	r2, [pc, #352]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dbc:	4b53      	ldr	r3, [pc, #332]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a52      	ldr	r2, [pc, #328]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002dc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4b50      	ldr	r3, [pc, #320]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	494d      	ldr	r1, [pc, #308]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d040      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d115      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	4b41      	ldr	r3, [pc, #260]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e073      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	4b3d      	ldr	r3, [pc, #244]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06b      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e26:	4b39      	ldr	r3, [pc, #228]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f023 0203 	bic.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4936      	ldr	r1, [pc, #216]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e38:	f7fe fd3e 	bl	80018b8 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7fe fd3a 	bl	80018b8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e053      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	4b2d      	ldr	r3, [pc, #180]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 020c 	and.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1eb      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e68:	4b27      	ldr	r3, [pc, #156]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d210      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b24      	ldr	r3, [pc, #144]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0207 	bic.w	r2, r3, #7
 8002e7e:	4922      	ldr	r1, [pc, #136]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e032      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4916      	ldr	r1, [pc, #88]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ec2:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	490e      	ldr	r1, [pc, #56]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ed6:	f000 f821 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	490a      	ldr	r1, [pc, #40]	@ (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	5ccb      	ldrb	r3, [r1, r3]
 8002eea:	fa22 f303 	lsr.w	r3, r2, r3
 8002eee:	4a09      	ldr	r2, [pc, #36]	@ (8002f14 <HAL_RCC_ClockConfig+0x1cc>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RCC_ClockConfig+0x1d0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fc9c 	bl	8001834 <HAL_InitTick>

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08004418 	.word	0x08004418
 8002f14:	20000020 	.word	0x20000020
 8002f18:	20000024 	.word	0x20000024

08002f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f36:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x30>
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x36>
 8002f4a:	e027      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f4e:	613b      	str	r3, [r7, #16]
      break;
 8002f50:	e027      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0c9b      	lsrs	r3, r3, #18
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f5c:	5cd3      	ldrb	r3, [r2, r3]
 8002f5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f6a:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	0c5b      	lsrs	r3, r3, #17
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f7e:	fb03 f202 	mul.w	r2, r3, r2
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e004      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	613b      	str	r3, [r7, #16]
      break;
 8002f9a:	e002      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	613b      	str	r3, [r7, #16]
      break;
 8002fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa2:	693b      	ldr	r3, [r7, #16]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	007a1200 	.word	0x007a1200
 8002fb8:	08004430 	.word	0x08004430
 8002fbc:	08004440 	.word	0x08004440
 8002fc0:	003d0900 	.word	0x003d0900

08002fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b02      	ldr	r3, [pc, #8]	@ (8002fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	20000020 	.word	0x20000020

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fdc:	f7ff fff2 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	@ (8002ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	08004428 	.word	0x08004428

08003000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003004:	f7ff ffde 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	0adb      	lsrs	r3, r3, #11
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	@ (8003024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	08004428 	.word	0x08004428

08003028 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003030:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <RCC_Delay+0x34>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <RCC_Delay+0x38>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0a5b      	lsrs	r3, r3, #9
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003044:	bf00      	nop
  }
  while (Delay --);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	60fa      	str	r2, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f9      	bne.n	8003044 <RCC_Delay+0x1c>
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	20000020 	.word	0x20000020
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e041      	b.n	80030fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe faba 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f000 fa5c 	bl	8003560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e03a      	b.n	8003192 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a18      	ldr	r2, [pc, #96]	@ (800319c <HAL_TIM_Base_Start_IT+0x98>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00e      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x58>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003146:	d009      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x58>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a14      	ldr	r2, [pc, #80]	@ (80031a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x58>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a13      	ldr	r2, [pc, #76]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d010      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317e:	e007      	b.n	8003190 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800

080031a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d020      	beq.n	800320c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0202 	mvn.w	r2, #2
 80031dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f998 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f98b 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f99a 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d020      	beq.n	8003258 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0204 	mvn.w	r2, #4
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f972 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f965 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f974 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d020      	beq.n	80032a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0208 	mvn.w	r2, #8
 8003274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2204      	movs	r2, #4
 800327a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f94c 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 8003290:	e005      	b.n	800329e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f93f 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f94e 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d020      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01b      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0210 	mvn.w	r2, #16
 80032c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2208      	movs	r2, #8
 80032c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f926 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f919 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f928 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0201 	mvn.w	r2, #1
 800330c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd fd40 	bl	8000d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa7f 	bl	8003836 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8f8 	bl	800354c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0220 	mvn.w	r2, #32
 8003378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa52 	bl	8003824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_TIM_ConfigClockSource+0x1c>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0b4      	b.n	800350e <HAL_TIM_ConfigClockSource+0x186>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033dc:	d03e      	beq.n	800345c <HAL_TIM_ConfigClockSource+0xd4>
 80033de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e2:	f200 8087 	bhi.w	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ea:	f000 8086 	beq.w	80034fa <HAL_TIM_ConfigClockSource+0x172>
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f2:	d87f      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033f4:	2b70      	cmp	r3, #112	@ 0x70
 80033f6:	d01a      	beq.n	800342e <HAL_TIM_ConfigClockSource+0xa6>
 80033f8:	2b70      	cmp	r3, #112	@ 0x70
 80033fa:	d87b      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033fc:	2b60      	cmp	r3, #96	@ 0x60
 80033fe:	d050      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003400:	2b60      	cmp	r3, #96	@ 0x60
 8003402:	d877      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003404:	2b50      	cmp	r3, #80	@ 0x50
 8003406:	d03c      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xfa>
 8003408:	2b50      	cmp	r3, #80	@ 0x50
 800340a:	d873      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b40      	cmp	r3, #64	@ 0x40
 800340e:	d058      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003410:	2b40      	cmp	r3, #64	@ 0x40
 8003412:	d86f      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b30      	cmp	r3, #48	@ 0x30
 8003416:	d064      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003418:	2b30      	cmp	r3, #48	@ 0x30
 800341a:	d86b      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b20      	cmp	r3, #32
 800341e:	d060      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003420:	2b20      	cmp	r3, #32
 8003422:	d867      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05c      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003428:	2b10      	cmp	r3, #16
 800342a:	d05a      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 800342c:	e062      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800343e:	f000 f974 	bl	800372a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	609a      	str	r2, [r3, #8]
      break;
 800345a:	e04f      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800346c:	f000 f95d 	bl	800372a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800347e:	609a      	str	r2, [r3, #8]
      break;
 8003480:	e03c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348e:	461a      	mov	r2, r3
 8003490:	f000 f8d4 	bl	800363c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2150      	movs	r1, #80	@ 0x50
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f92b 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80034a0:	e02c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ae:	461a      	mov	r2, r3
 80034b0:	f000 f8f2 	bl	8003698 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2160      	movs	r1, #96	@ 0x60
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f91b 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80034c0:	e01c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	461a      	mov	r2, r3
 80034d0:	f000 f8b4 	bl	800363c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2140      	movs	r1, #64	@ 0x40
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f90b 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80034e0:	e00c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f000 f902 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80034f2:	e003      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e000      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
	...

08003560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a2f      	ldr	r2, [pc, #188]	@ (8003630 <TIM_Base_SetConfig+0xd0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00b      	beq.n	8003590 <TIM_Base_SetConfig+0x30>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357e:	d007      	beq.n	8003590 <TIM_Base_SetConfig+0x30>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a2c      	ldr	r2, [pc, #176]	@ (8003634 <TIM_Base_SetConfig+0xd4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_Base_SetConfig+0x30>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a2b      	ldr	r2, [pc, #172]	@ (8003638 <TIM_Base_SetConfig+0xd8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a22      	ldr	r2, [pc, #136]	@ (8003630 <TIM_Base_SetConfig+0xd0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00b      	beq.n	80035c2 <TIM_Base_SetConfig+0x62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b0:	d007      	beq.n	80035c2 <TIM_Base_SetConfig+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003634 <TIM_Base_SetConfig+0xd4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_Base_SetConfig+0x62>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003638 <TIM_Base_SetConfig+0xd8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d108      	bne.n	80035d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003630 <TIM_Base_SetConfig+0xd0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d103      	bne.n	8003608 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f023 0201 	bic.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]
  }
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800

0800363c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 030a 	bic.w	r3, r3, #10
 8003678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f023 0210 	bic.w	r2, r3, #16
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	031b      	lsls	r3, r3, #12
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	621a      	str	r2, [r3, #32]
}
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	f043 0307 	orr.w	r3, r3, #7
 8003718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800372a:	b480      	push	{r7}
 800372c:	b087      	sub	sp, #28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003744:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	021a      	lsls	r2, r3, #8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	431a      	orrs	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4313      	orrs	r3, r2
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	609a      	str	r2, [r3, #8]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800377c:	2302      	movs	r3, #2
 800377e:	e046      	b.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a16      	ldr	r2, [pc, #88]	@ (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037cc:	d009      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a12      	ldr	r2, [pc, #72]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a10      	ldr	r2, [pc, #64]	@ (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10c      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800

08003824 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e042      	b.n	80038e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd feec 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	@ 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800388a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f82b 	bl	80038e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003922:	f023 030c 	bic.w	r3, r3, #12
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	430b      	orrs	r3, r1
 800392e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2c      	ldr	r2, [pc, #176]	@ (80039fc <UART_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d103      	bne.n	8003958 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003950:	f7ff fb56 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	e002      	b.n	800395e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003958:	f7ff fb3e 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 800395c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	4a22      	ldr	r2, [pc, #136]	@ (8003a00 <UART_SetConfig+0x118>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	0119      	lsls	r1, r3, #4
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	fbb2 f2f3 	udiv	r2, r2, r3
 8003994:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <UART_SetConfig+0x118>)
 8003996:	fba3 0302 	umull	r0, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2064      	movs	r0, #100	@ 0x64
 800399e:	fb00 f303 	mul.w	r3, r0, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	3332      	adds	r3, #50	@ 0x32
 80039a8:	4a15      	ldr	r2, [pc, #84]	@ (8003a00 <UART_SetConfig+0x118>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039b4:	4419      	add	r1, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a00 <UART_SetConfig+0x118>)
 80039ce:	fba3 0302 	umull	r0, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2064      	movs	r0, #100	@ 0x64
 80039d6:	fb00 f303 	mul.w	r3, r0, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	3332      	adds	r3, #50	@ 0x32
 80039e0:	4a07      	ldr	r2, [pc, #28]	@ (8003a00 <UART_SetConfig+0x118>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	440a      	add	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40013800 	.word	0x40013800
 8003a00:	51eb851f 	.word	0x51eb851f

08003a04 <malloc>:
 8003a04:	4b02      	ldr	r3, [pc, #8]	@ (8003a10 <malloc+0xc>)
 8003a06:	4601      	mov	r1, r0
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	f000 b82d 	b.w	8003a68 <_malloc_r>
 8003a0e:	bf00      	nop
 8003a10:	2000002c 	.word	0x2000002c

08003a14 <free>:
 8003a14:	4b02      	ldr	r3, [pc, #8]	@ (8003a20 <free+0xc>)
 8003a16:	4601      	mov	r1, r0
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	f000 b915 	b.w	8003c48 <_free_r>
 8003a1e:	bf00      	nop
 8003a20:	2000002c 	.word	0x2000002c

08003a24 <sbrk_aligned>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4e0f      	ldr	r6, [pc, #60]	@ (8003a64 <sbrk_aligned+0x40>)
 8003a28:	460c      	mov	r4, r1
 8003a2a:	6831      	ldr	r1, [r6, #0]
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	b911      	cbnz	r1, 8003a36 <sbrk_aligned+0x12>
 8003a30:	f000 f8ce 	bl	8003bd0 <_sbrk_r>
 8003a34:	6030      	str	r0, [r6, #0]
 8003a36:	4621      	mov	r1, r4
 8003a38:	4628      	mov	r0, r5
 8003a3a:	f000 f8c9 	bl	8003bd0 <_sbrk_r>
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	d103      	bne.n	8003a4a <sbrk_aligned+0x26>
 8003a42:	f04f 34ff 	mov.w	r4, #4294967295
 8003a46:	4620      	mov	r0, r4
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
 8003a4a:	1cc4      	adds	r4, r0, #3
 8003a4c:	f024 0403 	bic.w	r4, r4, #3
 8003a50:	42a0      	cmp	r0, r4
 8003a52:	d0f8      	beq.n	8003a46 <sbrk_aligned+0x22>
 8003a54:	1a21      	subs	r1, r4, r0
 8003a56:	4628      	mov	r0, r5
 8003a58:	f000 f8ba 	bl	8003bd0 <_sbrk_r>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d1f2      	bne.n	8003a46 <sbrk_aligned+0x22>
 8003a60:	e7ef      	b.n	8003a42 <sbrk_aligned+0x1e>
 8003a62:	bf00      	nop
 8003a64:	200001b0 	.word	0x200001b0

08003a68 <_malloc_r>:
 8003a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a6c:	1ccd      	adds	r5, r1, #3
 8003a6e:	f025 0503 	bic.w	r5, r5, #3
 8003a72:	3508      	adds	r5, #8
 8003a74:	2d0c      	cmp	r5, #12
 8003a76:	bf38      	it	cc
 8003a78:	250c      	movcc	r5, #12
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	db01      	blt.n	8003a84 <_malloc_r+0x1c>
 8003a80:	42a9      	cmp	r1, r5
 8003a82:	d904      	bls.n	8003a8e <_malloc_r+0x26>
 8003a84:	230c      	movs	r3, #12
 8003a86:	6033      	str	r3, [r6, #0]
 8003a88:	2000      	movs	r0, #0
 8003a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b64 <_malloc_r+0xfc>
 8003a92:	f000 f869 	bl	8003b68 <__malloc_lock>
 8003a96:	f8d8 3000 	ldr.w	r3, [r8]
 8003a9a:	461c      	mov	r4, r3
 8003a9c:	bb44      	cbnz	r4, 8003af0 <_malloc_r+0x88>
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	f7ff ffbf 	bl	8003a24 <sbrk_aligned>
 8003aa6:	1c43      	adds	r3, r0, #1
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	d158      	bne.n	8003b5e <_malloc_r+0xf6>
 8003aac:	f8d8 4000 	ldr.w	r4, [r8]
 8003ab0:	4627      	mov	r7, r4
 8003ab2:	2f00      	cmp	r7, #0
 8003ab4:	d143      	bne.n	8003b3e <_malloc_r+0xd6>
 8003ab6:	2c00      	cmp	r4, #0
 8003ab8:	d04b      	beq.n	8003b52 <_malloc_r+0xea>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	4639      	mov	r1, r7
 8003abe:	4630      	mov	r0, r6
 8003ac0:	eb04 0903 	add.w	r9, r4, r3
 8003ac4:	f000 f884 	bl	8003bd0 <_sbrk_r>
 8003ac8:	4581      	cmp	r9, r0
 8003aca:	d142      	bne.n	8003b52 <_malloc_r+0xea>
 8003acc:	6821      	ldr	r1, [r4, #0]
 8003ace:	4630      	mov	r0, r6
 8003ad0:	1a6d      	subs	r5, r5, r1
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	f7ff ffa6 	bl	8003a24 <sbrk_aligned>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d03a      	beq.n	8003b52 <_malloc_r+0xea>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	442b      	add	r3, r5
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	bb62      	cbnz	r2, 8003b44 <_malloc_r+0xdc>
 8003aea:	f8c8 7000 	str.w	r7, [r8]
 8003aee:	e00f      	b.n	8003b10 <_malloc_r+0xa8>
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	1b52      	subs	r2, r2, r5
 8003af4:	d420      	bmi.n	8003b38 <_malloc_r+0xd0>
 8003af6:	2a0b      	cmp	r2, #11
 8003af8:	d917      	bls.n	8003b2a <_malloc_r+0xc2>
 8003afa:	1961      	adds	r1, r4, r5
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	6025      	str	r5, [r4, #0]
 8003b00:	bf18      	it	ne
 8003b02:	6059      	strne	r1, [r3, #4]
 8003b04:	6863      	ldr	r3, [r4, #4]
 8003b06:	bf08      	it	eq
 8003b08:	f8c8 1000 	streq.w	r1, [r8]
 8003b0c:	5162      	str	r2, [r4, r5]
 8003b0e:	604b      	str	r3, [r1, #4]
 8003b10:	4630      	mov	r0, r6
 8003b12:	f000 f82f 	bl	8003b74 <__malloc_unlock>
 8003b16:	f104 000b 	add.w	r0, r4, #11
 8003b1a:	1d23      	adds	r3, r4, #4
 8003b1c:	f020 0007 	bic.w	r0, r0, #7
 8003b20:	1ac2      	subs	r2, r0, r3
 8003b22:	bf1c      	itt	ne
 8003b24:	1a1b      	subne	r3, r3, r0
 8003b26:	50a3      	strne	r3, [r4, r2]
 8003b28:	e7af      	b.n	8003a8a <_malloc_r+0x22>
 8003b2a:	6862      	ldr	r2, [r4, #4]
 8003b2c:	42a3      	cmp	r3, r4
 8003b2e:	bf0c      	ite	eq
 8003b30:	f8c8 2000 	streq.w	r2, [r8]
 8003b34:	605a      	strne	r2, [r3, #4]
 8003b36:	e7eb      	b.n	8003b10 <_malloc_r+0xa8>
 8003b38:	4623      	mov	r3, r4
 8003b3a:	6864      	ldr	r4, [r4, #4]
 8003b3c:	e7ae      	b.n	8003a9c <_malloc_r+0x34>
 8003b3e:	463c      	mov	r4, r7
 8003b40:	687f      	ldr	r7, [r7, #4]
 8003b42:	e7b6      	b.n	8003ab2 <_malloc_r+0x4a>
 8003b44:	461a      	mov	r2, r3
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	42a3      	cmp	r3, r4
 8003b4a:	d1fb      	bne.n	8003b44 <_malloc_r+0xdc>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6053      	str	r3, [r2, #4]
 8003b50:	e7de      	b.n	8003b10 <_malloc_r+0xa8>
 8003b52:	230c      	movs	r3, #12
 8003b54:	4630      	mov	r0, r6
 8003b56:	6033      	str	r3, [r6, #0]
 8003b58:	f000 f80c 	bl	8003b74 <__malloc_unlock>
 8003b5c:	e794      	b.n	8003a88 <_malloc_r+0x20>
 8003b5e:	6005      	str	r5, [r0, #0]
 8003b60:	e7d6      	b.n	8003b10 <_malloc_r+0xa8>
 8003b62:	bf00      	nop
 8003b64:	200001b4 	.word	0x200001b4

08003b68 <__malloc_lock>:
 8003b68:	4801      	ldr	r0, [pc, #4]	@ (8003b70 <__malloc_lock+0x8>)
 8003b6a:	f000 b86b 	b.w	8003c44 <__retarget_lock_acquire_recursive>
 8003b6e:	bf00      	nop
 8003b70:	200002f4 	.word	0x200002f4

08003b74 <__malloc_unlock>:
 8003b74:	4801      	ldr	r0, [pc, #4]	@ (8003b7c <__malloc_unlock+0x8>)
 8003b76:	f000 b866 	b.w	8003c46 <__retarget_lock_release_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	200002f4 	.word	0x200002f4

08003b80 <siprintf>:
 8003b80:	b40e      	push	{r1, r2, r3}
 8003b82:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b86:	b500      	push	{lr}
 8003b88:	b09c      	sub	sp, #112	@ 0x70
 8003b8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003b8c:	9002      	str	r0, [sp, #8]
 8003b8e:	9006      	str	r0, [sp, #24]
 8003b90:	9107      	str	r1, [sp, #28]
 8003b92:	9104      	str	r1, [sp, #16]
 8003b94:	4808      	ldr	r0, [pc, #32]	@ (8003bb8 <siprintf+0x38>)
 8003b96:	4909      	ldr	r1, [pc, #36]	@ (8003bbc <siprintf+0x3c>)
 8003b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b9c:	9105      	str	r1, [sp, #20]
 8003b9e:	6800      	ldr	r0, [r0, #0]
 8003ba0:	a902      	add	r1, sp, #8
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	f000 f8f4 	bl	8003d90 <_svfiprintf_r>
 8003ba8:	2200      	movs	r2, #0
 8003baa:	9b02      	ldr	r3, [sp, #8]
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	b01c      	add	sp, #112	@ 0x70
 8003bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bb4:	b003      	add	sp, #12
 8003bb6:	4770      	bx	lr
 8003bb8:	2000002c 	.word	0x2000002c
 8003bbc:	ffff0208 	.word	0xffff0208

08003bc0 <memset>:
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4402      	add	r2, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <_sbrk_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	4d05      	ldr	r5, [pc, #20]	@ (8003bec <_sbrk_r+0x1c>)
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	f7fd fdb2 	bl	8001744 <_sbrk>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_sbrk_r+0x1a>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_sbrk_r+0x1a>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	200002f0 	.word	0x200002f0

08003bf0 <__errno>:
 8003bf0:	4b01      	ldr	r3, [pc, #4]	@ (8003bf8 <__errno+0x8>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	2000002c 	.word	0x2000002c

08003bfc <__libc_init_array>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	2600      	movs	r6, #0
 8003c00:	4d0c      	ldr	r5, [pc, #48]	@ (8003c34 <__libc_init_array+0x38>)
 8003c02:	4c0d      	ldr	r4, [pc, #52]	@ (8003c38 <__libc_init_array+0x3c>)
 8003c04:	1b64      	subs	r4, r4, r5
 8003c06:	10a4      	asrs	r4, r4, #2
 8003c08:	42a6      	cmp	r6, r4
 8003c0a:	d109      	bne.n	8003c20 <__libc_init_array+0x24>
 8003c0c:	f000 fbba 	bl	8004384 <_init>
 8003c10:	2600      	movs	r6, #0
 8003c12:	4d0a      	ldr	r5, [pc, #40]	@ (8003c3c <__libc_init_array+0x40>)
 8003c14:	4c0a      	ldr	r4, [pc, #40]	@ (8003c40 <__libc_init_array+0x44>)
 8003c16:	1b64      	subs	r4, r4, r5
 8003c18:	10a4      	asrs	r4, r4, #2
 8003c1a:	42a6      	cmp	r6, r4
 8003c1c:	d105      	bne.n	8003c2a <__libc_init_array+0x2e>
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}
 8003c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c24:	4798      	blx	r3
 8003c26:	3601      	adds	r6, #1
 8003c28:	e7ee      	b.n	8003c08 <__libc_init_array+0xc>
 8003c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c2e:	4798      	blx	r3
 8003c30:	3601      	adds	r6, #1
 8003c32:	e7f2      	b.n	8003c1a <__libc_init_array+0x1e>
 8003c34:	08004478 	.word	0x08004478
 8003c38:	08004478 	.word	0x08004478
 8003c3c:	08004478 	.word	0x08004478
 8003c40:	0800447c 	.word	0x0800447c

08003c44 <__retarget_lock_acquire_recursive>:
 8003c44:	4770      	bx	lr

08003c46 <__retarget_lock_release_recursive>:
 8003c46:	4770      	bx	lr

08003c48 <_free_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	2900      	cmp	r1, #0
 8003c4e:	d040      	beq.n	8003cd2 <_free_r+0x8a>
 8003c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c54:	1f0c      	subs	r4, r1, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bfb8      	it	lt
 8003c5a:	18e4      	addlt	r4, r4, r3
 8003c5c:	f7ff ff84 	bl	8003b68 <__malloc_lock>
 8003c60:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd4 <_free_r+0x8c>)
 8003c62:	6813      	ldr	r3, [r2, #0]
 8003c64:	b933      	cbnz	r3, 8003c74 <_free_r+0x2c>
 8003c66:	6063      	str	r3, [r4, #4]
 8003c68:	6014      	str	r4, [r2, #0]
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c70:	f7ff bf80 	b.w	8003b74 <__malloc_unlock>
 8003c74:	42a3      	cmp	r3, r4
 8003c76:	d908      	bls.n	8003c8a <_free_r+0x42>
 8003c78:	6820      	ldr	r0, [r4, #0]
 8003c7a:	1821      	adds	r1, r4, r0
 8003c7c:	428b      	cmp	r3, r1
 8003c7e:	bf01      	itttt	eq
 8003c80:	6819      	ldreq	r1, [r3, #0]
 8003c82:	685b      	ldreq	r3, [r3, #4]
 8003c84:	1809      	addeq	r1, r1, r0
 8003c86:	6021      	streq	r1, [r4, #0]
 8003c88:	e7ed      	b.n	8003c66 <_free_r+0x1e>
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	b10b      	cbz	r3, 8003c94 <_free_r+0x4c>
 8003c90:	42a3      	cmp	r3, r4
 8003c92:	d9fa      	bls.n	8003c8a <_free_r+0x42>
 8003c94:	6811      	ldr	r1, [r2, #0]
 8003c96:	1850      	adds	r0, r2, r1
 8003c98:	42a0      	cmp	r0, r4
 8003c9a:	d10b      	bne.n	8003cb4 <_free_r+0x6c>
 8003c9c:	6820      	ldr	r0, [r4, #0]
 8003c9e:	4401      	add	r1, r0
 8003ca0:	1850      	adds	r0, r2, r1
 8003ca2:	4283      	cmp	r3, r0
 8003ca4:	6011      	str	r1, [r2, #0]
 8003ca6:	d1e0      	bne.n	8003c6a <_free_r+0x22>
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4408      	add	r0, r1
 8003cae:	6010      	str	r0, [r2, #0]
 8003cb0:	6053      	str	r3, [r2, #4]
 8003cb2:	e7da      	b.n	8003c6a <_free_r+0x22>
 8003cb4:	d902      	bls.n	8003cbc <_free_r+0x74>
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	e7d6      	b.n	8003c6a <_free_r+0x22>
 8003cbc:	6820      	ldr	r0, [r4, #0]
 8003cbe:	1821      	adds	r1, r4, r0
 8003cc0:	428b      	cmp	r3, r1
 8003cc2:	bf01      	itttt	eq
 8003cc4:	6819      	ldreq	r1, [r3, #0]
 8003cc6:	685b      	ldreq	r3, [r3, #4]
 8003cc8:	1809      	addeq	r1, r1, r0
 8003cca:	6021      	streq	r1, [r4, #0]
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	6054      	str	r4, [r2, #4]
 8003cd0:	e7cb      	b.n	8003c6a <_free_r+0x22>
 8003cd2:	bd38      	pop	{r3, r4, r5, pc}
 8003cd4:	200001b4 	.word	0x200001b4

08003cd8 <__ssputs_r>:
 8003cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cdc:	461f      	mov	r7, r3
 8003cde:	688e      	ldr	r6, [r1, #8]
 8003ce0:	4682      	mov	sl, r0
 8003ce2:	42be      	cmp	r6, r7
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	4690      	mov	r8, r2
 8003ce8:	680b      	ldr	r3, [r1, #0]
 8003cea:	d82d      	bhi.n	8003d48 <__ssputs_r+0x70>
 8003cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cf4:	d026      	beq.n	8003d44 <__ssputs_r+0x6c>
 8003cf6:	6965      	ldr	r5, [r4, #20]
 8003cf8:	6909      	ldr	r1, [r1, #16]
 8003cfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cfe:	eba3 0901 	sub.w	r9, r3, r1
 8003d02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d06:	1c7b      	adds	r3, r7, #1
 8003d08:	444b      	add	r3, r9
 8003d0a:	106d      	asrs	r5, r5, #1
 8003d0c:	429d      	cmp	r5, r3
 8003d0e:	bf38      	it	cc
 8003d10:	461d      	movcc	r5, r3
 8003d12:	0553      	lsls	r3, r2, #21
 8003d14:	d527      	bpl.n	8003d66 <__ssputs_r+0x8e>
 8003d16:	4629      	mov	r1, r5
 8003d18:	f7ff fea6 	bl	8003a68 <_malloc_r>
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	b360      	cbz	r0, 8003d7a <__ssputs_r+0xa2>
 8003d20:	464a      	mov	r2, r9
 8003d22:	6921      	ldr	r1, [r4, #16]
 8003d24:	f000 faea 	bl	80042fc <memcpy>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d32:	81a3      	strh	r3, [r4, #12]
 8003d34:	6126      	str	r6, [r4, #16]
 8003d36:	444e      	add	r6, r9
 8003d38:	6026      	str	r6, [r4, #0]
 8003d3a:	463e      	mov	r6, r7
 8003d3c:	6165      	str	r5, [r4, #20]
 8003d3e:	eba5 0509 	sub.w	r5, r5, r9
 8003d42:	60a5      	str	r5, [r4, #8]
 8003d44:	42be      	cmp	r6, r7
 8003d46:	d900      	bls.n	8003d4a <__ssputs_r+0x72>
 8003d48:	463e      	mov	r6, r7
 8003d4a:	4632      	mov	r2, r6
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	f000 faac 	bl	80042ac <memmove>
 8003d54:	2000      	movs	r0, #0
 8003d56:	68a3      	ldr	r3, [r4, #8]
 8003d58:	1b9b      	subs	r3, r3, r6
 8003d5a:	60a3      	str	r3, [r4, #8]
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	4433      	add	r3, r6
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d66:	462a      	mov	r2, r5
 8003d68:	f000 fad6 	bl	8004318 <_realloc_r>
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d1e0      	bne.n	8003d34 <__ssputs_r+0x5c>
 8003d72:	4650      	mov	r0, sl
 8003d74:	6921      	ldr	r1, [r4, #16]
 8003d76:	f7ff ff67 	bl	8003c48 <_free_r>
 8003d7a:	230c      	movs	r3, #12
 8003d7c:	f8ca 3000 	str.w	r3, [sl]
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	f04f 30ff 	mov.w	r0, #4294967295
 8003d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d8a:	81a3      	strh	r3, [r4, #12]
 8003d8c:	e7e9      	b.n	8003d62 <__ssputs_r+0x8a>
	...

08003d90 <_svfiprintf_r>:
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d94:	4698      	mov	r8, r3
 8003d96:	898b      	ldrh	r3, [r1, #12]
 8003d98:	4607      	mov	r7, r0
 8003d9a:	061b      	lsls	r3, r3, #24
 8003d9c:	460d      	mov	r5, r1
 8003d9e:	4614      	mov	r4, r2
 8003da0:	b09d      	sub	sp, #116	@ 0x74
 8003da2:	d510      	bpl.n	8003dc6 <_svfiprintf_r+0x36>
 8003da4:	690b      	ldr	r3, [r1, #16]
 8003da6:	b973      	cbnz	r3, 8003dc6 <_svfiprintf_r+0x36>
 8003da8:	2140      	movs	r1, #64	@ 0x40
 8003daa:	f7ff fe5d 	bl	8003a68 <_malloc_r>
 8003dae:	6028      	str	r0, [r5, #0]
 8003db0:	6128      	str	r0, [r5, #16]
 8003db2:	b930      	cbnz	r0, 8003dc2 <_svfiprintf_r+0x32>
 8003db4:	230c      	movs	r3, #12
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	b01d      	add	sp, #116	@ 0x74
 8003dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc2:	2340      	movs	r3, #64	@ 0x40
 8003dc4:	616b      	str	r3, [r5, #20]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dca:	2320      	movs	r3, #32
 8003dcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dd0:	2330      	movs	r3, #48	@ 0x30
 8003dd2:	f04f 0901 	mov.w	r9, #1
 8003dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003f74 <_svfiprintf_r+0x1e4>
 8003dde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003de2:	4623      	mov	r3, r4
 8003de4:	469a      	mov	sl, r3
 8003de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dea:	b10a      	cbz	r2, 8003df0 <_svfiprintf_r+0x60>
 8003dec:	2a25      	cmp	r2, #37	@ 0x25
 8003dee:	d1f9      	bne.n	8003de4 <_svfiprintf_r+0x54>
 8003df0:	ebba 0b04 	subs.w	fp, sl, r4
 8003df4:	d00b      	beq.n	8003e0e <_svfiprintf_r+0x7e>
 8003df6:	465b      	mov	r3, fp
 8003df8:	4622      	mov	r2, r4
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	f7ff ff6b 	bl	8003cd8 <__ssputs_r>
 8003e02:	3001      	adds	r0, #1
 8003e04:	f000 80a7 	beq.w	8003f56 <_svfiprintf_r+0x1c6>
 8003e08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e0a:	445a      	add	r2, fp
 8003e0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 809f 	beq.w	8003f56 <_svfiprintf_r+0x1c6>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e22:	f10a 0a01 	add.w	sl, sl, #1
 8003e26:	9304      	str	r3, [sp, #16]
 8003e28:	9307      	str	r3, [sp, #28]
 8003e2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e30:	4654      	mov	r4, sl
 8003e32:	2205      	movs	r2, #5
 8003e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e38:	484e      	ldr	r0, [pc, #312]	@ (8003f74 <_svfiprintf_r+0x1e4>)
 8003e3a:	f000 fa51 	bl	80042e0 <memchr>
 8003e3e:	9a04      	ldr	r2, [sp, #16]
 8003e40:	b9d8      	cbnz	r0, 8003e7a <_svfiprintf_r+0xea>
 8003e42:	06d0      	lsls	r0, r2, #27
 8003e44:	bf44      	itt	mi
 8003e46:	2320      	movmi	r3, #32
 8003e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e4c:	0711      	lsls	r1, r2, #28
 8003e4e:	bf44      	itt	mi
 8003e50:	232b      	movmi	r3, #43	@ 0x2b
 8003e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e56:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e5c:	d015      	beq.n	8003e8a <_svfiprintf_r+0xfa>
 8003e5e:	4654      	mov	r4, sl
 8003e60:	2000      	movs	r0, #0
 8003e62:	f04f 0c0a 	mov.w	ip, #10
 8003e66:	9a07      	ldr	r2, [sp, #28]
 8003e68:	4621      	mov	r1, r4
 8003e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e6e:	3b30      	subs	r3, #48	@ 0x30
 8003e70:	2b09      	cmp	r3, #9
 8003e72:	d94b      	bls.n	8003f0c <_svfiprintf_r+0x17c>
 8003e74:	b1b0      	cbz	r0, 8003ea4 <_svfiprintf_r+0x114>
 8003e76:	9207      	str	r2, [sp, #28]
 8003e78:	e014      	b.n	8003ea4 <_svfiprintf_r+0x114>
 8003e7a:	eba0 0308 	sub.w	r3, r0, r8
 8003e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8003e82:	4313      	orrs	r3, r2
 8003e84:	46a2      	mov	sl, r4
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	e7d2      	b.n	8003e30 <_svfiprintf_r+0xa0>
 8003e8a:	9b03      	ldr	r3, [sp, #12]
 8003e8c:	1d19      	adds	r1, r3, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	9103      	str	r1, [sp, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfbb      	ittet	lt
 8003e96:	425b      	neglt	r3, r3
 8003e98:	f042 0202 	orrlt.w	r2, r2, #2
 8003e9c:	9307      	strge	r3, [sp, #28]
 8003e9e:	9307      	strlt	r3, [sp, #28]
 8003ea0:	bfb8      	it	lt
 8003ea2:	9204      	strlt	r2, [sp, #16]
 8003ea4:	7823      	ldrb	r3, [r4, #0]
 8003ea6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ea8:	d10a      	bne.n	8003ec0 <_svfiprintf_r+0x130>
 8003eaa:	7863      	ldrb	r3, [r4, #1]
 8003eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eae:	d132      	bne.n	8003f16 <_svfiprintf_r+0x186>
 8003eb0:	9b03      	ldr	r3, [sp, #12]
 8003eb2:	3402      	adds	r4, #2
 8003eb4:	1d1a      	adds	r2, r3, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	9203      	str	r2, [sp, #12]
 8003eba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ebe:	9305      	str	r3, [sp, #20]
 8003ec0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003f78 <_svfiprintf_r+0x1e8>
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	4650      	mov	r0, sl
 8003ec8:	7821      	ldrb	r1, [r4, #0]
 8003eca:	f000 fa09 	bl	80042e0 <memchr>
 8003ece:	b138      	cbz	r0, 8003ee0 <_svfiprintf_r+0x150>
 8003ed0:	2240      	movs	r2, #64	@ 0x40
 8003ed2:	9b04      	ldr	r3, [sp, #16]
 8003ed4:	eba0 000a 	sub.w	r0, r0, sl
 8003ed8:	4082      	lsls	r2, r0
 8003eda:	4313      	orrs	r3, r2
 8003edc:	3401      	adds	r4, #1
 8003ede:	9304      	str	r3, [sp, #16]
 8003ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee4:	2206      	movs	r2, #6
 8003ee6:	4825      	ldr	r0, [pc, #148]	@ (8003f7c <_svfiprintf_r+0x1ec>)
 8003ee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003eec:	f000 f9f8 	bl	80042e0 <memchr>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d036      	beq.n	8003f62 <_svfiprintf_r+0x1d2>
 8003ef4:	4b22      	ldr	r3, [pc, #136]	@ (8003f80 <_svfiprintf_r+0x1f0>)
 8003ef6:	bb1b      	cbnz	r3, 8003f40 <_svfiprintf_r+0x1b0>
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	3307      	adds	r3, #7
 8003efc:	f023 0307 	bic.w	r3, r3, #7
 8003f00:	3308      	adds	r3, #8
 8003f02:	9303      	str	r3, [sp, #12]
 8003f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f06:	4433      	add	r3, r6
 8003f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f0a:	e76a      	b.n	8003de2 <_svfiprintf_r+0x52>
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	2001      	movs	r0, #1
 8003f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f14:	e7a8      	b.n	8003e68 <_svfiprintf_r+0xd8>
 8003f16:	2300      	movs	r3, #0
 8003f18:	f04f 0c0a 	mov.w	ip, #10
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	3401      	adds	r4, #1
 8003f20:	9305      	str	r3, [sp, #20]
 8003f22:	4620      	mov	r0, r4
 8003f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f28:	3a30      	subs	r2, #48	@ 0x30
 8003f2a:	2a09      	cmp	r2, #9
 8003f2c:	d903      	bls.n	8003f36 <_svfiprintf_r+0x1a6>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0c6      	beq.n	8003ec0 <_svfiprintf_r+0x130>
 8003f32:	9105      	str	r1, [sp, #20]
 8003f34:	e7c4      	b.n	8003ec0 <_svfiprintf_r+0x130>
 8003f36:	4604      	mov	r4, r0
 8003f38:	2301      	movs	r3, #1
 8003f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f3e:	e7f0      	b.n	8003f22 <_svfiprintf_r+0x192>
 8003f40:	ab03      	add	r3, sp, #12
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	462a      	mov	r2, r5
 8003f46:	4638      	mov	r0, r7
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <_svfiprintf_r+0x1f4>)
 8003f4a:	a904      	add	r1, sp, #16
 8003f4c:	f3af 8000 	nop.w
 8003f50:	1c42      	adds	r2, r0, #1
 8003f52:	4606      	mov	r6, r0
 8003f54:	d1d6      	bne.n	8003f04 <_svfiprintf_r+0x174>
 8003f56:	89ab      	ldrh	r3, [r5, #12]
 8003f58:	065b      	lsls	r3, r3, #25
 8003f5a:	f53f af2d 	bmi.w	8003db8 <_svfiprintf_r+0x28>
 8003f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f60:	e72c      	b.n	8003dbc <_svfiprintf_r+0x2c>
 8003f62:	ab03      	add	r3, sp, #12
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	462a      	mov	r2, r5
 8003f68:	4638      	mov	r0, r7
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <_svfiprintf_r+0x1f4>)
 8003f6c:	a904      	add	r1, sp, #16
 8003f6e:	f000 f87d 	bl	800406c <_printf_i>
 8003f72:	e7ed      	b.n	8003f50 <_svfiprintf_r+0x1c0>
 8003f74:	08004442 	.word	0x08004442
 8003f78:	08004448 	.word	0x08004448
 8003f7c:	0800444c 	.word	0x0800444c
 8003f80:	00000000 	.word	0x00000000
 8003f84:	08003cd9 	.word	0x08003cd9

08003f88 <_printf_common>:
 8003f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	4698      	mov	r8, r3
 8003f90:	688a      	ldr	r2, [r1, #8]
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	4607      	mov	r7, r0
 8003f96:	4293      	cmp	r3, r2
 8003f98:	bfb8      	it	lt
 8003f9a:	4613      	movlt	r3, r2
 8003f9c:	6033      	str	r3, [r6, #0]
 8003f9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fa8:	b10a      	cbz	r2, 8003fae <_printf_common+0x26>
 8003faa:	3301      	adds	r3, #1
 8003fac:	6033      	str	r3, [r6, #0]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	0699      	lsls	r1, r3, #26
 8003fb2:	bf42      	ittt	mi
 8003fb4:	6833      	ldrmi	r3, [r6, #0]
 8003fb6:	3302      	addmi	r3, #2
 8003fb8:	6033      	strmi	r3, [r6, #0]
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	f015 0506 	ands.w	r5, r5, #6
 8003fc0:	d106      	bne.n	8003fd0 <_printf_common+0x48>
 8003fc2:	f104 0a19 	add.w	sl, r4, #25
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	6832      	ldr	r2, [r6, #0]
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	42ab      	cmp	r3, r5
 8003fce:	dc2b      	bgt.n	8004028 <_printf_common+0xa0>
 8003fd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	3b00      	subs	r3, #0
 8003fd8:	bf18      	it	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	0692      	lsls	r2, r2, #26
 8003fde:	d430      	bmi.n	8004042 <_printf_common+0xba>
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fe8:	47c8      	blx	r9
 8003fea:	3001      	adds	r0, #1
 8003fec:	d023      	beq.n	8004036 <_printf_common+0xae>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	6922      	ldr	r2, [r4, #16]
 8003ff2:	f003 0306 	and.w	r3, r3, #6
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	bf14      	ite	ne
 8003ffa:	2500      	movne	r5, #0
 8003ffc:	6833      	ldreq	r3, [r6, #0]
 8003ffe:	f04f 0600 	mov.w	r6, #0
 8004002:	bf08      	it	eq
 8004004:	68e5      	ldreq	r5, [r4, #12]
 8004006:	f104 041a 	add.w	r4, r4, #26
 800400a:	bf08      	it	eq
 800400c:	1aed      	subeq	r5, r5, r3
 800400e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004012:	bf08      	it	eq
 8004014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004018:	4293      	cmp	r3, r2
 800401a:	bfc4      	itt	gt
 800401c:	1a9b      	subgt	r3, r3, r2
 800401e:	18ed      	addgt	r5, r5, r3
 8004020:	42b5      	cmp	r5, r6
 8004022:	d11a      	bne.n	800405a <_printf_common+0xd2>
 8004024:	2000      	movs	r0, #0
 8004026:	e008      	b.n	800403a <_printf_common+0xb2>
 8004028:	2301      	movs	r3, #1
 800402a:	4652      	mov	r2, sl
 800402c:	4641      	mov	r1, r8
 800402e:	4638      	mov	r0, r7
 8004030:	47c8      	blx	r9
 8004032:	3001      	adds	r0, #1
 8004034:	d103      	bne.n	800403e <_printf_common+0xb6>
 8004036:	f04f 30ff 	mov.w	r0, #4294967295
 800403a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403e:	3501      	adds	r5, #1
 8004040:	e7c1      	b.n	8003fc6 <_printf_common+0x3e>
 8004042:	2030      	movs	r0, #48	@ 0x30
 8004044:	18e1      	adds	r1, r4, r3
 8004046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004050:	4422      	add	r2, r4
 8004052:	3302      	adds	r3, #2
 8004054:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004058:	e7c2      	b.n	8003fe0 <_printf_common+0x58>
 800405a:	2301      	movs	r3, #1
 800405c:	4622      	mov	r2, r4
 800405e:	4641      	mov	r1, r8
 8004060:	4638      	mov	r0, r7
 8004062:	47c8      	blx	r9
 8004064:	3001      	adds	r0, #1
 8004066:	d0e6      	beq.n	8004036 <_printf_common+0xae>
 8004068:	3601      	adds	r6, #1
 800406a:	e7d9      	b.n	8004020 <_printf_common+0x98>

0800406c <_printf_i>:
 800406c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	7e0f      	ldrb	r7, [r1, #24]
 8004072:	4691      	mov	r9, r2
 8004074:	2f78      	cmp	r7, #120	@ 0x78
 8004076:	4680      	mov	r8, r0
 8004078:	460c      	mov	r4, r1
 800407a:	469a      	mov	sl, r3
 800407c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800407e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004082:	d807      	bhi.n	8004094 <_printf_i+0x28>
 8004084:	2f62      	cmp	r7, #98	@ 0x62
 8004086:	d80a      	bhi.n	800409e <_printf_i+0x32>
 8004088:	2f00      	cmp	r7, #0
 800408a:	f000 80d3 	beq.w	8004234 <_printf_i+0x1c8>
 800408e:	2f58      	cmp	r7, #88	@ 0x58
 8004090:	f000 80ba 	beq.w	8004208 <_printf_i+0x19c>
 8004094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800409c:	e03a      	b.n	8004114 <_printf_i+0xa8>
 800409e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040a2:	2b15      	cmp	r3, #21
 80040a4:	d8f6      	bhi.n	8004094 <_printf_i+0x28>
 80040a6:	a101      	add	r1, pc, #4	@ (adr r1, 80040ac <_printf_i+0x40>)
 80040a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040ac:	08004105 	.word	0x08004105
 80040b0:	08004119 	.word	0x08004119
 80040b4:	08004095 	.word	0x08004095
 80040b8:	08004095 	.word	0x08004095
 80040bc:	08004095 	.word	0x08004095
 80040c0:	08004095 	.word	0x08004095
 80040c4:	08004119 	.word	0x08004119
 80040c8:	08004095 	.word	0x08004095
 80040cc:	08004095 	.word	0x08004095
 80040d0:	08004095 	.word	0x08004095
 80040d4:	08004095 	.word	0x08004095
 80040d8:	0800421b 	.word	0x0800421b
 80040dc:	08004143 	.word	0x08004143
 80040e0:	080041d5 	.word	0x080041d5
 80040e4:	08004095 	.word	0x08004095
 80040e8:	08004095 	.word	0x08004095
 80040ec:	0800423d 	.word	0x0800423d
 80040f0:	08004095 	.word	0x08004095
 80040f4:	08004143 	.word	0x08004143
 80040f8:	08004095 	.word	0x08004095
 80040fc:	08004095 	.word	0x08004095
 8004100:	080041dd 	.word	0x080041dd
 8004104:	6833      	ldr	r3, [r6, #0]
 8004106:	1d1a      	adds	r2, r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6032      	str	r2, [r6, #0]
 800410c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004114:	2301      	movs	r3, #1
 8004116:	e09e      	b.n	8004256 <_printf_i+0x1ea>
 8004118:	6833      	ldr	r3, [r6, #0]
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	1d19      	adds	r1, r3, #4
 800411e:	6031      	str	r1, [r6, #0]
 8004120:	0606      	lsls	r6, r0, #24
 8004122:	d501      	bpl.n	8004128 <_printf_i+0xbc>
 8004124:	681d      	ldr	r5, [r3, #0]
 8004126:	e003      	b.n	8004130 <_printf_i+0xc4>
 8004128:	0645      	lsls	r5, r0, #25
 800412a:	d5fb      	bpl.n	8004124 <_printf_i+0xb8>
 800412c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004130:	2d00      	cmp	r5, #0
 8004132:	da03      	bge.n	800413c <_printf_i+0xd0>
 8004134:	232d      	movs	r3, #45	@ 0x2d
 8004136:	426d      	negs	r5, r5
 8004138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800413c:	230a      	movs	r3, #10
 800413e:	4859      	ldr	r0, [pc, #356]	@ (80042a4 <_printf_i+0x238>)
 8004140:	e011      	b.n	8004166 <_printf_i+0xfa>
 8004142:	6821      	ldr	r1, [r4, #0]
 8004144:	6833      	ldr	r3, [r6, #0]
 8004146:	0608      	lsls	r0, r1, #24
 8004148:	f853 5b04 	ldr.w	r5, [r3], #4
 800414c:	d402      	bmi.n	8004154 <_printf_i+0xe8>
 800414e:	0649      	lsls	r1, r1, #25
 8004150:	bf48      	it	mi
 8004152:	b2ad      	uxthmi	r5, r5
 8004154:	2f6f      	cmp	r7, #111	@ 0x6f
 8004156:	6033      	str	r3, [r6, #0]
 8004158:	bf14      	ite	ne
 800415a:	230a      	movne	r3, #10
 800415c:	2308      	moveq	r3, #8
 800415e:	4851      	ldr	r0, [pc, #324]	@ (80042a4 <_printf_i+0x238>)
 8004160:	2100      	movs	r1, #0
 8004162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004166:	6866      	ldr	r6, [r4, #4]
 8004168:	2e00      	cmp	r6, #0
 800416a:	bfa8      	it	ge
 800416c:	6821      	ldrge	r1, [r4, #0]
 800416e:	60a6      	str	r6, [r4, #8]
 8004170:	bfa4      	itt	ge
 8004172:	f021 0104 	bicge.w	r1, r1, #4
 8004176:	6021      	strge	r1, [r4, #0]
 8004178:	b90d      	cbnz	r5, 800417e <_printf_i+0x112>
 800417a:	2e00      	cmp	r6, #0
 800417c:	d04b      	beq.n	8004216 <_printf_i+0x1aa>
 800417e:	4616      	mov	r6, r2
 8004180:	fbb5 f1f3 	udiv	r1, r5, r3
 8004184:	fb03 5711 	mls	r7, r3, r1, r5
 8004188:	5dc7      	ldrb	r7, [r0, r7]
 800418a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800418e:	462f      	mov	r7, r5
 8004190:	42bb      	cmp	r3, r7
 8004192:	460d      	mov	r5, r1
 8004194:	d9f4      	bls.n	8004180 <_printf_i+0x114>
 8004196:	2b08      	cmp	r3, #8
 8004198:	d10b      	bne.n	80041b2 <_printf_i+0x146>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	07df      	lsls	r7, r3, #31
 800419e:	d508      	bpl.n	80041b2 <_printf_i+0x146>
 80041a0:	6923      	ldr	r3, [r4, #16]
 80041a2:	6861      	ldr	r1, [r4, #4]
 80041a4:	4299      	cmp	r1, r3
 80041a6:	bfde      	ittt	le
 80041a8:	2330      	movle	r3, #48	@ 0x30
 80041aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041b2:	1b92      	subs	r2, r2, r6
 80041b4:	6122      	str	r2, [r4, #16]
 80041b6:	464b      	mov	r3, r9
 80041b8:	4621      	mov	r1, r4
 80041ba:	4640      	mov	r0, r8
 80041bc:	f8cd a000 	str.w	sl, [sp]
 80041c0:	aa03      	add	r2, sp, #12
 80041c2:	f7ff fee1 	bl	8003f88 <_printf_common>
 80041c6:	3001      	adds	r0, #1
 80041c8:	d14a      	bne.n	8004260 <_printf_i+0x1f4>
 80041ca:	f04f 30ff 	mov.w	r0, #4294967295
 80041ce:	b004      	add	sp, #16
 80041d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	f043 0320 	orr.w	r3, r3, #32
 80041da:	6023      	str	r3, [r4, #0]
 80041dc:	2778      	movs	r7, #120	@ 0x78
 80041de:	4832      	ldr	r0, [pc, #200]	@ (80042a8 <_printf_i+0x23c>)
 80041e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	6831      	ldr	r1, [r6, #0]
 80041e8:	061f      	lsls	r7, r3, #24
 80041ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80041ee:	d402      	bmi.n	80041f6 <_printf_i+0x18a>
 80041f0:	065f      	lsls	r7, r3, #25
 80041f2:	bf48      	it	mi
 80041f4:	b2ad      	uxthmi	r5, r5
 80041f6:	6031      	str	r1, [r6, #0]
 80041f8:	07d9      	lsls	r1, r3, #31
 80041fa:	bf44      	itt	mi
 80041fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004200:	6023      	strmi	r3, [r4, #0]
 8004202:	b11d      	cbz	r5, 800420c <_printf_i+0x1a0>
 8004204:	2310      	movs	r3, #16
 8004206:	e7ab      	b.n	8004160 <_printf_i+0xf4>
 8004208:	4826      	ldr	r0, [pc, #152]	@ (80042a4 <_printf_i+0x238>)
 800420a:	e7e9      	b.n	80041e0 <_printf_i+0x174>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	f023 0320 	bic.w	r3, r3, #32
 8004212:	6023      	str	r3, [r4, #0]
 8004214:	e7f6      	b.n	8004204 <_printf_i+0x198>
 8004216:	4616      	mov	r6, r2
 8004218:	e7bd      	b.n	8004196 <_printf_i+0x12a>
 800421a:	6833      	ldr	r3, [r6, #0]
 800421c:	6825      	ldr	r5, [r4, #0]
 800421e:	1d18      	adds	r0, r3, #4
 8004220:	6961      	ldr	r1, [r4, #20]
 8004222:	6030      	str	r0, [r6, #0]
 8004224:	062e      	lsls	r6, r5, #24
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	d501      	bpl.n	800422e <_printf_i+0x1c2>
 800422a:	6019      	str	r1, [r3, #0]
 800422c:	e002      	b.n	8004234 <_printf_i+0x1c8>
 800422e:	0668      	lsls	r0, r5, #25
 8004230:	d5fb      	bpl.n	800422a <_printf_i+0x1be>
 8004232:	8019      	strh	r1, [r3, #0]
 8004234:	2300      	movs	r3, #0
 8004236:	4616      	mov	r6, r2
 8004238:	6123      	str	r3, [r4, #16]
 800423a:	e7bc      	b.n	80041b6 <_printf_i+0x14a>
 800423c:	6833      	ldr	r3, [r6, #0]
 800423e:	2100      	movs	r1, #0
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	6032      	str	r2, [r6, #0]
 8004244:	681e      	ldr	r6, [r3, #0]
 8004246:	6862      	ldr	r2, [r4, #4]
 8004248:	4630      	mov	r0, r6
 800424a:	f000 f849 	bl	80042e0 <memchr>
 800424e:	b108      	cbz	r0, 8004254 <_printf_i+0x1e8>
 8004250:	1b80      	subs	r0, r0, r6
 8004252:	6060      	str	r0, [r4, #4]
 8004254:	6863      	ldr	r3, [r4, #4]
 8004256:	6123      	str	r3, [r4, #16]
 8004258:	2300      	movs	r3, #0
 800425a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800425e:	e7aa      	b.n	80041b6 <_printf_i+0x14a>
 8004260:	4632      	mov	r2, r6
 8004262:	4649      	mov	r1, r9
 8004264:	4640      	mov	r0, r8
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	47d0      	blx	sl
 800426a:	3001      	adds	r0, #1
 800426c:	d0ad      	beq.n	80041ca <_printf_i+0x15e>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	079b      	lsls	r3, r3, #30
 8004272:	d413      	bmi.n	800429c <_printf_i+0x230>
 8004274:	68e0      	ldr	r0, [r4, #12]
 8004276:	9b03      	ldr	r3, [sp, #12]
 8004278:	4298      	cmp	r0, r3
 800427a:	bfb8      	it	lt
 800427c:	4618      	movlt	r0, r3
 800427e:	e7a6      	b.n	80041ce <_printf_i+0x162>
 8004280:	2301      	movs	r3, #1
 8004282:	4632      	mov	r2, r6
 8004284:	4649      	mov	r1, r9
 8004286:	4640      	mov	r0, r8
 8004288:	47d0      	blx	sl
 800428a:	3001      	adds	r0, #1
 800428c:	d09d      	beq.n	80041ca <_printf_i+0x15e>
 800428e:	3501      	adds	r5, #1
 8004290:	68e3      	ldr	r3, [r4, #12]
 8004292:	9903      	ldr	r1, [sp, #12]
 8004294:	1a5b      	subs	r3, r3, r1
 8004296:	42ab      	cmp	r3, r5
 8004298:	dcf2      	bgt.n	8004280 <_printf_i+0x214>
 800429a:	e7eb      	b.n	8004274 <_printf_i+0x208>
 800429c:	2500      	movs	r5, #0
 800429e:	f104 0619 	add.w	r6, r4, #25
 80042a2:	e7f5      	b.n	8004290 <_printf_i+0x224>
 80042a4:	08004453 	.word	0x08004453
 80042a8:	08004464 	.word	0x08004464

080042ac <memmove>:
 80042ac:	4288      	cmp	r0, r1
 80042ae:	b510      	push	{r4, lr}
 80042b0:	eb01 0402 	add.w	r4, r1, r2
 80042b4:	d902      	bls.n	80042bc <memmove+0x10>
 80042b6:	4284      	cmp	r4, r0
 80042b8:	4623      	mov	r3, r4
 80042ba:	d807      	bhi.n	80042cc <memmove+0x20>
 80042bc:	1e43      	subs	r3, r0, #1
 80042be:	42a1      	cmp	r1, r4
 80042c0:	d008      	beq.n	80042d4 <memmove+0x28>
 80042c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ca:	e7f8      	b.n	80042be <memmove+0x12>
 80042cc:	4601      	mov	r1, r0
 80042ce:	4402      	add	r2, r0
 80042d0:	428a      	cmp	r2, r1
 80042d2:	d100      	bne.n	80042d6 <memmove+0x2a>
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042de:	e7f7      	b.n	80042d0 <memmove+0x24>

080042e0 <memchr>:
 80042e0:	4603      	mov	r3, r0
 80042e2:	b510      	push	{r4, lr}
 80042e4:	b2c9      	uxtb	r1, r1
 80042e6:	4402      	add	r2, r0
 80042e8:	4293      	cmp	r3, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	d101      	bne.n	80042f2 <memchr+0x12>
 80042ee:	2000      	movs	r0, #0
 80042f0:	e003      	b.n	80042fa <memchr+0x1a>
 80042f2:	7804      	ldrb	r4, [r0, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	428c      	cmp	r4, r1
 80042f8:	d1f6      	bne.n	80042e8 <memchr+0x8>
 80042fa:	bd10      	pop	{r4, pc}

080042fc <memcpy>:
 80042fc:	440a      	add	r2, r1
 80042fe:	4291      	cmp	r1, r2
 8004300:	f100 33ff 	add.w	r3, r0, #4294967295
 8004304:	d100      	bne.n	8004308 <memcpy+0xc>
 8004306:	4770      	bx	lr
 8004308:	b510      	push	{r4, lr}
 800430a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800430e:	4291      	cmp	r1, r2
 8004310:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004314:	d1f9      	bne.n	800430a <memcpy+0xe>
 8004316:	bd10      	pop	{r4, pc}

08004318 <_realloc_r>:
 8004318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800431c:	4680      	mov	r8, r0
 800431e:	4615      	mov	r5, r2
 8004320:	460c      	mov	r4, r1
 8004322:	b921      	cbnz	r1, 800432e <_realloc_r+0x16>
 8004324:	4611      	mov	r1, r2
 8004326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800432a:	f7ff bb9d 	b.w	8003a68 <_malloc_r>
 800432e:	b92a      	cbnz	r2, 800433c <_realloc_r+0x24>
 8004330:	f7ff fc8a 	bl	8003c48 <_free_r>
 8004334:	2400      	movs	r4, #0
 8004336:	4620      	mov	r0, r4
 8004338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800433c:	f000 f81a 	bl	8004374 <_malloc_usable_size_r>
 8004340:	4285      	cmp	r5, r0
 8004342:	4606      	mov	r6, r0
 8004344:	d802      	bhi.n	800434c <_realloc_r+0x34>
 8004346:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800434a:	d8f4      	bhi.n	8004336 <_realloc_r+0x1e>
 800434c:	4629      	mov	r1, r5
 800434e:	4640      	mov	r0, r8
 8004350:	f7ff fb8a 	bl	8003a68 <_malloc_r>
 8004354:	4607      	mov	r7, r0
 8004356:	2800      	cmp	r0, #0
 8004358:	d0ec      	beq.n	8004334 <_realloc_r+0x1c>
 800435a:	42b5      	cmp	r5, r6
 800435c:	462a      	mov	r2, r5
 800435e:	4621      	mov	r1, r4
 8004360:	bf28      	it	cs
 8004362:	4632      	movcs	r2, r6
 8004364:	f7ff ffca 	bl	80042fc <memcpy>
 8004368:	4621      	mov	r1, r4
 800436a:	4640      	mov	r0, r8
 800436c:	f7ff fc6c 	bl	8003c48 <_free_r>
 8004370:	463c      	mov	r4, r7
 8004372:	e7e0      	b.n	8004336 <_realloc_r+0x1e>

08004374 <_malloc_usable_size_r>:
 8004374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004378:	1f18      	subs	r0, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	bfbc      	itt	lt
 800437e:	580b      	ldrlt	r3, [r1, r0]
 8004380:	18c0      	addlt	r0, r0, r3
 8004382:	4770      	bx	lr

08004384 <_init>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr

08004390 <_fini>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr
