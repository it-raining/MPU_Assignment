
MPU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080041f4  080041f4  000051f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d0  080042d0  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  080042d0  080042d0  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042d0  080042d0  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d0  080042d0  000052d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042d4  080042d4  000052d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080042d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000070  08004348  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004348  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5c3  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ab  00000000  00000000  0001565c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00017c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c53  00000000  00000000  00018bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196f7  00000000  00000000  0001981b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a65  00000000  00000000  00032f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008daf1  00000000  00000000  00047977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5468  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  000d54ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d9b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080041dc 	.word	0x080041dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080041dc 	.word	0x080041dc

0800014c <fsm_for_button>:

#include "fsm_for_button.h"

enum ButtonState button_state[NO_OF_BUTTONS] = { 1, 1, 1 };

void fsm_for_button(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	////////////////// BUTTON 1 ////////////////////////////
	switch (button_state[MODIFY_BUTTON]) {
 8000150:	4b92      	ldr	r3, [pc, #584]	@ (800039c <fsm_for_button+0x250>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b02      	cmp	r3, #2
 8000156:	d055      	beq.n	8000204 <fsm_for_button+0xb8>
 8000158:	2b02      	cmp	r3, #2
 800015a:	dc62      	bgt.n	8000222 <fsm_for_button+0xd6>
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <fsm_for_button+0x1a>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d03b      	beq.n	80001dc <fsm_for_button+0x90>
 8000164:	e05d      	b.n	8000222 <fsm_for_button+0xd6>
	case BUTTON_RELEASED:
		if (is_button_pressed(MODIFY_BUTTON)) {
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fdf4 	bl	8000d54 <is_button_pressed>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d052      	beq.n	8000218 <fsm_for_button+0xcc>
			LED_RED_1_GPIO_Port->ODR |= ALL_LED;
 8000172:	4b8b      	ldr	r3, [pc, #556]	@ (80003a0 <fsm_for_button+0x254>)
 8000174:	68db      	ldr	r3, [r3, #12]
 8000176:	4a8a      	ldr	r2, [pc, #552]	@ (80003a0 <fsm_for_button+0x254>)
 8000178:	f443 53fc 	orr.w	r3, r3, #8064	@ 0x1f80
 800017c:	60d3      	str	r3, [r2, #12]
			switch (mode) {
 800017e:	4b89      	ldr	r3, [pc, #548]	@ (80003a4 <fsm_for_button+0x258>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b03      	cmp	r3, #3
 8000184:	d01e      	beq.n	80001c4 <fsm_for_button+0x78>
 8000186:	2b03      	cmp	r3, #3
 8000188:	dc20      	bgt.n	80001cc <fsm_for_button+0x80>
 800018a:	2b01      	cmp	r3, #1
 800018c:	d002      	beq.n	8000194 <fsm_for_button+0x48>
 800018e:	2b02      	cmp	r3, #2
 8000190:	d00a      	beq.n	80001a8 <fsm_for_button+0x5c>
 8000192:	e01b      	b.n	80001cc <fsm_for_button+0x80>
			case AUTO:
				mode = MANUAL;
 8000194:	4b83      	ldr	r3, [pc, #524]	@ (80003a4 <fsm_for_button+0x258>)
 8000196:	2202      	movs	r2, #2
 8000198:	701a      	strb	r2, [r3, #0]
				line_1 = RED;
 800019a:	4b83      	ldr	r3, [pc, #524]	@ (80003a8 <fsm_for_button+0x25c>)
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
				line_2 = GREEN;
 80001a0:	4b82      	ldr	r3, [pc, #520]	@ (80003ac <fsm_for_button+0x260>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
				break;
 80001a6:	e015      	b.n	80001d4 <fsm_for_button+0x88>
			case MANUAL:
				mode = MODIFY;
 80001a8:	4b7e      	ldr	r3, [pc, #504]	@ (80003a4 <fsm_for_button+0x258>)
 80001aa:	2203      	movs	r2, #3
 80001ac:	701a      	strb	r2, [r3, #0]
				buffer = red_light;
 80001ae:	4b80      	ldr	r3, [pc, #512]	@ (80003b0 <fsm_for_button+0x264>)
 80001b0:	781a      	ldrb	r2, [r3, #0]
 80001b2:	4b80      	ldr	r3, [pc, #512]	@ (80003b4 <fsm_for_button+0x268>)
 80001b4:	701a      	strb	r2, [r3, #0]
				line_1 = RED;
 80001b6:	4b7c      	ldr	r3, [pc, #496]	@ (80003a8 <fsm_for_button+0x25c>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	701a      	strb	r2, [r3, #0]
				line_2 = RED;
 80001bc:	4b7b      	ldr	r3, [pc, #492]	@ (80003ac <fsm_for_button+0x260>)
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]
				break;
 80001c2:	e007      	b.n	80001d4 <fsm_for_button+0x88>
			case MODIFY:
				mode = INIT;
 80001c4:	4b77      	ldr	r3, [pc, #476]	@ (80003a4 <fsm_for_button+0x258>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
				break;
 80001ca:	e003      	b.n	80001d4 <fsm_for_button+0x88>
			default:
				mode = INIT;
 80001cc:	4b75      	ldr	r3, [pc, #468]	@ (80003a4 <fsm_for_button+0x258>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	701a      	strb	r2, [r3, #0]
				break;
 80001d2:	bf00      	nop
			}
			button_state[MODIFY_BUTTON] = BUTTON_PRESSED;
 80001d4:	4b71      	ldr	r3, [pc, #452]	@ (800039c <fsm_for_button+0x250>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80001da:	e01d      	b.n	8000218 <fsm_for_button+0xcc>
	case BUTTON_PRESSED:
		if (!is_button_pressed(MODIFY_BUTTON)) {
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 fdb9 	bl	8000d54 <is_button_pressed>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d103      	bne.n	80001f0 <fsm_for_button+0xa4>
			button_state[MODIFY_BUTTON] = BUTTON_RELEASED;
 80001e8:	4b6c      	ldr	r3, [pc, #432]	@ (800039c <fsm_for_button+0x250>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]
		} else {
			if (is_button_pressed_1s(MODIFY_BUTTON)) {
				button_state[MODIFY_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
			}
		}
		break;
 80001ee:	e015      	b.n	800021c <fsm_for_button+0xd0>
			if (is_button_pressed_1s(MODIFY_BUTTON)) {
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 fdc9 	bl	8000d88 <is_button_pressed_1s>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d00f      	beq.n	800021c <fsm_for_button+0xd0>
				button_state[MODIFY_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80001fc:	4b67      	ldr	r3, [pc, #412]	@ (800039c <fsm_for_button+0x250>)
 80001fe:	2202      	movs	r2, #2
 8000200:	701a      	strb	r2, [r3, #0]
		break;
 8000202:	e00b      	b.n	800021c <fsm_for_button+0xd0>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (!is_button_pressed(MODIFY_BUTTON)) {
 8000204:	2000      	movs	r0, #0
 8000206:	f000 fda5 	bl	8000d54 <is_button_pressed>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d107      	bne.n	8000220 <fsm_for_button+0xd4>
			button_state[MODIFY_BUTTON] = BUTTON_RELEASED;
 8000210:	4b62      	ldr	r3, [pc, #392]	@ (800039c <fsm_for_button+0x250>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000216:	e003      	b.n	8000220 <fsm_for_button+0xd4>
		break;
 8000218:	bf00      	nop
 800021a:	e002      	b.n	8000222 <fsm_for_button+0xd6>
		break;
 800021c:	bf00      	nop
 800021e:	e000      	b.n	8000222 <fsm_for_button+0xd6>
		break;
 8000220:	bf00      	nop
	}
	////////////////// BUTTON 2 ////////////////////////////

	switch (button_state[STATE_BUTTON]) {
 8000222:	4b5e      	ldr	r3, [pc, #376]	@ (800039c <fsm_for_button+0x250>)
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2b02      	cmp	r3, #2
 8000228:	f000 8097 	beq.w	800035a <fsm_for_button+0x20e>
 800022c:	2b02      	cmp	r3, #2
 800022e:	f300 80a3 	bgt.w	8000378 <fsm_for_button+0x22c>
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <fsm_for_button+0xf0>
 8000236:	2b01      	cmp	r3, #1
 8000238:	d00b      	beq.n	8000252 <fsm_for_button+0x106>
 800023a:	e09d      	b.n	8000378 <fsm_for_button+0x22c>
	case BUTTON_RELEASED:
		if (is_button_pressed(STATE_BUTTON)) {
 800023c:	2001      	movs	r0, #1
 800023e:	f000 fd89 	bl	8000d54 <is_button_pressed>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	f000 8092 	beq.w	800036e <fsm_for_button+0x222>
			button_state[STATE_BUTTON] = BUTTON_PRESSED;
 800024a:	4b54      	ldr	r3, [pc, #336]	@ (800039c <fsm_for_button+0x250>)
 800024c:	2201      	movs	r2, #1
 800024e:	705a      	strb	r2, [r3, #1]
		}
		break;
 8000250:	e08d      	b.n	800036e <fsm_for_button+0x222>
	case BUTTON_PRESSED:
		if (!is_button_pressed(STATE_BUTTON)) {
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fd7e 	bl	8000d54 <is_button_pressed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d154      	bne.n	8000308 <fsm_for_button+0x1bc>
			switch (mode) {
 800025e:	4b51      	ldr	r3, [pc, #324]	@ (80003a4 <fsm_for_button+0x258>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b02      	cmp	r3, #2
 8000264:	d002      	beq.n	800026c <fsm_for_button+0x120>
 8000266:	2b03      	cmp	r3, #3
 8000268:	d01f      	beq.n	80002aa <fsm_for_button+0x15e>
				default:
					break;
				}
				break;
			default:
				break;
 800026a:	e049      	b.n	8000300 <fsm_for_button+0x1b4>
				line_1 = (line_1 + 1) % NO_OF_STATE;
 800026c:	4b4e      	ldr	r3, [pc, #312]	@ (80003a8 <fsm_for_button+0x25c>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	4b51      	ldr	r3, [pc, #324]	@ (80003b8 <fsm_for_button+0x26c>)
 8000274:	fb83 3102 	smull	r3, r1, r3, r2
 8000278:	17d3      	asrs	r3, r2, #31
 800027a:	1ac9      	subs	r1, r1, r3
 800027c:	460b      	mov	r3, r1
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	440b      	add	r3, r1
 8000282:	1ad1      	subs	r1, r2, r3
 8000284:	b2ca      	uxtb	r2, r1
 8000286:	4b48      	ldr	r3, [pc, #288]	@ (80003a8 <fsm_for_button+0x25c>)
 8000288:	701a      	strb	r2, [r3, #0]
				line_2 = (line_2 + 1) % NO_OF_STATE;
 800028a:	4b48      	ldr	r3, [pc, #288]	@ (80003ac <fsm_for_button+0x260>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	1c5a      	adds	r2, r3, #1
 8000290:	4b49      	ldr	r3, [pc, #292]	@ (80003b8 <fsm_for_button+0x26c>)
 8000292:	fb83 3102 	smull	r3, r1, r3, r2
 8000296:	17d3      	asrs	r3, r2, #31
 8000298:	1ac9      	subs	r1, r1, r3
 800029a:	460b      	mov	r3, r1
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	440b      	add	r3, r1
 80002a0:	1ad1      	subs	r1, r2, r3
 80002a2:	b2ca      	uxtb	r2, r1
 80002a4:	4b41      	ldr	r3, [pc, #260]	@ (80003ac <fsm_for_button+0x260>)
 80002a6:	701a      	strb	r2, [r3, #0]
				break;
 80002a8:	e02a      	b.n	8000300 <fsm_for_button+0x1b4>
				line_1 = (line_1 + 1) % NO_OF_STATE;
 80002aa:	4b3f      	ldr	r3, [pc, #252]	@ (80003a8 <fsm_for_button+0x25c>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	4b41      	ldr	r3, [pc, #260]	@ (80003b8 <fsm_for_button+0x26c>)
 80002b2:	fb83 3102 	smull	r3, r1, r3, r2
 80002b6:	17d3      	asrs	r3, r2, #31
 80002b8:	1ac9      	subs	r1, r1, r3
 80002ba:	460b      	mov	r3, r1
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	440b      	add	r3, r1
 80002c0:	1ad1      	subs	r1, r2, r3
 80002c2:	b2ca      	uxtb	r2, r1
 80002c4:	4b38      	ldr	r3, [pc, #224]	@ (80003a8 <fsm_for_button+0x25c>)
 80002c6:	701a      	strb	r2, [r3, #0]
				switch (line_1) {
 80002c8:	4b37      	ldr	r3, [pc, #220]	@ (80003a8 <fsm_for_button+0x25c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d00b      	beq.n	80002e8 <fsm_for_button+0x19c>
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	dc13      	bgt.n	80002fc <fsm_for_button+0x1b0>
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d002      	beq.n	80002de <fsm_for_button+0x192>
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d00a      	beq.n	80002f2 <fsm_for_button+0x1a6>
					break;
 80002dc:	e00e      	b.n	80002fc <fsm_for_button+0x1b0>
					buffer = red_light;
 80002de:	4b34      	ldr	r3, [pc, #208]	@ (80003b0 <fsm_for_button+0x264>)
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b34      	ldr	r3, [pc, #208]	@ (80003b4 <fsm_for_button+0x268>)
 80002e4:	701a      	strb	r2, [r3, #0]
					break;
 80002e6:	e00a      	b.n	80002fe <fsm_for_button+0x1b2>
					buffer = amber_light;
 80002e8:	4b34      	ldr	r3, [pc, #208]	@ (80003bc <fsm_for_button+0x270>)
 80002ea:	781a      	ldrb	r2, [r3, #0]
 80002ec:	4b31      	ldr	r3, [pc, #196]	@ (80003b4 <fsm_for_button+0x268>)
 80002ee:	701a      	strb	r2, [r3, #0]
					break;
 80002f0:	e005      	b.n	80002fe <fsm_for_button+0x1b2>
					buffer = green_light;
 80002f2:	4b33      	ldr	r3, [pc, #204]	@ (80003c0 <fsm_for_button+0x274>)
 80002f4:	781a      	ldrb	r2, [r3, #0]
 80002f6:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <fsm_for_button+0x268>)
 80002f8:	701a      	strb	r2, [r3, #0]
					break;
 80002fa:	e000      	b.n	80002fe <fsm_for_button+0x1b2>
					break;
 80002fc:	bf00      	nop
				break;
 80002fe:	bf00      	nop
			}
			button_state[STATE_BUTTON] = BUTTON_PRESSED;
 8000300:	4b26      	ldr	r3, [pc, #152]	@ (800039c <fsm_for_button+0x250>)
 8000302:	2201      	movs	r2, #1
 8000304:	705a      	strb	r2, [r3, #1]
					}
				}
				button_state[STATE_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
			}
		}
		break;
 8000306:	e034      	b.n	8000372 <fsm_for_button+0x226>
			if (is_button_pressed_1s(STATE_BUTTON)) {
 8000308:	2001      	movs	r0, #1
 800030a:	f000 fd3d 	bl	8000d88 <is_button_pressed_1s>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d02e      	beq.n	8000372 <fsm_for_button+0x226>
				if (mode == MODIFY) {
 8000314:	4b23      	ldr	r3, [pc, #140]	@ (80003a4 <fsm_for_button+0x258>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d11a      	bne.n	8000352 <fsm_for_button+0x206>
					switch (line_1) {
 800031c:	4b22      	ldr	r3, [pc, #136]	@ (80003a8 <fsm_for_button+0x25c>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b02      	cmp	r3, #2
 8000322:	d00b      	beq.n	800033c <fsm_for_button+0x1f0>
 8000324:	2b02      	cmp	r3, #2
 8000326:	dc13      	bgt.n	8000350 <fsm_for_button+0x204>
 8000328:	2b00      	cmp	r3, #0
 800032a:	d002      	beq.n	8000332 <fsm_for_button+0x1e6>
 800032c:	2b01      	cmp	r3, #1
 800032e:	d00a      	beq.n	8000346 <fsm_for_button+0x1fa>
						break;
 8000330:	e00e      	b.n	8000350 <fsm_for_button+0x204>
						red_light = buffer;
 8000332:	4b20      	ldr	r3, [pc, #128]	@ (80003b4 <fsm_for_button+0x268>)
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b1e      	ldr	r3, [pc, #120]	@ (80003b0 <fsm_for_button+0x264>)
 8000338:	701a      	strb	r2, [r3, #0]
						break;
 800033a:	e00a      	b.n	8000352 <fsm_for_button+0x206>
						amber_light = buffer;
 800033c:	4b1d      	ldr	r3, [pc, #116]	@ (80003b4 <fsm_for_button+0x268>)
 800033e:	781a      	ldrb	r2, [r3, #0]
 8000340:	4b1e      	ldr	r3, [pc, #120]	@ (80003bc <fsm_for_button+0x270>)
 8000342:	701a      	strb	r2, [r3, #0]
						break;
 8000344:	e005      	b.n	8000352 <fsm_for_button+0x206>
						green_light = buffer;
 8000346:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <fsm_for_button+0x268>)
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	4b1d      	ldr	r3, [pc, #116]	@ (80003c0 <fsm_for_button+0x274>)
 800034c:	701a      	strb	r2, [r3, #0]
						break;
 800034e:	e000      	b.n	8000352 <fsm_for_button+0x206>
						break;
 8000350:	bf00      	nop
				button_state[STATE_BUTTON] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000352:	4b12      	ldr	r3, [pc, #72]	@ (800039c <fsm_for_button+0x250>)
 8000354:	2202      	movs	r2, #2
 8000356:	705a      	strb	r2, [r3, #1]
		break;
 8000358:	e00b      	b.n	8000372 <fsm_for_button+0x226>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (!is_button_pressed(STATE_BUTTON)) {
 800035a:	2001      	movs	r0, #1
 800035c:	f000 fcfa 	bl	8000d54 <is_button_pressed>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d107      	bne.n	8000376 <fsm_for_button+0x22a>
			button_state[STATE_BUTTON] = BUTTON_RELEASED;
 8000366:	4b0d      	ldr	r3, [pc, #52]	@ (800039c <fsm_for_button+0x250>)
 8000368:	2200      	movs	r2, #0
 800036a:	705a      	strb	r2, [r3, #1]
		}
		break;
 800036c:	e003      	b.n	8000376 <fsm_for_button+0x22a>
		break;
 800036e:	bf00      	nop
 8000370:	e002      	b.n	8000378 <fsm_for_button+0x22c>
		break;
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <fsm_for_button+0x22c>
		break;
 8000376:	bf00      	nop
	}

	////////////////// BUTTON 3 ////////////////////////////
	switch (button_state[INC_BUTTON]) {
 8000378:	4b08      	ldr	r3, [pc, #32]	@ (800039c <fsm_for_button+0x250>)
 800037a:	789b      	ldrb	r3, [r3, #2]
 800037c:	2b02      	cmp	r3, #2
 800037e:	d04c      	beq.n	800041a <fsm_for_button+0x2ce>
 8000380:	2b02      	cmp	r3, #2
 8000382:	dc57      	bgt.n	8000434 <fsm_for_button+0x2e8>
 8000384:	2b00      	cmp	r3, #0
 8000386:	d002      	beq.n	800038e <fsm_for_button+0x242>
 8000388:	2b01      	cmp	r3, #1
 800038a:	d01b      	beq.n	80003c4 <fsm_for_button+0x278>
				button_state[INC_BUTTON] = BUTTON_RELEASED;
			}
			break;
		}
	}
}
 800038c:	e052      	b.n	8000434 <fsm_for_button+0x2e8>
		if (is_button_pressed(INC_BUTTON)) {
 800038e:	2002      	movs	r0, #2
 8000390:	f000 fce0 	bl	8000d54 <is_button_pressed>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
}
 8000398:	e04c      	b.n	8000434 <fsm_for_button+0x2e8>
 800039a:	bf00      	nop
 800039c:	20000000 	.word	0x20000000
 80003a0:	40011000 	.word	0x40011000
 80003a4:	20000091 	.word	0x20000091
 80003a8:	20000092 	.word	0x20000092
 80003ac:	2000000c 	.word	0x2000000c
 80003b0:	2000000d 	.word	0x2000000d
 80003b4:	20000095 	.word	0x20000095
 80003b8:	55555556 	.word	0x55555556
 80003bc:	2000000e 	.word	0x2000000e
 80003c0:	2000000f 	.word	0x2000000f
			if (!is_button_pressed(INC_BUTTON)) {
 80003c4:	2002      	movs	r0, #2
 80003c6:	f000 fcc5 	bl	8000d54 <is_button_pressed>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d11a      	bne.n	8000406 <fsm_for_button+0x2ba>
				if (mode == MODIFY) {
 80003d0:	4b19      	ldr	r3, [pc, #100]	@ (8000438 <fsm_for_button+0x2ec>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	d112      	bne.n	80003fe <fsm_for_button+0x2b2>
					if (line_1 == GREEN && buffer >= red_light)
 80003d8:	4b18      	ldr	r3, [pc, #96]	@ (800043c <fsm_for_button+0x2f0>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d108      	bne.n	80003f2 <fsm_for_button+0x2a6>
 80003e0:	4b17      	ldr	r3, [pc, #92]	@ (8000440 <fsm_for_button+0x2f4>)
 80003e2:	781a      	ldrb	r2, [r3, #0]
 80003e4:	4b17      	ldr	r3, [pc, #92]	@ (8000444 <fsm_for_button+0x2f8>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d302      	bcc.n	80003f2 <fsm_for_button+0x2a6>
						buffer = 0;
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <fsm_for_button+0x2f4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
					buffer++;
 80003f2:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <fsm_for_button+0x2f4>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	3301      	adds	r3, #1
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <fsm_for_button+0x2f4>)
 80003fc:	701a      	strb	r2, [r3, #0]
				button_state[INC_BUTTON] = BUTTON_RELEASED;
 80003fe:	4b12      	ldr	r3, [pc, #72]	@ (8000448 <fsm_for_button+0x2fc>)
 8000400:	2200      	movs	r2, #0
 8000402:	709a      	strb	r2, [r3, #2]
			break;
 8000404:	e013      	b.n	800042e <fsm_for_button+0x2e2>
				if (is_button_pressed_1s(INC_BUTTON)) {
 8000406:	2002      	movs	r0, #2
 8000408:	f000 fcbe 	bl	8000d88 <is_button_pressed_1s>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d00d      	beq.n	800042e <fsm_for_button+0x2e2>
					button_state[INC_BUTTON] =
 8000412:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <fsm_for_button+0x2fc>)
 8000414:	2202      	movs	r2, #2
 8000416:	709a      	strb	r2, [r3, #2]
			break;
 8000418:	e009      	b.n	800042e <fsm_for_button+0x2e2>
			if (!is_button_pressed(INC_BUTTON)) {
 800041a:	2002      	movs	r0, #2
 800041c:	f000 fc9a 	bl	8000d54 <is_button_pressed>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d105      	bne.n	8000432 <fsm_for_button+0x2e6>
				button_state[INC_BUTTON] = BUTTON_RELEASED;
 8000426:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <fsm_for_button+0x2fc>)
 8000428:	2200      	movs	r2, #0
 800042a:	709a      	strb	r2, [r3, #2]
			break;
 800042c:	e001      	b.n	8000432 <fsm_for_button+0x2e6>
			break;
 800042e:	bf00      	nop
 8000430:	e000      	b.n	8000434 <fsm_for_button+0x2e8>
			break;
 8000432:	bf00      	nop
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000091 	.word	0x20000091
 800043c:	20000092 	.word	0x20000092
 8000440:	20000095 	.word	0x20000095
 8000444:	2000000d 	.word	0x2000000d
 8000448:	20000000 	.word	0x20000000

0800044c <display7SEG>:
#include <fsm_traffic_light.h>
uint8_t led_buffer[NO_OF_7SEG] = { 0 };
static uint8_t scanning_idx = 0;
uint16_t EN_Pin[NO_OF_7SEG] = { EN0_Pin, EN1_Pin, EN2_Pin, EN3_Pin };

void display7SEG(int num) {
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	SEG_0_GPIO_Port->ODR &= ~ALL_SEG;
 8000454:	4b37      	ldr	r3, [pc, #220]	@ (8000534 <display7SEG+0xe8>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	4a36      	ldr	r2, [pc, #216]	@ (8000534 <display7SEG+0xe8>)
 800045a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800045e:	60d3      	str	r3, [r2, #12]
	switch (num) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2b09      	cmp	r3, #9
 8000464:	d85a      	bhi.n	800051c <display7SEG+0xd0>
 8000466:	a201      	add	r2, pc, #4	@ (adr r2, 800046c <display7SEG+0x20>)
 8000468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046c:	08000495 	.word	0x08000495
 8000470:	080004a3 	.word	0x080004a3
 8000474:	080004b1 	.word	0x080004b1
 8000478:	080004bf 	.word	0x080004bf
 800047c:	080004cd 	.word	0x080004cd
 8000480:	080004db 	.word	0x080004db
 8000484:	080004e9 	.word	0x080004e9
 8000488:	080004f7 	.word	0x080004f7
 800048c:	08000505 	.word	0x08000505
 8000490:	0800050f 	.word	0x0800050f
	case 0:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_0); // 0
 8000494:	4b27      	ldr	r3, [pc, #156]	@ (8000534 <display7SEG+0xe8>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	4a26      	ldr	r2, [pc, #152]	@ (8000534 <display7SEG+0xe8>)
 800049a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800049e:	60d3      	str	r3, [r2, #12]
		break;
 80004a0:	e043      	b.n	800052a <display7SEG+0xde>
	case 1:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_1); // 1
 80004a2:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <display7SEG+0xe8>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	4a23      	ldr	r2, [pc, #140]	@ (8000534 <display7SEG+0xe8>)
 80004a8:	f043 0379 	orr.w	r3, r3, #121	@ 0x79
 80004ac:	60d3      	str	r3, [r2, #12]
		break;
 80004ae:	e03c      	b.n	800052a <display7SEG+0xde>
	case 2:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_2); // 2
 80004b0:	4b20      	ldr	r3, [pc, #128]	@ (8000534 <display7SEG+0xe8>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000534 <display7SEG+0xe8>)
 80004b6:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 80004ba:	60d3      	str	r3, [r2, #12]
		break;
 80004bc:	e035      	b.n	800052a <display7SEG+0xde>
	case 3:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_3); // 3
 80004be:	4b1d      	ldr	r3, [pc, #116]	@ (8000534 <display7SEG+0xe8>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000534 <display7SEG+0xe8>)
 80004c4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80004c8:	60d3      	str	r3, [r2, #12]
		break;
 80004ca:	e02e      	b.n	800052a <display7SEG+0xde>
	case 4:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_4); // 4
 80004cc:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <display7SEG+0xe8>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a18      	ldr	r2, [pc, #96]	@ (8000534 <display7SEG+0xe8>)
 80004d2:	f043 0319 	orr.w	r3, r3, #25
 80004d6:	60d3      	str	r3, [r2, #12]
		break;
 80004d8:	e027      	b.n	800052a <display7SEG+0xde>
	case 5:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_5); // 5
 80004da:	4b16      	ldr	r3, [pc, #88]	@ (8000534 <display7SEG+0xe8>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <display7SEG+0xe8>)
 80004e0:	f043 0312 	orr.w	r3, r3, #18
 80004e4:	60d3      	str	r3, [r2, #12]
		break;
 80004e6:	e020      	b.n	800052a <display7SEG+0xde>
	case 6:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_6); // 6
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <display7SEG+0xe8>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a11      	ldr	r2, [pc, #68]	@ (8000534 <display7SEG+0xe8>)
 80004ee:	f043 0302 	orr.w	r3, r3, #2
 80004f2:	60d3      	str	r3, [r2, #12]
		break;
 80004f4:	e019      	b.n	800052a <display7SEG+0xde>
	case 7:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_7); // 7
 80004f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <display7SEG+0xe8>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000534 <display7SEG+0xe8>)
 80004fc:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 8000500:	60d3      	str	r3, [r2, #12]
		break;
 8000502:	e012      	b.n	800052a <display7SEG+0xde>
	case 8:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_8); // 8
 8000504:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <display7SEG+0xe8>)
 8000506:	4a0b      	ldr	r2, [pc, #44]	@ (8000534 <display7SEG+0xe8>)
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	60d3      	str	r3, [r2, #12]
		break;
 800050c:	e00d      	b.n	800052a <display7SEG+0xde>
	case 9:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_9); // 9
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <display7SEG+0xe8>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <display7SEG+0xe8>)
 8000514:	f043 0310 	orr.w	r3, r3, #16
 8000518:	60d3      	str	r3, [r2, #12]
		break;
 800051a:	e006      	b.n	800052a <display7SEG+0xde>
	default:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG); // Turn off all segments
 800051c:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <display7SEG+0xe8>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <display7SEG+0xe8>)
 8000522:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8000526:	60d3      	str	r3, [r2, #12]
	}
}
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40011000 	.word	0x40011000

08000538 <update_buffer>:

// SCANNING 4 7SEG-LED TO DISPLAY NUMBER //

void update_buffer(uint8_t num_1, uint8_t num_2) {
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	4613      	mov	r3, r2
 8000546:	71bb      	strb	r3, [r7, #6]
	led_buffer[0] = num_1 / 10;
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4a17      	ldr	r2, [pc, #92]	@ (80005a8 <update_buffer+0x70>)
 800054c:	fba2 2303 	umull	r2, r3, r2, r3
 8000550:	08db      	lsrs	r3, r3, #3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <update_buffer+0x74>)
 8000556:	701a      	strb	r2, [r3, #0]
	led_buffer[1] = num_1 % 10;
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <update_buffer+0x70>)
 800055c:	fba3 1302 	umull	r1, r3, r3, r2
 8000560:	08d9      	lsrs	r1, r3, #3
 8000562:	460b      	mov	r3, r1
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	440b      	add	r3, r1
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <update_buffer+0x74>)
 8000570:	705a      	strb	r2, [r3, #1]
	led_buffer[2] = num_2 / 10;
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	4a0c      	ldr	r2, [pc, #48]	@ (80005a8 <update_buffer+0x70>)
 8000576:	fba2 2303 	umull	r2, r3, r2, r3
 800057a:	08db      	lsrs	r3, r3, #3
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <update_buffer+0x74>)
 8000580:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = num_2 % 10;
 8000582:	79ba      	ldrb	r2, [r7, #6]
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <update_buffer+0x70>)
 8000586:	fba3 1302 	umull	r1, r3, r3, r2
 800058a:	08d9      	lsrs	r1, r3, #3
 800058c:	460b      	mov	r3, r1
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	b2da      	uxtb	r2, r3
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <update_buffer+0x74>)
 800059a:	70da      	strb	r2, [r3, #3]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	cccccccd 	.word	0xcccccccd
 80005ac:	2000008c 	.word	0x2000008c

080005b0 <scanning_led>:
void scanning_led(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	EN0_GPIO_Port->ODR |= (EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin);
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <scanning_led+0x58>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <scanning_led+0x58>)
 80005ba:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80005be:	60d3      	str	r3, [r2, #12]
	display7SEG(led_buffer[scanning_idx]);
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <scanning_led+0x5c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <scanning_led+0x60>)
 80005c8:	5c9b      	ldrb	r3, [r3, r2]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff3e 	bl	800044c <display7SEG>
	EN0_GPIO_Port->ODR &= ~(EN_Pin[scanning_idx]);
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <scanning_led+0x58>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <scanning_led+0x5c>)
 80005d6:	7812      	ldrb	r2, [r2, #0]
 80005d8:	4611      	mov	r1, r2
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <scanning_led+0x64>)
 80005dc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a08      	ldr	r2, [pc, #32]	@ (8000608 <scanning_led+0x58>)
 80005e6:	400b      	ands	r3, r1
 80005e8:	60d3      	str	r3, [r2, #12]
	scanning_idx = (scanning_idx + 1) % NO_OF_7SEG;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <scanning_led+0x5c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	425a      	negs	r2, r3
 80005f2:	f003 0303 	and.w	r3, r3, #3
 80005f6:	f002 0203 	and.w	r2, r2, #3
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b02      	ldr	r3, [pc, #8]	@ (800060c <scanning_led+0x5c>)
 8000602:	701a      	strb	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40010c00 	.word	0x40010c00
 800060c:	20000090 	.word	0x20000090
 8000610:	2000008c 	.word	0x2000008c
 8000614:	20000004 	.word	0x20000004

08000618 <update_led_traffic>:
void update_led_traffic() {
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	LED_RED_1_GPIO_Port->ODR |= ALL_LED;
 800061c:	4b4a      	ldr	r3, [pc, #296]	@ (8000748 <update_led_traffic+0x130>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	4a49      	ldr	r2, [pc, #292]	@ (8000748 <update_led_traffic+0x130>)
 8000622:	f443 53fc 	orr.w	r3, r3, #8064	@ 0x1f80
 8000626:	60d3      	str	r3, [r2, #12]
	switch (line_1) {
 8000628:	4b48      	ldr	r3, [pc, #288]	@ (800074c <update_led_traffic+0x134>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d02a      	beq.n	8000686 <update_led_traffic+0x6e>
 8000630:	2b02      	cmp	r3, #2
 8000632:	dc3f      	bgt.n	80006b4 <update_led_traffic+0x9c>
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <update_led_traffic+0x26>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d012      	beq.n	8000662 <update_led_traffic+0x4a>
 800063c:	e03a      	b.n	80006b4 <update_led_traffic+0x9c>
	case RED:
		LED_RED_1_GPIO_Port->ODR &= ~(LED_RED_1_Pin);
 800063e:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <update_led_traffic+0x130>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	4a41      	ldr	r2, [pc, #260]	@ (8000748 <update_led_traffic+0x130>)
 8000644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000648:	60d3      	str	r3, [r2, #12]
		if (count_1 <= 0) {
 800064a:	4b41      	ldr	r3, [pc, #260]	@ (8000750 <update_led_traffic+0x138>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d12b      	bne.n	80006aa <update_led_traffic+0x92>
			line_1 = GREEN;
 8000652:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <update_led_traffic+0x134>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
			count_1 = green_light;
 8000658:	4b3e      	ldr	r3, [pc, #248]	@ (8000754 <update_led_traffic+0x13c>)
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4b3c      	ldr	r3, [pc, #240]	@ (8000750 <update_led_traffic+0x138>)
 800065e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000660:	e023      	b.n	80006aa <update_led_traffic+0x92>
	case GREEN:
		LED_GREEN_1_GPIO_Port->ODR &= ~(LED_GREEN_1_Pin);
 8000662:	4b39      	ldr	r3, [pc, #228]	@ (8000748 <update_led_traffic+0x130>)
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	4a38      	ldr	r2, [pc, #224]	@ (8000748 <update_led_traffic+0x130>)
 8000668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800066c:	60d3      	str	r3, [r2, #12]
		if (count_1 <= 0) {
 800066e:	4b38      	ldr	r3, [pc, #224]	@ (8000750 <update_led_traffic+0x138>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d11b      	bne.n	80006ae <update_led_traffic+0x96>
			line_1 = AMBER;
 8000676:	4b35      	ldr	r3, [pc, #212]	@ (800074c <update_led_traffic+0x134>)
 8000678:	2202      	movs	r2, #2
 800067a:	701a      	strb	r2, [r3, #0]
			count_1 = amber_light;
 800067c:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <update_led_traffic+0x140>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b33      	ldr	r3, [pc, #204]	@ (8000750 <update_led_traffic+0x138>)
 8000682:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000684:	e013      	b.n	80006ae <update_led_traffic+0x96>
	case AMBER:
		LED_AMBER_1_GPIO_Port->ODR &= ~(LED_AMBER_1_Pin);
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <update_led_traffic+0x130>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	4a2f      	ldr	r2, [pc, #188]	@ (8000748 <update_led_traffic+0x130>)
 800068c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000690:	60d3      	str	r3, [r2, #12]
		if (count_1 <= 0) {
 8000692:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <update_led_traffic+0x138>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d10b      	bne.n	80006b2 <update_led_traffic+0x9a>
			line_1 = RED;
 800069a:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <update_led_traffic+0x134>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
			count_1 = red_light;
 80006a0:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <update_led_traffic+0x144>)
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000750 <update_led_traffic+0x138>)
 80006a6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80006a8:	e003      	b.n	80006b2 <update_led_traffic+0x9a>
		break;
 80006aa:	bf00      	nop
 80006ac:	e002      	b.n	80006b4 <update_led_traffic+0x9c>
		break;
 80006ae:	bf00      	nop
 80006b0:	e000      	b.n	80006b4 <update_led_traffic+0x9c>
		break;
 80006b2:	bf00      	nop
	}
	//	LED_RED_2_GPIO_Port->ODR |= ALL_LED;
	switch (line_2) {
 80006b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <update_led_traffic+0x148>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d02a      	beq.n	8000712 <update_led_traffic+0xfa>
 80006bc:	2b02      	cmp	r3, #2
 80006be:	dc3f      	bgt.n	8000740 <update_led_traffic+0x128>
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <update_led_traffic+0xb2>
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d012      	beq.n	80006ee <update_led_traffic+0xd6>
			line_2 = RED;
			count_2 = red_light;
		}
		break;
	}
}
 80006c8:	e03a      	b.n	8000740 <update_led_traffic+0x128>
		LED_RED_2_GPIO_Port->ODR &= ~(LED_RED_2_Pin);
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <update_led_traffic+0x130>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000748 <update_led_traffic+0x130>)
 80006d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80006d4:	60d3      	str	r3, [r2, #12]
		if (count_2 <= 0) {
 80006d6:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <update_led_traffic+0x14c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d12b      	bne.n	8000736 <update_led_traffic+0x11e>
			line_2 = GREEN;
 80006de:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <update_led_traffic+0x148>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
			count_2 = green_light;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <update_led_traffic+0x13c>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <update_led_traffic+0x14c>)
 80006ea:	701a      	strb	r2, [r3, #0]
		break;
 80006ec:	e023      	b.n	8000736 <update_led_traffic+0x11e>
		LED_RED_2_GPIO_Port->ODR &= ~(LED_GREEN_2_Pin);
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <update_led_traffic+0x130>)
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <update_led_traffic+0x130>)
 80006f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006f8:	60d3      	str	r3, [r2, #12]
		if (count_2 <= 0) {
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <update_led_traffic+0x14c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d11b      	bne.n	800073a <update_led_traffic+0x122>
			line_2 = AMBER;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <update_led_traffic+0x148>)
 8000704:	2202      	movs	r2, #2
 8000706:	701a      	strb	r2, [r3, #0]
			count_2 = amber_light;
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <update_led_traffic+0x140>)
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <update_led_traffic+0x14c>)
 800070e:	701a      	strb	r2, [r3, #0]
		break;
 8000710:	e013      	b.n	800073a <update_led_traffic+0x122>
		LED_RED_2_GPIO_Port->ODR &= ~(LED_AMBER_2_Pin);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <update_led_traffic+0x130>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	4a0c      	ldr	r2, [pc, #48]	@ (8000748 <update_led_traffic+0x130>)
 8000718:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800071c:	60d3      	str	r3, [r2, #12]
		if (count_2 <= 0) {
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <update_led_traffic+0x14c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d10b      	bne.n	800073e <update_led_traffic+0x126>
			line_2 = RED;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <update_led_traffic+0x148>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
			count_2 = red_light;
 800072c:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <update_led_traffic+0x144>)
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <update_led_traffic+0x14c>)
 8000732:	701a      	strb	r2, [r3, #0]
		break;
 8000734:	e003      	b.n	800073e <update_led_traffic+0x126>
		break;
 8000736:	bf00      	nop
 8000738:	e002      	b.n	8000740 <update_led_traffic+0x128>
		break;
 800073a:	bf00      	nop
 800073c:	e000      	b.n	8000740 <update_led_traffic+0x128>
		break;
 800073e:	bf00      	nop
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40011000 	.word	0x40011000
 800074c:	20000092 	.word	0x20000092
 8000750:	20000093 	.word	0x20000093
 8000754:	2000000f 	.word	0x2000000f
 8000758:	2000000e 	.word	0x2000000e
 800075c:	2000000d 	.word	0x2000000d
 8000760:	2000000c 	.word	0x2000000c
 8000764:	20000094 	.word	0x20000094

08000768 <fsm_for_auto>:

// AUTOMATIC RUN DEFINE //
void fsm_for_auto(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	update_buffer(count_1, count_2);
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <fsm_for_auto+0x44>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4a0f      	ldr	r2, [pc, #60]	@ (80007b0 <fsm_for_auto+0x48>)
 8000772:	7812      	ldrb	r2, [r2, #0]
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fede 	bl	8000538 <update_buffer>
	update_led_traffic();
 800077c:	f7ff ff4c 	bl	8000618 <update_led_traffic>
	if (count_1 > 0)
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <fsm_for_auto+0x44>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d005      	beq.n	8000794 <fsm_for_auto+0x2c>
		count_1 = count_1 - 1;
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <fsm_for_auto+0x44>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3b01      	subs	r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <fsm_for_auto+0x44>)
 8000792:	701a      	strb	r2, [r3, #0]
	if (count_2 > 0)
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <fsm_for_auto+0x48>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d005      	beq.n	80007a8 <fsm_for_auto+0x40>
		count_2 = count_2 - 1;
 800079c:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <fsm_for_auto+0x48>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b02      	ldr	r3, [pc, #8]	@ (80007b0 <fsm_for_auto+0x48>)
 80007a6:	701a      	strb	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000093 	.word	0x20000093
 80007b0:	20000094 	.word	0x20000094

080007b4 <fsm_for_manual>:
void fsm_for_manual(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	count_1 = 1;
 80007b8:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <fsm_for_manual+0x18>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
	count_2 = 1;
 80007be:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <fsm_for_manual+0x1c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
	update_led_traffic();
 80007c4:	f7ff ff28 	bl	8000618 <update_led_traffic>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000093 	.word	0x20000093
 80007d0:	20000094 	.word	0x20000094

080007d4 <fsm_for_modify>:

void fsm_for_modify() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	switch (line_1) {
 80007d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <fsm_for_modify+0x84>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d016      	beq.n	800080e <fsm_for_modify+0x3a>
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	dc36      	bgt.n	8000852 <fsm_for_modify+0x7e>
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <fsm_for_modify+0x1a>
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d021      	beq.n	8000830 <fsm_for_modify+0x5c>
		update_buffer(03, buffer);
		HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
		HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
		break;
	}
}
 80007ec:	e031      	b.n	8000852 <fsm_for_modify+0x7e>
		update_buffer(01, buffer);
 80007ee:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <fsm_for_modify+0x88>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fe9f 	bl	8000538 <update_buffer>
		HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	4818      	ldr	r0, [pc, #96]	@ (8000860 <fsm_for_modify+0x8c>)
 80007fe:	f001 fa75 	bl	8001cec <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 8000802:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000806:	4816      	ldr	r0, [pc, #88]	@ (8000860 <fsm_for_modify+0x8c>)
 8000808:	f001 fa70 	bl	8001cec <HAL_GPIO_TogglePin>
		break;
 800080c:	e021      	b.n	8000852 <fsm_for_modify+0x7e>
		update_buffer(02, buffer);
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <fsm_for_modify+0x88>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff fe8f 	bl	8000538 <update_buffer>
		HAL_GPIO_TogglePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin);
 800081a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800081e:	4810      	ldr	r0, [pc, #64]	@ (8000860 <fsm_for_modify+0x8c>)
 8000820:	f001 fa64 	bl	8001cec <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin);
 8000824:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <fsm_for_modify+0x8c>)
 800082a:	f001 fa5f 	bl	8001cec <HAL_GPIO_TogglePin>
		break;
 800082e:	e010      	b.n	8000852 <fsm_for_modify+0x7e>
		update_buffer(03, buffer);
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <fsm_for_modify+0x88>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	2003      	movs	r0, #3
 8000838:	f7ff fe7e 	bl	8000538 <update_buffer>
		HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 800083c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000840:	4807      	ldr	r0, [pc, #28]	@ (8000860 <fsm_for_modify+0x8c>)
 8000842:	f001 fa53 	bl	8001cec <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8000846:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <fsm_for_modify+0x8c>)
 800084c:	f001 fa4e 	bl	8001cec <HAL_GPIO_TogglePin>
		break;
 8000850:	bf00      	nop
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000092 	.word	0x20000092
 800085c:	20000095 	.word	0x20000095
 8000860:	40011000 	.word	0x40011000

08000864 <fsm_for_traffic_light>:

void fsm_for_traffic_light(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	switch (mode) {
 8000868:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <fsm_for_traffic_light+0xb8>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d84e      	bhi.n	800090e <fsm_for_traffic_light+0xaa>
 8000870:	a201      	add	r2, pc, #4	@ (adr r2, 8000878 <fsm_for_traffic_light+0x14>)
 8000872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000876:	bf00      	nop
 8000878:	08000889 	.word	0x08000889
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008e9 	.word	0x080008e9
 8000884:	08000909 	.word	0x08000909
	case INIT:
		LED_RED_1_GPIO_Port->ODR |= ALL_LED;
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <fsm_for_traffic_light+0xbc>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <fsm_for_traffic_light+0xbc>)
 800088e:	f443 53fc 	orr.w	r3, r3, #8064	@ 0x1f80
 8000892:	60d3      	str	r3, [r2, #12]
		amber_light = red_light - green_light; // adjust timing
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <fsm_for_traffic_light+0xc0>)
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <fsm_for_traffic_light+0xc4>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b22      	ldr	r3, [pc, #136]	@ (800092c <fsm_for_traffic_light+0xc8>)
 80008a2:	701a      	strb	r2, [r3, #0]
		count_1 = red_light;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <fsm_for_traffic_light+0xc0>)
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <fsm_for_traffic_light+0xcc>)
 80008aa:	701a      	strb	r2, [r3, #0]
		count_2 = green_light;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <fsm_for_traffic_light+0xc4>)
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <fsm_for_traffic_light+0xd0>)
 80008b2:	701a      	strb	r2, [r3, #0]
		line_1 = RED, line_2 = GREEN;
 80008b4:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <fsm_for_traffic_light+0xd4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	4b20      	ldr	r3, [pc, #128]	@ (800093c <fsm_for_traffic_light+0xd8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
		mode = AUTO;
 80008c0:	4b16      	ldr	r3, [pc, #88]	@ (800091c <fsm_for_traffic_light+0xb8>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
		break;
 80008c6:	e027      	b.n	8000918 <fsm_for_traffic_light+0xb4>
	case AUTO:
		buffer++;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <fsm_for_traffic_light+0xdc>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <fsm_for_traffic_light+0xdc>)
 80008d2:	701a      	strb	r2, [r3, #0]
		if (buffer % 2 == 1)
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <fsm_for_traffic_light+0xdc>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d017      	beq.n	8000912 <fsm_for_traffic_light+0xae>
			fsm_for_auto();
 80008e2:	f7ff ff41 	bl	8000768 <fsm_for_auto>
		break;
 80008e6:	e014      	b.n	8000912 <fsm_for_traffic_light+0xae>
	case MANUAL:
		buffer++;
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <fsm_for_traffic_light+0xdc>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <fsm_for_traffic_light+0xdc>)
 80008f2:	701a      	strb	r2, [r3, #0]
		if (buffer % 2 == 1)
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <fsm_for_traffic_light+0xdc>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d009      	beq.n	8000916 <fsm_for_traffic_light+0xb2>
			fsm_for_manual();
 8000902:	f7ff ff57 	bl	80007b4 <fsm_for_manual>
		break;
 8000906:	e006      	b.n	8000916 <fsm_for_traffic_light+0xb2>
	case MODIFY:
		fsm_for_modify();
 8000908:	f7ff ff64 	bl	80007d4 <fsm_for_modify>
		break;
 800090c:	e004      	b.n	8000918 <fsm_for_traffic_light+0xb4>
	default:
		break;
 800090e:	bf00      	nop
 8000910:	e002      	b.n	8000918 <fsm_for_traffic_light+0xb4>
		break;
 8000912:	bf00      	nop
 8000914:	e000      	b.n	8000918 <fsm_for_traffic_light+0xb4>
		break;
 8000916:	bf00      	nop
	}
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000091 	.word	0x20000091
 8000920:	40011000 	.word	0x40011000
 8000924:	2000000d 	.word	0x2000000d
 8000928:	2000000f 	.word	0x2000000f
 800092c:	2000000e 	.word	0x2000000e
 8000930:	20000093 	.word	0x20000093
 8000934:	20000094 	.word	0x20000094
 8000938:	20000092 	.word	0x20000092
 800093c:	2000000c 	.word	0x2000000c
 8000940:	20000095 	.word	0x20000095

08000944 <lcd_send_cmd>:

void Init_I2C(I2C_HandleTypeDef *hal_i2c) {
	hi2c = hal_i2c;
	lcd_init();
}
static uint8_t lcd_send_cmd(uint8_t cmd) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = { LCD_CMD_MSB_EN(cmd), LCD_CMD_MSB_DIS(cmd),
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	f023 030f 	bic.w	r3, r3, #15
 8000956:	b25b      	sxtb	r3, r3
 8000958:	f043 030c 	orr.w	r3, r3, #12
 800095c:	b25b      	sxtb	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	733b      	strb	r3, [r7, #12]
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	f023 030f 	bic.w	r3, r3, #15
 800096a:	b25b      	sxtb	r3, r3
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	b25b      	sxtb	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	737b      	strb	r3, [r7, #13]
			LCD_CMD_LSB_EN(cmd), LCD_CMD_LSB_DIS(cmd) };
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	b25b      	sxtb	r3, r3
 800097c:	f043 030c 	orr.w	r3, r3, #12
 8000980:	b25b      	sxtb	r3, r3
 8000982:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = { LCD_CMD_MSB_EN(cmd), LCD_CMD_MSB_DIS(cmd),
 8000984:	73bb      	strb	r3, [r7, #14]
			LCD_CMD_LSB_EN(cmd), LCD_CMD_LSB_DIS(cmd) };
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	b25b      	sxtb	r3, r3
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	b25b      	sxtb	r3, r3
 8000992:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = { LCD_CMD_MSB_EN(cmd), LCD_CMD_MSB_DIS(cmd),
 8000994:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, (uint8_t*) buffer, 4,
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <lcd_send_cmd+0x7c>)
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	f107 020c 	add.w	r2, r7, #12
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2304      	movs	r3, #4
 80009a6:	2142      	movs	r1, #66	@ 0x42
 80009a8:	f001 fb20 	bl	8001fec <HAL_I2C_Master_Transmit>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <lcd_send_cmd+0x72>
	HAL_MAX_DELAY) != HAL_OK) {
		return 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <lcd_send_cmd+0x74>
	}
	return 1;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000098 	.word	0x20000098

080009c4 <lcd_send_data>:

static uint8_t lcd_send_data(uint8_t data) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = { LCD_DATA_MSB_EN(data), LCD_DATA_MSB_DIS(data),
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	f023 030f 	bic.w	r3, r3, #15
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	f043 030d 	orr.w	r3, r3, #13
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	733b      	strb	r3, [r7, #12]
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	f023 030f 	bic.w	r3, r3, #15
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	f043 0309 	orr.w	r3, r3, #9
 80009f0:	b25b      	sxtb	r3, r3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	737b      	strb	r3, [r7, #13]
			LCD_DATA_LSB_EN(data), LCD_DATA_LSB_DIS(data) };
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	011b      	lsls	r3, r3, #4
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	f043 030d 	orr.w	r3, r3, #13
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = { LCD_DATA_MSB_EN(data), LCD_DATA_MSB_DIS(data),
 8000a04:	73bb      	strb	r3, [r7, #14]
			LCD_DATA_LSB_EN(data), LCD_DATA_LSB_DIS(data) };
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	011b      	lsls	r3, r3, #4
 8000a0a:	b25b      	sxtb	r3, r3
 8000a0c:	f043 0309 	orr.w	r3, r3, #9
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = { LCD_DATA_MSB_EN(data), LCD_DATA_MSB_DIS(data),
 8000a14:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, (uint8_t*) buffer, 4,
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <lcd_send_data+0x7c>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f107 020c 	add.w	r2, r7, #12
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2304      	movs	r3, #4
 8000a26:	2142      	movs	r1, #66	@ 0x42
 8000a28:	f001 fae0 	bl	8001fec <HAL_I2C_Master_Transmit>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <lcd_send_data+0x72>
	HAL_MAX_DELAY) != HAL_OK) {
		return 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <lcd_send_data+0x74>
	}
	return 1;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000098 	.word	0x20000098

08000a44 <lcd_init>:
	uint8_t data[1] = { LCD_BACKLIGHT_ON };
	HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, (uint8_t*) data, 1, HAL_MAX_DELAY);
	HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, (uint8_t*) data, 1, HAL_MAX_DELAY);
}

void lcd_init() {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
//    while (!lcd_send_cmd(LCD_CURSOR_INCREMENT));
//    while (!lcd_send_cmd(LCD_CLEAR_DISPLAY));

//    HAL_Delay(2);
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a48:	2032      	movs	r0, #50	@ 0x32
 8000a4a:	f000 fe81 	bl	8001750 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000a4e:	2030      	movs	r0, #48	@ 0x30
 8000a50:	f7ff ff78 	bl	8000944 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a54:	2005      	movs	r0, #5
 8000a56:	f000 fe7b 	bl	8001750 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000a5a:	2030      	movs	r0, #48	@ 0x30
 8000a5c:	f7ff ff72 	bl	8000944 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 fe75 	bl	8001750 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000a66:	2030      	movs	r0, #48	@ 0x30
 8000a68:	f7ff ff6c 	bl	8000944 <lcd_send_cmd>
	HAL_Delay(10);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f000 fe6f 	bl	8001750 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 8000a72:	2020      	movs	r0, #32
 8000a74:	f7ff ff66 	bl	8000944 <lcd_send_cmd>
	HAL_Delay(10);
 8000a78:	200a      	movs	r0, #10
 8000a7a:	f000 fe69 	bl	8001750 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a7e:	2028      	movs	r0, #40	@ 0x28
 8000a80:	f7ff ff60 	bl	8000944 <lcd_send_cmd>
	HAL_Delay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fe63 	bl	8001750 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a8a:	2008      	movs	r0, #8
 8000a8c:	f7ff ff5a 	bl	8000944 <lcd_send_cmd>
	HAL_Delay(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f000 fe5d 	bl	8001750 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff ff54 	bl	8000944 <lcd_send_cmd>
	HAL_Delay(1);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 fe57 	bl	8001750 <HAL_Delay>
	HAL_Delay(1);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f000 fe54 	bl	8001750 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000aa8:	2006      	movs	r0, #6
 8000aaa:	f7ff ff4b 	bl	8000944 <lcd_send_cmd>
	HAL_Delay(1);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f000 fe4e 	bl	8001750 <HAL_Delay>
	lcd_send_cmd(0x0C);
 8000ab4:	200c      	movs	r0, #12
 8000ab6:	f7ff ff45 	bl	8000944 <lcd_send_cmd>

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}

08000abe <lcd_send_string>:

void lcd_send_string(char *str) {
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000ac6:	e006      	b.n	8000ad6 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff77 	bl	80009c4 <lcd_send_data>
	while (*str) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f4      	bne.n	8000ac8 <lcd_send_string+0xa>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <lcd_clear>:

void lcd_clear(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	lcd_send_cmd(LCD_CLEAR_DISPLAY);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff ff29 	bl	8000944 <lcd_send_cmd>
	HAL_Delay(2);
 8000af2:	2002      	movs	r0, #2
 8000af4:	f000 fe2c 	bl	8001750 <HAL_Delay>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	460a      	mov	r2, r1
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	71bb      	strb	r3, [r7, #6]
	uint8_t addr = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
	if (col >= 20)
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	2b13      	cmp	r3, #19
 8000b14:	d901      	bls.n	8000b1a <lcd_set_cursor+0x1e>
		col = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	71bb      	strb	r3, [r7, #6]
	if (row == 0) {
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d103      	bne.n	8000b28 <lcd_set_cursor+0x2c>
		addr = 0x80 + col;
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	3b80      	subs	r3, #128	@ 0x80
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e005      	b.n	8000b34 <lcd_set_cursor+0x38>
	} else if (row == 1) {
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d102      	bne.n	8000b34 <lcd_set_cursor+0x38>
		addr = 0xC0 + col;
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	3b40      	subs	r3, #64	@ 0x40
 8000b32:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(addr);
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff04 	bl	8000944 <lcd_send_cmd>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <generate_str_from_mode>:
	char buffer[16];
	sprintf(buffer, "%d", num);
	lcd_send_string(buffer);
}

static void generate_str_from_mode(uint8_t mode, char *str) {
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d014      	beq.n	8000b80 <generate_str_from_mode+0x3c>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	dc19      	bgt.n	8000b8e <generate_str_from_mode+0x4a>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <generate_str_from_mode+0x20>
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d007      	beq.n	8000b72 <generate_str_from_mode+0x2e>
 8000b62:	e014      	b.n	8000b8e <generate_str_from_mode+0x4a>
	case RED:
		strcpy(str, "R");
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	4910      	ldr	r1, [pc, #64]	@ (8000ba8 <generate_str_from_mode+0x64>)
 8000b68:	461a      	mov	r2, r3
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	8013      	strh	r3, [r2, #0]
		break;
 8000b70:	e015      	b.n	8000b9e <generate_str_from_mode+0x5a>
	case GREEN:
		strcpy(str, "G");
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	490d      	ldr	r1, [pc, #52]	@ (8000bac <generate_str_from_mode+0x68>)
 8000b76:	461a      	mov	r2, r3
 8000b78:	460b      	mov	r3, r1
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	8013      	strh	r3, [r2, #0]
		break;
 8000b7e:	e00e      	b.n	8000b9e <generate_str_from_mode+0x5a>
	case AMBER:
		strcpy(str, "A");
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	490b      	ldr	r1, [pc, #44]	@ (8000bb0 <generate_str_from_mode+0x6c>)
 8000b84:	461a      	mov	r2, r3
 8000b86:	460b      	mov	r3, r1
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	8013      	strh	r3, [r2, #0]
		break;
 8000b8c:	e007      	b.n	8000b9e <generate_str_from_mode+0x5a>
	default:
		strcpy(str, "UNKNOWN");
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	4908      	ldr	r1, [pc, #32]	@ (8000bb4 <generate_str_from_mode+0x70>)
 8000b92:	461a      	mov	r2, r3
 8000b94:	460b      	mov	r3, r1
 8000b96:	cb03      	ldmia	r3!, {r0, r1}
 8000b98:	6010      	str	r0, [r2, #0]
 8000b9a:	6051      	str	r1, [r2, #4]
		break;
 8000b9c:	bf00      	nop
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	080041f8 	.word	0x080041f8
 8000bac:	080041fc 	.word	0x080041fc
 8000bb0:	08004200 	.word	0x08004200
 8000bb4:	08004204 	.word	0x08004204

08000bb8 <lcd_display_mode>:

void lcd_display_mode(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
	lcd_clear();
 8000bbe:	f7ff ff93 	bl	8000ae8 <lcd_clear>
	int curent_value = buffer;
 8000bc2:	4b56      	ldr	r3, [pc, #344]	@ (8000d1c <lcd_display_mode+0x164>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	61fb      	str	r3, [r7, #28]
	char buffer[6];
	char temp[16];
	switch (mode) {
 8000bc8:	4b55      	ldr	r3, [pc, #340]	@ (8000d20 <lcd_display_mode+0x168>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d079      	beq.n	8000cc4 <lcd_display_mode+0x10c>
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	f300 8096 	bgt.w	8000d02 <lcd_display_mode+0x14a>
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d002      	beq.n	8000be0 <lcd_display_mode+0x28>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d03a      	beq.n	8000c54 <lcd_display_mode+0x9c>
 8000bde:	e090      	b.n	8000d02 <lcd_display_mode+0x14a>
	case AUTO:

		lcd_set_cursor(0, 0);
 8000be0:	2100      	movs	r1, #0
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ff8a 	bl	8000afc <lcd_set_cursor>
		lcd_send_string("MODE : AUTO");
 8000be8:	484e      	ldr	r0, [pc, #312]	@ (8000d24 <lcd_display_mode+0x16c>)
 8000bea:	f7ff ff68 	bl	8000abe <lcd_send_string>

		generate_str_from_mode(line_1, buffer);
 8000bee:	4b4e      	ldr	r3, [pc, #312]	@ (8000d28 <lcd_display_mode+0x170>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f107 0214 	add.w	r2, r7, #20
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffa3 	bl	8000b44 <generate_str_from_mode>

		lcd_set_cursor(1, 0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff ff7b 	bl	8000afc <lcd_set_cursor>
		sprintf(temp, "%s %d\0", buffer, count_1);
 8000c06:	4b49      	ldr	r3, [pc, #292]	@ (8000d2c <lcd_display_mode+0x174>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	f107 0214 	add.w	r2, r7, #20
 8000c0e:	1d38      	adds	r0, r7, #4
 8000c10:	4947      	ldr	r1, [pc, #284]	@ (8000d30 <lcd_display_mode+0x178>)
 8000c12:	f002 fee1 	bl	80039d8 <siprintf>
		lcd_send_string(temp);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff50 	bl	8000abe <lcd_send_string>

		strcpy(temp, "");
 8000c1e:	2300      	movs	r3, #0
 8000c20:	713b      	strb	r3, [r7, #4]
		generate_str_from_mode(line_2, buffer);
 8000c22:	4b44      	ldr	r3, [pc, #272]	@ (8000d34 <lcd_display_mode+0x17c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f107 0214 	add.w	r2, r7, #20
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff89 	bl	8000b44 <generate_str_from_mode>
		lcd_set_cursor(1, 8);
 8000c32:	2108      	movs	r1, #8
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff ff61 	bl	8000afc <lcd_set_cursor>
		sprintf(temp, "%s %d\0", buffer, count_2);
 8000c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d38 <lcd_display_mode+0x180>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	f107 0214 	add.w	r2, r7, #20
 8000c42:	1d38      	adds	r0, r7, #4
 8000c44:	493a      	ldr	r1, [pc, #232]	@ (8000d30 <lcd_display_mode+0x178>)
 8000c46:	f002 fec7 	bl	80039d8 <siprintf>
		lcd_send_string(temp);
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff36 	bl	8000abe <lcd_send_string>
		break;
 8000c52:	e05e      	b.n	8000d12 <lcd_display_mode+0x15a>

	case MANUAL:

		generate_str_from_mode(line_1, buffer);
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <lcd_display_mode+0x170>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	f107 0214 	add.w	r2, r7, #20
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff70 	bl	8000b44 <generate_str_from_mode>

		lcd_set_cursor(0, 0);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ff48 	bl	8000afc <lcd_set_cursor>
		lcd_send_string("MODE : MANUAL");
 8000c6c:	4833      	ldr	r0, [pc, #204]	@ (8000d3c <lcd_display_mode+0x184>)
 8000c6e:	f7ff ff26 	bl	8000abe <lcd_send_string>

		lcd_set_cursor(1, 0);
 8000c72:	2100      	movs	r1, #0
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff ff41 	bl	8000afc <lcd_set_cursor>
		sprintf(temp, "1: %s\0", buffer);
 8000c7a:	f107 0214 	add.w	r2, r7, #20
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	492f      	ldr	r1, [pc, #188]	@ (8000d40 <lcd_display_mode+0x188>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fea8 	bl	80039d8 <siprintf>
		lcd_send_string(temp);
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff17 	bl	8000abe <lcd_send_string>

		generate_str_from_mode(line_2, buffer);
 8000c90:	4b28      	ldr	r3, [pc, #160]	@ (8000d34 <lcd_display_mode+0x17c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	f107 0214 	add.w	r2, r7, #20
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff52 	bl	8000b44 <generate_str_from_mode>

		strcpy(temp, "");
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	713b      	strb	r3, [r7, #4]
		lcd_set_cursor(1, 10);
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff ff28 	bl	8000afc <lcd_set_cursor>
		sprintf(temp, "2: %s\0", buffer);
 8000cac:	f107 0214 	add.w	r2, r7, #20
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4924      	ldr	r1, [pc, #144]	@ (8000d44 <lcd_display_mode+0x18c>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fe8f 	bl	80039d8 <siprintf>
		lcd_send_string(temp);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fefe 	bl	8000abe <lcd_send_string>

		break;
 8000cc2:	e026      	b.n	8000d12 <lcd_display_mode+0x15a>

	case MODIFY:

		generate_str_from_mode(line_1, buffer);
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <lcd_display_mode+0x170>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f107 0214 	add.w	r2, r7, #20
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff38 	bl	8000b44 <generate_str_from_mode>

		lcd_set_cursor(0, 0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff10 	bl	8000afc <lcd_set_cursor>
		lcd_send_string("MODE : TUNING");
 8000cdc:	481a      	ldr	r0, [pc, #104]	@ (8000d48 <lcd_display_mode+0x190>)
 8000cde:	f7ff feee 	bl	8000abe <lcd_send_string>

		lcd_set_cursor(1, 0);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff ff09 	bl	8000afc <lcd_set_cursor>
		sprintf(temp, "%s TIME: %d\0", buffer, curent_value);
 8000cea:	f107 0214 	add.w	r2, r7, #20
 8000cee:	1d38      	adds	r0, r7, #4
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	4916      	ldr	r1, [pc, #88]	@ (8000d4c <lcd_display_mode+0x194>)
 8000cf4:	f002 fe70 	bl	80039d8 <siprintf>
		lcd_send_string(temp);
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fedf 	bl	8000abe <lcd_send_string>
		break;
 8000d00:	e007      	b.n	8000d12 <lcd_display_mode+0x15a>

	default:
		lcd_set_cursor(0, 0);
 8000d02:	2100      	movs	r1, #0
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fef9 	bl	8000afc <lcd_set_cursor>
		lcd_send_string("MODE : UNKNOWN");
 8000d0a:	4811      	ldr	r0, [pc, #68]	@ (8000d50 <lcd_display_mode+0x198>)
 8000d0c:	f7ff fed7 	bl	8000abe <lcd_send_string>
		break;
 8000d10:	bf00      	nop
	}
}
 8000d12:	bf00      	nop
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000095 	.word	0x20000095
 8000d20:	20000091 	.word	0x20000091
 8000d24:	0800420c 	.word	0x0800420c
 8000d28:	20000092 	.word	0x20000092
 8000d2c:	20000093 	.word	0x20000093
 8000d30:	08004218 	.word	0x08004218
 8000d34:	2000000c 	.word	0x2000000c
 8000d38:	20000094 	.word	0x20000094
 8000d3c:	08004220 	.word	0x08004220
 8000d40:	08004230 	.word	0x08004230
 8000d44:	08004238 	.word	0x08004238
 8000d48:	08004240 	.word	0x08004240
 8000d4c:	08004250 	.word	0x08004250
 8000d50:	08004260 	.word	0x08004260

08000d54 <is_button_pressed>:
			counterForButtonPress1s[i] = 0;
			flagForButtonPress1s[i] = 0;
		}
	}
}
unsigned char is_button_pressed(uint8_t index) {
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d901      	bls.n	8000d68 <is_button_pressed+0x14>
		return 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e007      	b.n	8000d78 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <is_button_pressed+0x30>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bf0c      	ite	eq
 8000d72:	2301      	moveq	r3, #1
 8000d74:	2300      	movne	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000010 	.word	0x20000010

08000d88 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <is_button_pressed_1s+0x14>
		return 0xff;
 8000d98:	23ff      	movs	r3, #255	@ 0xff
 8000d9a:	e007      	b.n	8000dac <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	4a06      	ldr	r2, [pc, #24]	@ (8000db8 <is_button_pressed_1s+0x30>)
 8000da0:	5cd3      	ldrb	r3, [r2, r3]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	bf0c      	ite	eq
 8000da6:	2301      	moveq	r3, #1
 8000da8:	2300      	movne	r3, #0
 8000daa:	b2db      	uxtb	r3, r3
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000009c 	.word	0x2000009c

08000dbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dcc:	d101      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
		Scheduler_Update();
 8000dce:	f000 facf 	bl	8001370 <Scheduler_Update>
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <BlinkyLED>:
void BlinkyLED(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000de0:	2102      	movs	r1, #2
 8000de2:	4802      	ldr	r0, [pc, #8]	@ (8000dec <BlinkyLED+0x10>)
 8000de4:	f000 ff82 	bl	8001cec <HAL_GPIO_TogglePin>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40010800 	.word	0x40010800

08000df0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000df4:	f000 fc4a 	bl	800168c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000df8:	f000 f840 	bl	8000e7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dfc:	f000 f924 	bl	8001048 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e00:	f000 f8f8 	bl	8000ff4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000e04:	f000 f87c 	bl	8000f00 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000e08:	f000 f8a8 	bl	8000f5c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000e0c:	4815      	ldr	r0, [pc, #84]	@ (8000e64 <main+0x74>)
 8000e0e:	f002 f8a5 	bl	8002f5c <HAL_TIM_Base_Start_IT>
	Scheduler_Init();
 8000e12:	f000 f9c5 	bl	80011a0 <Scheduler_Init>
	lcd_init();
 8000e16:	f7ff fe15 	bl	8000a44 <lcd_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	Scheduler_Add_Task(scanning_led, 1000, 1000 * SCANNING_FREQ / NO_OF_7SEG);
 8000e1a:	22fa      	movs	r2, #250	@ 0xfa
 8000e1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e20:	4811      	ldr	r0, [pc, #68]	@ (8000e68 <main+0x78>)
 8000e22:	f000 fa87 	bl	8001334 <Scheduler_Add_Task>
	Scheduler_Add_Task(fsm_for_button, 30, 10);
 8000e26:	220a      	movs	r2, #10
 8000e28:	211e      	movs	r1, #30
 8000e2a:	4810      	ldr	r0, [pc, #64]	@ (8000e6c <main+0x7c>)
 8000e2c:	f000 fa82 	bl	8001334 <Scheduler_Add_Task>
	Scheduler_Add_Task(fsm_for_traffic_light, 120, 1000 / 2);
 8000e30:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e34:	2178      	movs	r1, #120	@ 0x78
 8000e36:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <main+0x80>)
 8000e38:	f000 fa7c 	bl	8001334 <Scheduler_Add_Task>
	Scheduler_Add_Task(lcd_display_mode, 30, 50);
 8000e3c:	2232      	movs	r2, #50	@ 0x32
 8000e3e:	211e      	movs	r1, #30
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <main+0x84>)
 8000e42:	f000 fa77 	bl	8001334 <Scheduler_Add_Task>
	Scheduler_Add_Task(BlinkyLED, 20, 500);
 8000e46:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e4a:	2114      	movs	r1, #20
 8000e4c:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <main+0x88>)
 8000e4e:	f000 fa71 	bl	8001334 <Scheduler_Add_Task>
	while (1) {
//		Scheduler_Dispatch_Tasks();
		BlinkyLED();
 8000e52:	f7ff ffc3 	bl	8000ddc <BlinkyLED>
		HAL_Delay(500);
 8000e56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e5a:	f000 fc79 	bl	8001750 <HAL_Delay>
		BlinkyLED();
 8000e5e:	bf00      	nop
 8000e60:	e7f7      	b.n	8000e52 <main+0x62>
 8000e62:	bf00      	nop
 8000e64:	200000f4 	.word	0x200000f4
 8000e68:	080005b1 	.word	0x080005b1
 8000e6c:	0800014d 	.word	0x0800014d
 8000e70:	08000865 	.word	0x08000865
 8000e74:	08000bb9 	.word	0x08000bb9
 8000e78:	08000ddd 	.word	0x08000ddd

08000e7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b090      	sub	sp, #64	@ 0x40
 8000e80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	2228      	movs	r2, #40	@ 0x28
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fdc4 	bl	8003a18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea6:	2310      	movs	r3, #16
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eb2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eb8:	f107 0318 	add.w	r3, r7, #24
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 fbed 	bl	800269c <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x50>
		Error_Handler();
 8000ec8:	f000 f964 	bl	8001194 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000ed4:	23a0      	movs	r3, #160	@ 0xa0
 8000ed6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000edc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fe5a 	bl	8002ba0 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x7a>
		Error_Handler();
 8000ef2:	f000 f94f 	bl	8001194 <Error_Handler>
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	3740      	adds	r7, #64	@ 0x40
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f06:	4a13      	ldr	r2, [pc, #76]	@ (8000f54 <MX_I2C1_Init+0x54>)
 8000f08:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f0c:	4a12      	ldr	r2, [pc, #72]	@ (8000f58 <MX_I2C1_Init+0x58>)
 8000f0e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f22:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f30:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <MX_I2C1_Init+0x50>)
 8000f3e:	f000 ff11 	bl	8001d64 <HAL_I2C_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000f48:	f000 f924 	bl	8001194 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000a0 	.word	0x200000a0
 8000f54:	40005400 	.word	0x40005400
 8000f58:	000186a0 	.word	0x000186a0

08000f5c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <MX_TIM2_Init+0x94>)
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f7e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <MX_TIM2_Init+0x94>)
 8000f82:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f86:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <MX_TIM2_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <MX_TIM2_Init+0x94>)
 8000f90:	2209      	movs	r2, #9
 8000f92:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_TIM2_Init+0x94>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <MX_TIM2_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000fa0:	4813      	ldr	r0, [pc, #76]	@ (8000ff0 <MX_TIM2_Init+0x94>)
 8000fa2:	f001 ff8b 	bl	8002ebc <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000fac:	f000 f8f2 	bl	8001194 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <MX_TIM2_Init+0x94>)
 8000fbe:	f002 f90f 	bl	80031e0 <HAL_TIM_ConfigClockSource>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0x70>
		Error_Handler();
 8000fc8:	f000 f8e4 	bl	8001194 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_TIM2_Init+0x94>)
 8000fda:	f002 faf1 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000fe4:	f000 f8d6 	bl	8001194 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200000f4 	.word	0x200000f4

08000ff4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <MX_USART2_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 800102c:	f002 fb38 	bl	80036a0 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001036:	f000 f8ad 	bl	8001194 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000013c 	.word	0x2000013c
 8001044:	40004400 	.word	0x40004400

08001048 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	4b48      	ldr	r3, [pc, #288]	@ (8001180 <MX_GPIO_Init+0x138>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a47      	ldr	r2, [pc, #284]	@ (8001180 <MX_GPIO_Init+0x138>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b45      	ldr	r3, [pc, #276]	@ (8001180 <MX_GPIO_Init+0x138>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001074:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <MX_GPIO_Init+0x138>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a41      	ldr	r2, [pc, #260]	@ (8001180 <MX_GPIO_Init+0x138>)
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <MX_GPIO_Init+0x138>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b3c      	ldr	r3, [pc, #240]	@ (8001180 <MX_GPIO_Init+0x138>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a3b      	ldr	r2, [pc, #236]	@ (8001180 <MX_GPIO_Init+0x138>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b39      	ldr	r3, [pc, #228]	@ (8001180 <MX_GPIO_Init+0x138>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b36      	ldr	r3, [pc, #216]	@ (8001180 <MX_GPIO_Init+0x138>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <MX_GPIO_Init+0x138>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b33      	ldr	r3, [pc, #204]	@ (8001180 <MX_GPIO_Init+0x138>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80010bc:	2200      	movs	r2, #0
 80010be:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80010c2:	4830      	ldr	r0, [pc, #192]	@ (8001184 <MX_GPIO_Init+0x13c>)
 80010c4:	f000 fdfa 	bl	8001cbc <HAL_GPIO_WritePin>
					| SEG_5_Pin | SEG_6_Pin | LED_RED_1_Pin | LED_AMBER_1_Pin
					| LED_GREEN_1_Pin | LED_RED_2_Pin | LED_AMBER_2_Pin
					| LED_GREEN_2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2102      	movs	r1, #2
 80010cc:	482e      	ldr	r0, [pc, #184]	@ (8001188 <MX_GPIO_Init+0x140>)
 80010ce:	f000 fdf5 	bl	8001cbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin,
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80010d8:	482c      	ldr	r0, [pc, #176]	@ (800118c <MX_GPIO_Init+0x144>)
 80010da:	f000 fdef 	bl	8001cbc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80010de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <MX_GPIO_Init+0x148>)
 80010e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	4824      	ldr	r0, [pc, #144]	@ (8001184 <MX_GPIO_Init+0x13c>)
 80010f4:	f000 fc5e 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
	 SEG_4_Pin SEG_5_Pin SEG_6_Pin LED_RED_1_Pin
	 LED_AMBER_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin LED_AMBER_2_Pin
	 LED_GREEN_2_Pin */
	GPIO_InitStruct.Pin = SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin
 80010f8:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010fc:	613b      	str	r3, [r7, #16]
			| SEG_4_Pin | SEG_5_Pin | SEG_6_Pin | LED_RED_1_Pin
			| LED_AMBER_1_Pin | LED_GREEN_1_Pin | LED_RED_2_Pin
			| LED_AMBER_2_Pin | LED_GREEN_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	481c      	ldr	r0, [pc, #112]	@ (8001184 <MX_GPIO_Init+0x13c>)
 8001112:	f000 fc4f 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RED_LED_Pin */
	GPIO_InitStruct.Pin = RED_LED_Pin;
 8001116:	2302      	movs	r3, #2
 8001118:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2302      	movs	r3, #2
 8001124:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4619      	mov	r1, r3
 800112c:	4816      	ldr	r0, [pc, #88]	@ (8001188 <MX_GPIO_Init+0x140>)
 800112e:	f000 fc41 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 8001132:	2370      	movs	r3, #112	@ 0x70
 8001134:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4619      	mov	r1, r3
 8001144:	4810      	ldr	r0, [pc, #64]	@ (8001188 <MX_GPIO_Init+0x140>)
 8001146:	f000 fc35 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
	GPIO_InitStruct.Pin = EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin;
 800114a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800114e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2302      	movs	r3, #2
 800115a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	480a      	ldr	r0, [pc, #40]	@ (800118c <MX_GPIO_Init+0x144>)
 8001164:	f000 fc26 	bl	80019b4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2028      	movs	r0, #40	@ 0x28
 800116e:	f000 fbea 	bl	8001946 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001172:	2028      	movs	r0, #40	@ 0x28
 8001174:	f000 fc03 	bl	800197e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000
 8001184:	40011000 	.word	0x40011000
 8001188:	40010800 	.word	0x40010800
 800118c:	40010c00 	.word	0x40010c00
 8001190:	10110000 	.word	0x10110000

08001194 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <Error_Handler+0x8>

080011a0 <Scheduler_Init>:
		task->runMe = 0;
		return 1;
	}
	return 0;
}
void Scheduler_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
	if (!tasks.head) {
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <Scheduler_Init+0x58>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <Scheduler_Init+0x1c>
		tasks.head = NULL;
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <Scheduler_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
		tasks.nTasks = 0;
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <Scheduler_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
			current = current->next;
			free(tmp);
		}
		tasks.head = NULL;
	}
}
 80011ba:	e018      	b.n	80011ee <Scheduler_Init+0x4e>
		TaskNode *current = tasks.head;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <Scheduler_Init+0x58>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	72fb      	strb	r3, [r7, #11]
 80011c6:	e00a      	b.n	80011de <Scheduler_Init+0x3e>
			TaskNode *tmp = current;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	607b      	str	r3, [r7, #4]
			current = current->next;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	60fb      	str	r3, [r7, #12]
			free(tmp);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f002 fb4a 	bl	800386c <free>
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	3301      	adds	r3, #1
 80011dc:	72fb      	strb	r3, [r7, #11]
 80011de:	7afa      	ldrb	r2, [r7, #11]
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <Scheduler_Init+0x58>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3ef      	bcc.n	80011c8 <Scheduler_Init+0x28>
		tasks.head = NULL;
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <Scheduler_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000184 	.word	0x20000184

080011fc <Scheduler_Add_Task_ID>:
uint32_t Scheduler_Add_Task_ID(void (*pF)(void), uint32_t taskID,
		uint32_t DELAY, uint32_t PERIOD) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
	TaskNode *newTask = (TaskNode*) malloc(sizeof(TaskNode));
 800120a:	2018      	movs	r0, #24
 800120c:	f002 fb26 	bl	800385c <malloc>
 8001210:	4603      	mov	r3, r0
 8001212:	617b      	str	r3, [r7, #20]
	if (tasks.nTasks >= MAX_TASKS || !newTask)
 8001214:	4b46      	ldr	r3, [pc, #280]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b09      	cmp	r3, #9
 800121a:	d802      	bhi.n	8001222 <Scheduler_Add_Task_ID+0x26>
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <Scheduler_Add_Task_ID+0x2a>
		return ADD_TASK_ERROR;
 8001222:	236e      	movs	r3, #110	@ 0x6e
 8001224:	e07f      	b.n	8001326 <Scheduler_Add_Task_ID+0x12a>
	newTask->pTask = pF;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	601a      	str	r2, [r3, #0]
	newTask->delay = DELAY;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	609a      	str	r2, [r3, #8]
	newTask->period = PERIOD;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	60da      	str	r2, [r3, #12]
	newTask->runMe = 0;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2200      	movs	r2, #0
 800123c:	741a      	strb	r2, [r3, #16]
	newTask->TaskID = taskID;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	615a      	str	r2, [r3, #20]
	newTask->next = NULL;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]

	if (!tasks.head || DELAY <= tasks.head->delay) {
 800124a:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <Scheduler_Add_Task_ID+0x62>
 8001252:	4b37      	ldr	r3, [pc, #220]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d813      	bhi.n	8001286 <Scheduler_Add_Task_ID+0x8a>
		// add at head
		if (tasks.head) {
 800125e:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <Scheduler_Add_Task_ID+0x7a>
			tasks.head->delay -= DELAY;
 8001266:	4b32      	ldr	r3, [pc, #200]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6899      	ldr	r1, [r3, #8]
 800126c:	4b30      	ldr	r3, [pc, #192]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	1a8a      	subs	r2, r1, r2
 8001274:	609a      	str	r2, [r3, #8]
		}
		newTask->next = tasks.head;
 8001276:	4b2e      	ldr	r3, [pc, #184]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	605a      	str	r2, [r3, #4]
		tasks.head = newTask;
 800127e:	4a2c      	ldr	r2, [pc, #176]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	e048      	b.n	8001318 <Scheduler_Add_Task_ID+0x11c>
	} else {
		// add at middle
		uint32_t sumDelay = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
		TaskNode *current = tasks.head;
 800128a:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	623b      	str	r3, [r7, #32]
		TaskNode *prev = NULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < tasks.nTasks; i++) {
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	e029      	b.n	80012ee <Scheduler_Add_Task_ID+0xf2>
			sumDelay += current->delay;
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a0:	4413      	add	r3, r2
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
			if (sumDelay > DELAY) {
 80012a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d918      	bls.n	80012de <Scheduler_Add_Task_ID+0xe2>
				newTask->delay = DELAY - (sumDelay - current->delay);
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	1ad2      	subs	r2, r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	441a      	add	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	609a      	str	r2, [r3, #8]
				current->delay -= newTask->delay;
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	1ad2      	subs	r2, r2, r3
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	609a      	str	r2, [r3, #8]
				newTask->next = current;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	6a3a      	ldr	r2, [r7, #32]
 80012ce:	605a      	str	r2, [r3, #4]
				if (prev) {
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d011      	beq.n	80012fa <Scheduler_Add_Task_ID+0xfe>
					prev->next = newTask;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	605a      	str	r2, [r3, #4]
				}
				break;
 80012dc:	e00d      	b.n	80012fa <Scheduler_Add_Task_ID+0xfe>
			}
			prev = current;
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	61fb      	str	r3, [r7, #28]
			current = current->next;
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < tasks.nTasks; i++) {
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	3301      	adds	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8d0      	bhi.n	800129a <Scheduler_Add_Task_ID+0x9e>
 80012f8:	e000      	b.n	80012fc <Scheduler_Add_Task_ID+0x100>
				break;
 80012fa:	bf00      	nop
		}
		// add at bottom
		if (!current && prev) {
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10a      	bne.n	8001318 <Scheduler_Add_Task_ID+0x11c>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <Scheduler_Add_Task_ID+0x11c>
			newTask->delay = DELAY - sumDelay;
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	1ad2      	subs	r2, r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	609a      	str	r2, [r3, #8]
			prev->next = newTask;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	605a      	str	r2, [r3, #4]
		}
	}
	tasks.nTasks++;
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <Scheduler_Add_Task_ID+0x134>)
 8001320:	6053      	str	r3, [r2, #4]
	return newTask->TaskID;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	695b      	ldr	r3, [r3, #20]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3728      	adds	r7, #40	@ 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000184 	.word	0x20000184

08001334 <Scheduler_Add_Task>:
uint32_t Scheduler_Add_Task(void (*pF)(void), uint32_t DELAY, uint32_t PERIOD) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	return Scheduler_Add_Task_ID(pF, tasks.nTasks, DELAY / TICK,
 8001340:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <Scheduler_Add_Task+0x34>)
 8001342:	6859      	ldr	r1, [r3, #4]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4a09      	ldr	r2, [pc, #36]	@ (800136c <Scheduler_Add_Task+0x38>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4806      	ldr	r0, [pc, #24]	@ (800136c <Scheduler_Add_Task+0x38>)
 8001352:	fba0 0303 	umull	r0, r3, r0, r3
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f7ff ff4f 	bl	80011fc <Scheduler_Add_Task_ID>
 800135e:	4603      	mov	r3, r0
			PERIOD / TICK);
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000184 	.word	0x20000184
 800136c:	cccccccd 	.word	0xcccccccd

08001370 <Scheduler_Update>:

void Scheduler_Update(void) {
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	if (!tasks.head)
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <Scheduler_Update+0x34>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00f      	beq.n	800139c <Scheduler_Update+0x2c>
		return;
	if (tasks.head->delay <= 0) {
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <Scheduler_Update+0x34>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d104      	bne.n	8001390 <Scheduler_Update+0x20>
		tasks.head->runMe = 1;
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <Scheduler_Update+0x34>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2201      	movs	r2, #1
 800138c:	741a      	strb	r2, [r3, #16]
 800138e:	e006      	b.n	800139e <Scheduler_Update+0x2e>
	} else
		tasks.head->delay--;
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <Scheduler_Update+0x34>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	3a01      	subs	r2, #1
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	e000      	b.n	800139e <Scheduler_Update+0x2e>
		return;
 800139c:	bf00      	nop
}
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000184 	.word	0x20000184

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <HAL_MspInit+0x5c>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <HAL_MspInit+0x5c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6193      	str	r3, [r2, #24]
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <HAL_MspInit+0x5c>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_MspInit+0x5c>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <HAL_MspInit+0x5c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <HAL_MspInit+0x5c>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_MspInit+0x60>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <HAL_MspInit+0x60>)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000

0800140c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a15      	ldr	r2, [pc, #84]	@ (800147c <HAL_I2C_MspInit+0x70>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d123      	bne.n	8001474 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_I2C_MspInit+0x74>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <HAL_I2C_MspInit+0x74>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <HAL_I2C_MspInit+0x74>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001444:	23c0      	movs	r3, #192	@ 0xc0
 8001446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001448:	2312      	movs	r3, #18
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	@ (8001484 <HAL_I2C_MspInit+0x78>)
 8001458:	f000 faac 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <HAL_I2C_MspInit+0x74>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	4a07      	ldr	r2, [pc, #28]	@ (8001480 <HAL_I2C_MspInit+0x74>)
 8001462:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001466:	61d3      	str	r3, [r2, #28]
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_I2C_MspInit+0x74>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001474:	bf00      	nop
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40005400 	.word	0x40005400
 8001480:	40021000 	.word	0x40021000
 8001484:	40010c00 	.word	0x40010c00

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001498:	d113      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <HAL_TIM_Base_MspInit+0x44>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	201c      	movs	r0, #28
 80014b8:	f000 fa45 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014bc:	201c      	movs	r0, #28
 80014be:	f000 fa5e 	bl	800197e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <HAL_UART_MspInit+0x70>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d123      	bne.n	8001538 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f0:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <HAL_UART_MspInit+0x74>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <HAL_UART_MspInit+0x74>)
 80014f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014fa:	61d3      	str	r3, [r2, #28]
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_UART_MspInit+0x74>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_UART_MspInit+0x74>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <HAL_UART_MspInit+0x74>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_UART_MspInit+0x74>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001520:	230c      	movs	r3, #12
 8001522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2302      	movs	r3, #2
 800152a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	@ (8001548 <HAL_UART_MspInit+0x78>)
 8001534:	f000 fa3e 	bl	80019b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40004400 	.word	0x40004400
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <NMI_Handler+0x4>

08001554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <MemManage_Handler+0x4>

08001564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <UsageFault_Handler+0x4>

08001574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 f8bc 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <TIM2_IRQHandler+0x10>)
 80015aa:	f001 fd29 	bl	8003000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200000f4 	.word	0x200000f4

080015b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015c0:	f000 fbae 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	@ (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f002 fa26 	bl	8003a48 <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	@ (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	@ (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20005000 	.word	0x20005000
 8001628:	00000400 	.word	0x00000400
 800162c:	2000018c 	.word	0x2000018c
 8001630:	200002e0 	.word	0x200002e0

08001634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001640:	f7ff fff8 	bl	8001634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480b      	ldr	r0, [pc, #44]	@ (8001674 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001646:	490c      	ldr	r1, [pc, #48]	@ (8001678 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001648:	4a0c      	ldr	r2, [pc, #48]	@ (800167c <LoopFillZerobss+0x16>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a09      	ldr	r2, [pc, #36]	@ (8001680 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800165c:	4c09      	ldr	r4, [pc, #36]	@ (8001684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f002 f9f3 	bl	8003a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800166e:	f7ff fbbf 	bl	8000df0 <main>
  bx lr
 8001672:	4770      	bx	lr
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800167c:	080042d8 	.word	0x080042d8
  ldr r2, =_sbss
 8001680:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001684:	200002dc 	.word	0x200002dc

08001688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC1_2_IRQHandler>
	...

0800168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_Init+0x28>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	@ (80016b4 <HAL_Init+0x28>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f947 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fe7e 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40022000 	.word	0x40022000

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f95f 	bl	800199a <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f927 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000014 	.word	0x20000014
 8001710:	2000001c 	.word	0x2000001c
 8001714:	20000018 	.word	0x20000018

08001718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_IncTick+0x1c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_IncTick+0x20>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a03      	ldr	r2, [pc, #12]	@ (8001738 <HAL_IncTick+0x20>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	2000001c 	.word	0x2000001c
 8001738:	20000190 	.word	0x20000190

0800173c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b02      	ldr	r3, [pc, #8]	@ (800174c <HAL_GetTick+0x10>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000190 	.word	0x20000190

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff fff0 	bl	800173c <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffe0 	bl	800173c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000001c 	.word	0x2000001c

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4906      	ldr	r1, [pc, #24]	@ (8001830 <__NVIC_EnableIRQ+0x34>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff90 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	@ (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff2d 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff42 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff90 	bl	8001888 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5f 	bl	8001834 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff35 	bl	80017fc <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b08b      	sub	sp, #44	@ 0x2c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	e169      	b.n	8001c9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019c8:	2201      	movs	r2, #1
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8158 	bne.w	8001c96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a9a      	ldr	r2, [pc, #616]	@ (8001c54 <HAL_GPIO_Init+0x2a0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d05e      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 80019f0:	4a98      	ldr	r2, [pc, #608]	@ (8001c54 <HAL_GPIO_Init+0x2a0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d875      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 80019f6:	4a98      	ldr	r2, [pc, #608]	@ (8001c58 <HAL_GPIO_Init+0x2a4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d058      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 80019fc:	4a96      	ldr	r2, [pc, #600]	@ (8001c58 <HAL_GPIO_Init+0x2a4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d86f      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a02:	4a96      	ldr	r2, [pc, #600]	@ (8001c5c <HAL_GPIO_Init+0x2a8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d052      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 8001a08:	4a94      	ldr	r2, [pc, #592]	@ (8001c5c <HAL_GPIO_Init+0x2a8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d869      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a0e:	4a94      	ldr	r2, [pc, #592]	@ (8001c60 <HAL_GPIO_Init+0x2ac>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d04c      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 8001a14:	4a92      	ldr	r2, [pc, #584]	@ (8001c60 <HAL_GPIO_Init+0x2ac>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d863      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a1a:	4a92      	ldr	r2, [pc, #584]	@ (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d046      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 8001a20:	4a90      	ldr	r2, [pc, #576]	@ (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d85d      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d82a      	bhi.n	8001a80 <HAL_GPIO_Init+0xcc>
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d859      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <HAL_GPIO_Init+0x80>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001a89 	.word	0x08001a89
 8001a3c:	08001a9b 	.word	0x08001a9b
 8001a40:	08001add 	.word	0x08001add
 8001a44:	08001ae3 	.word	0x08001ae3
 8001a48:	08001ae3 	.word	0x08001ae3
 8001a4c:	08001ae3 	.word	0x08001ae3
 8001a50:	08001ae3 	.word	0x08001ae3
 8001a54:	08001ae3 	.word	0x08001ae3
 8001a58:	08001ae3 	.word	0x08001ae3
 8001a5c:	08001ae3 	.word	0x08001ae3
 8001a60:	08001ae3 	.word	0x08001ae3
 8001a64:	08001ae3 	.word	0x08001ae3
 8001a68:	08001ae3 	.word	0x08001ae3
 8001a6c:	08001ae3 	.word	0x08001ae3
 8001a70:	08001ae3 	.word	0x08001ae3
 8001a74:	08001ae3 	.word	0x08001ae3
 8001a78:	08001a91 	.word	0x08001a91
 8001a7c:	08001aa5 	.word	0x08001aa5
 8001a80:	4a79      	ldr	r2, [pc, #484]	@ (8001c68 <HAL_GPIO_Init+0x2b4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a86:	e02c      	b.n	8001ae2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	623b      	str	r3, [r7, #32]
          break;
 8001a8e:	e029      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	3304      	adds	r3, #4
 8001a96:	623b      	str	r3, [r7, #32]
          break;
 8001a98:	e024      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	623b      	str	r3, [r7, #32]
          break;
 8001aa2:	e01f      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e01a      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e013      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	611a      	str	r2, [r3, #16]
          break;
 8001ace:	e009      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	615a      	str	r2, [r3, #20]
          break;
 8001ada:	e003      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
          break;
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          break;
 8001ae2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2bff      	cmp	r3, #255	@ 0xff
 8001ae8:	d801      	bhi.n	8001aee <HAL_GPIO_Init+0x13a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	e001      	b.n	8001af2 <HAL_GPIO_Init+0x13e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3304      	adds	r3, #4
 8001af2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2bff      	cmp	r3, #255	@ 0xff
 8001af8:	d802      	bhi.n	8001b00 <HAL_GPIO_Init+0x14c>
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	e002      	b.n	8001b06 <HAL_GPIO_Init+0x152>
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	3b08      	subs	r3, #8
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	6a39      	ldr	r1, [r7, #32]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	431a      	orrs	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80b1 	beq.w	8001c96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b34:	4b4d      	ldr	r3, [pc, #308]	@ (8001c6c <HAL_GPIO_Init+0x2b8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	@ (8001c6c <HAL_GPIO_Init+0x2b8>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b4a      	ldr	r3, [pc, #296]	@ (8001c6c <HAL_GPIO_Init+0x2b8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b4c:	4a48      	ldr	r2, [pc, #288]	@ (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a40      	ldr	r2, [pc, #256]	@ (8001c74 <HAL_GPIO_Init+0x2c0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <HAL_GPIO_Init+0x1ec>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c78 <HAL_GPIO_Init+0x2c4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_GPIO_Init+0x1e8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3e      	ldr	r2, [pc, #248]	@ (8001c7c <HAL_GPIO_Init+0x2c8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x1e4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_GPIO_Init+0x1e0>
 8001b90:	2303      	movs	r3, #3
 8001b92:	e006      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e004      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba4:	f002 0203 	and.w	r2, r2, #3
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bb2:	492f      	ldr	r1, [pc, #188]	@ (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	492c      	ldr	r1, [pc, #176]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bda:	4b2a      	ldr	r3, [pc, #168]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4928      	ldr	r1, [pc, #160]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf4:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4922      	ldr	r1, [pc, #136]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	491e      	ldr	r1, [pc, #120]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4918      	ldr	r1, [pc, #96]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c2a:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4914      	ldr	r1, [pc, #80]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d021      	beq.n	8001c88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	490e      	ldr	r1, [pc, #56]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e021      	b.n	8001c96 <HAL_GPIO_Init+0x2e2>
 8001c52:	bf00      	nop
 8001c54:	10320000 	.word	0x10320000
 8001c58:	10310000 	.word	0x10310000
 8001c5c:	10220000 	.word	0x10220000
 8001c60:	10210000 	.word	0x10210000
 8001c64:	10120000 	.word	0x10120000
 8001c68:	10110000 	.word	0x10110000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40010800 	.word	0x40010800
 8001c78:	40010c00 	.word	0x40010c00
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	40011400 	.word	0x40011400
 8001c84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	4909      	ldr	r1, [pc, #36]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	3301      	adds	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f47f ae8e 	bne.w	80019c8 <HAL_GPIO_Init+0x14>
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	372c      	adds	r7, #44	@ 0x2c
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd8:	e003      	b.n	8001ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	611a      	str	r2, [r3, #16]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4013      	ands	r3, r2
 8001d04:	041a      	lsls	r2, r3, #16
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43d9      	mvns	r1, r3
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	611a      	str	r2, [r3, #16]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d36:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f806 	bl	8001d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e12b      	b.n	8001fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fb3e 	bl	800140c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2224      	movs	r2, #36	@ 0x24
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc8:	f001 f832 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8001dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a81      	ldr	r2, [pc, #516]	@ (8001fd8 <HAL_I2C_Init+0x274>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d807      	bhi.n	8001de8 <HAL_I2C_Init+0x84>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4a80      	ldr	r2, [pc, #512]	@ (8001fdc <HAL_I2C_Init+0x278>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	bf94      	ite	ls
 8001de0:	2301      	movls	r3, #1
 8001de2:	2300      	movhi	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e006      	b.n	8001df6 <HAL_I2C_Init+0x92>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a7d      	ldr	r2, [pc, #500]	@ (8001fe0 <HAL_I2C_Init+0x27c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0e7      	b.n	8001fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a78      	ldr	r2, [pc, #480]	@ (8001fe4 <HAL_I2C_Init+0x280>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9b      	lsrs	r3, r3, #18
 8001e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a6a      	ldr	r2, [pc, #424]	@ (8001fd8 <HAL_I2C_Init+0x274>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d802      	bhi.n	8001e38 <HAL_I2C_Init+0xd4>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	3301      	adds	r3, #1
 8001e36:	e009      	b.n	8001e4c <HAL_I2C_Init+0xe8>
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	4a69      	ldr	r2, [pc, #420]	@ (8001fe8 <HAL_I2C_Init+0x284>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	495c      	ldr	r1, [pc, #368]	@ (8001fd8 <HAL_I2C_Init+0x274>)
 8001e68:	428b      	cmp	r3, r1
 8001e6a:	d819      	bhi.n	8001ea0 <HAL_I2C_Init+0x13c>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e59      	subs	r1, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7a:	1c59      	adds	r1, r3, #1
 8001e7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e80:	400b      	ands	r3, r1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <HAL_I2C_Init+0x138>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1e59      	subs	r1, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9a:	e051      	b.n	8001f40 <HAL_I2C_Init+0x1dc>
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	e04f      	b.n	8001f40 <HAL_I2C_Init+0x1dc>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d111      	bne.n	8001ecc <HAL_I2C_Init+0x168>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	440b      	add	r3, r1
 8001eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e012      	b.n	8001ef2 <HAL_I2C_Init+0x18e>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	0099      	lsls	r1, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Init+0x196>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e022      	b.n	8001f40 <HAL_I2C_Init+0x1dc>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10e      	bne.n	8001f20 <HAL_I2C_Init+0x1bc>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1e58      	subs	r0, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	440b      	add	r3, r1
 8001f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f1e:	e00f      	b.n	8001f40 <HAL_I2C_Init+0x1dc>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	0099      	lsls	r1, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	6809      	ldr	r1, [r1, #0]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6911      	ldr	r1, [r2, #16]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68d2      	ldr	r2, [r2, #12]
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	000186a0 	.word	0x000186a0
 8001fdc:	001e847f 	.word	0x001e847f
 8001fe0:	003d08ff 	.word	0x003d08ff
 8001fe4:	431bde83 	.word	0x431bde83
 8001fe8:	10624dd3 	.word	0x10624dd3

08001fec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	817b      	strh	r3, [r7, #10]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff fb9c 	bl	800173c <HAL_GetTick>
 8002004:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	f040 80e0 	bne.w	80021d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2319      	movs	r3, #25
 800201a:	2201      	movs	r2, #1
 800201c:	4970      	ldr	r1, [pc, #448]	@ (80021e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f964 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
 800202c:	e0d3      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_I2C_Master_Transmit+0x50>
 8002038:	2302      	movs	r3, #2
 800203a:	e0cc      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d007      	beq.n	8002062 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002070:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2221      	movs	r2, #33	@ 0x21
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2210      	movs	r2, #16
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	893a      	ldrh	r2, [r7, #8]
 8002092:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a50      	ldr	r2, [pc, #320]	@ (80021e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80020a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020a4:	8979      	ldrh	r1, [r7, #10]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f89c 	bl	80021e8 <I2C_MasterRequestWrite>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e08d      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020d0:	e066      	b.n	80021a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fa22 	bl	8002520 <I2C_WaitOnTXEFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00d      	beq.n	80020fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d107      	bne.n	80020fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06b      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d11b      	bne.n	8002174 <HAL_I2C_Master_Transmit+0x188>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	d017      	beq.n	8002174 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	6a39      	ldr	r1, [r7, #32]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fa19 	bl	80025b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00d      	beq.n	80021a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	2b04      	cmp	r3, #4
 800218a:	d107      	bne.n	800219c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800219a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e01a      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d194      	bne.n	80020d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	00100002 	.word	0x00100002
 80021e4:	ffff0000 	.word	0xffff0000

080021e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	460b      	mov	r3, r1
 80021f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d006      	beq.n	8002212 <I2C_MasterRequestWrite+0x2a>
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d003      	beq.n	8002212 <I2C_MasterRequestWrite+0x2a>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002210:	d108      	bne.n	8002224 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e00b      	b.n	800223c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	2b12      	cmp	r3, #18
 800222a:	d107      	bne.n	800223c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800223a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f84f 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002262:	d103      	bne.n	800226c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e035      	b.n	80022dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002278:	d108      	bne.n	800228c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800227a:	897b      	ldrh	r3, [r7, #10]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002288:	611a      	str	r2, [r3, #16]
 800228a:	e01b      	b.n	80022c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800228c:	897b      	ldrh	r3, [r7, #10]
 800228e:	11db      	asrs	r3, r3, #7
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f003 0306 	and.w	r3, r3, #6
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f063 030f 	orn	r3, r3, #15
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	490e      	ldr	r1, [pc, #56]	@ (80022e4 <I2C_MasterRequestWrite+0xfc>)
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f898 	bl	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e010      	b.n	80022dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022ba:	897b      	ldrh	r3, [r7, #10]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4907      	ldr	r1, [pc, #28]	@ (80022e8 <I2C_MasterRequestWrite+0x100>)
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f888 	bl	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	00010008 	.word	0x00010008
 80022e8:	00010002 	.word	0x00010002

080022ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022fc:	e048      	b.n	8002390 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d044      	beq.n	8002390 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7ff fa19 	bl	800173c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d139      	bne.n	8002390 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10d      	bne.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	43da      	mvns	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4013      	ands	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	e00c      	b.n	800235c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	43da      	mvns	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4013      	ands	r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	429a      	cmp	r2, r3
 8002360:	d116      	bne.n	8002390 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e023      	b.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	0c1b      	lsrs	r3, r3, #16
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10d      	bne.n	80023b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	43da      	mvns	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4013      	ands	r3, r2
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	e00c      	b.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	43da      	mvns	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4013      	ands	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d093      	beq.n	80022fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ee:	e071      	b.n	80024d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023fe:	d123      	bne.n	8002448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002418:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f043 0204 	orr.w	r2, r3, #4
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e067      	b.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d041      	beq.n	80024d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002450:	f7ff f974 	bl	800173c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	d302      	bcc.n	8002466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d136      	bne.n	80024d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d10c      	bne.n	800248a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4013      	ands	r3, r2
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e00b      	b.n	80024a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	43da      	mvns	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4013      	ands	r3, r2
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d016      	beq.n	80024d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e021      	b.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	0c1b      	lsrs	r3, r3, #16
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d10c      	bne.n	80024f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	43da      	mvns	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4013      	ands	r3, r2
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e00b      	b.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4013      	ands	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	f47f af6d 	bne.w	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800252c:	e034      	b.n	8002598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f886 	bl	8002640 <I2C_IsAcknowledgeFailed>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e034      	b.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d028      	beq.n	8002598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7ff f8f9 	bl	800173c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d11d      	bne.n	8002598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002566:	2b80      	cmp	r3, #128	@ 0x80
 8002568:	d016      	beq.n	8002598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	f043 0220 	orr.w	r2, r3, #32
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a2:	2b80      	cmp	r3, #128	@ 0x80
 80025a4:	d1c3      	bne.n	800252e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025bc:	e034      	b.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f83e 	bl	8002640 <I2C_IsAcknowledgeFailed>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e034      	b.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d028      	beq.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7ff f8b1 	bl	800173c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d11d      	bne.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d016      	beq.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e007      	b.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b04      	cmp	r3, #4
 8002634:	d1c3      	bne.n	80025be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002656:	d11b      	bne.n	8002690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f043 0204 	orr.w	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e272      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8087 	beq.w	80027ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026bc:	4b92      	ldr	r3, [pc, #584]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d00c      	beq.n	80026e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d112      	bne.n	80026fa <HAL_RCC_OscConfig+0x5e>
 80026d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e0:	d10b      	bne.n	80026fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e2:	4b89      	ldr	r3, [pc, #548]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d06c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x12c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d168      	bne.n	80027c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e24c      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x76>
 8002704:	4b80      	ldr	r3, [pc, #512]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a7f      	ldr	r2, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	e02e      	b.n	8002770 <HAL_RCC_OscConfig+0xd4>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x98>
 800271a:	4b7b      	ldr	r3, [pc, #492]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a7a      	ldr	r2, [pc, #488]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b78      	ldr	r3, [pc, #480]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a77      	ldr	r2, [pc, #476]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 800272c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e01d      	b.n	8002770 <HAL_RCC_OscConfig+0xd4>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0xbc>
 800273e:	4b72      	ldr	r3, [pc, #456]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a71      	ldr	r2, [pc, #452]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a6e      	ldr	r2, [pc, #440]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e00b      	b.n	8002770 <HAL_RCC_OscConfig+0xd4>
 8002758:	4b6b      	ldr	r3, [pc, #428]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a6a      	ldr	r2, [pc, #424]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 800275e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	4b68      	ldr	r3, [pc, #416]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a67      	ldr	r2, [pc, #412]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 800276a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800276e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d013      	beq.n	80027a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe ffe0 	bl	800173c <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002780:	f7fe ffdc 	bl	800173c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	@ 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e200      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	4b5d      	ldr	r3, [pc, #372]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0xe4>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe ffcc 	bl	800173c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a8:	f7fe ffc8 	bl	800173c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	@ 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1ec      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	4b53      	ldr	r3, [pc, #332]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x10c>
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d063      	beq.n	800289e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027e2:	4b49      	ldr	r3, [pc, #292]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d11c      	bne.n	8002828 <HAL_RCC_OscConfig+0x18c>
 80027ee:	4b46      	ldr	r3, [pc, #280]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fa:	4b43      	ldr	r3, [pc, #268]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_RCC_OscConfig+0x176>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e1c0      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	4b3d      	ldr	r3, [pc, #244]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4939      	ldr	r1, [pc, #228]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	e03a      	b.n	800289e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002830:	4b36      	ldr	r3, [pc, #216]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe ff81 	bl	800173c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283e:	f7fe ff7d 	bl	800173c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1a1      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4927      	ldr	r1, [pc, #156]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
 8002870:	e015      	b.n	800289e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002872:	4b26      	ldr	r3, [pc, #152]	@ (800290c <HAL_RCC_OscConfig+0x270>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe ff60 	bl	800173c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002880:	f7fe ff5c 	bl	800173c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e180      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	4b1d      	ldr	r3, [pc, #116]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d03a      	beq.n	8002920 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d019      	beq.n	80028e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b2:	4b17      	ldr	r3, [pc, #92]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b8:	f7fe ff40 	bl	800173c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c0:	f7fe ff3c 	bl	800173c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e160      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028de:	2001      	movs	r0, #1
 80028e0:	f000 face 	bl	8002e80 <RCC_Delay>
 80028e4:	e01c      	b.n	8002920 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <HAL_RCC_OscConfig+0x274>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ec:	f7fe ff26 	bl	800173c <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f2:	e00f      	b.n	8002914 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f4:	f7fe ff22 	bl	800173c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d908      	bls.n	8002914 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e146      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	42420000 	.word	0x42420000
 8002910:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	4b92      	ldr	r3, [pc, #584]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e9      	bne.n	80028f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a6 	beq.w	8002a7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4b8b      	ldr	r3, [pc, #556]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10d      	bne.n	800295a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	4b88      	ldr	r3, [pc, #544]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	4a87      	ldr	r2, [pc, #540]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002948:	61d3      	str	r3, [r2, #28]
 800294a:	4b85      	ldr	r3, [pc, #532]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	4b82      	ldr	r3, [pc, #520]	@ (8002b64 <HAL_RCC_OscConfig+0x4c8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d118      	bne.n	8002998 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002966:	4b7f      	ldr	r3, [pc, #508]	@ (8002b64 <HAL_RCC_OscConfig+0x4c8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b64 <HAL_RCC_OscConfig+0x4c8>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002972:	f7fe fee3 	bl	800173c <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297a:	f7fe fedf 	bl	800173c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b64      	cmp	r3, #100	@ 0x64
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e103      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	4b75      	ldr	r3, [pc, #468]	@ (8002b64 <HAL_RCC_OscConfig+0x4c8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x312>
 80029a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	e02d      	b.n	8002a0a <HAL_RCC_OscConfig+0x36e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x334>
 80029b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a69      	ldr	r2, [pc, #420]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6213      	str	r3, [r2, #32]
 80029c2:	4b67      	ldr	r3, [pc, #412]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a66      	ldr	r2, [pc, #408]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	f023 0304 	bic.w	r3, r3, #4
 80029cc:	6213      	str	r3, [r2, #32]
 80029ce:	e01c      	b.n	8002a0a <HAL_RCC_OscConfig+0x36e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d10c      	bne.n	80029f2 <HAL_RCC_OscConfig+0x356>
 80029d8:	4b61      	ldr	r3, [pc, #388]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4a60      	ldr	r2, [pc, #384]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6213      	str	r3, [r2, #32]
 80029e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	e00b      	b.n	8002a0a <HAL_RCC_OscConfig+0x36e>
 80029f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	6213      	str	r3, [r2, #32]
 80029fe:	4b58      	ldr	r3, [pc, #352]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4a57      	ldr	r2, [pc, #348]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	f023 0304 	bic.w	r3, r3, #4
 8002a08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d015      	beq.n	8002a3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fe93 	bl	800173c <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe fe8f 	bl	800173c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0b1      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	4b4b      	ldr	r3, [pc, #300]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ee      	beq.n	8002a1a <HAL_RCC_OscConfig+0x37e>
 8002a3c:	e014      	b.n	8002a68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fe7d 	bl	800173c <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fe79 	bl	800173c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e09b      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5c:	4b40      	ldr	r3, [pc, #256]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1ee      	bne.n	8002a46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d105      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4a3b      	ldr	r2, [pc, #236]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8087 	beq.w	8002b92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a84:	4b36      	ldr	r3, [pc, #216]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d061      	beq.n	8002b54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d146      	bne.n	8002b26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a98:	4b33      	ldr	r3, [pc, #204]	@ (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fe4d 	bl	800173c <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe fe49 	bl	800173c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e06d      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab8:	4b29      	ldr	r3, [pc, #164]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f0      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002acc:	d108      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ace:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4921      	ldr	r1, [pc, #132]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a19      	ldr	r1, [r3, #32]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	430b      	orrs	r3, r1
 8002af2:	491b      	ldr	r1, [pc, #108]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe fe1d 	bl	800173c <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe fe19 	bl	800173c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e03d      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x46a>
 8002b24:	e035      	b.n	8002b92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fe06 	bl	800173c <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fe02 	bl	800173c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e026      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x498>
 8002b52:	e01e      	b.n	8002b92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e019      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40007000 	.word	0x40007000
 8002b68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_OscConfig+0x500>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0d0      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b67      	ldr	r3, [pc, #412]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	4965      	ldr	r1, [pc, #404]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a58      	ldr	r2, [pc, #352]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a52      	ldr	r2, [pc, #328]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d040      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d115      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e073      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06b      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7e:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f023 0203 	bic.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4936      	ldr	r1, [pc, #216]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c90:	f7fe fd54 	bl	800173c <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c98:	f7fe fd50 	bl	800173c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e053      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	4b2d      	ldr	r3, [pc, #180]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 020c 	and.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d1eb      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d210      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 0207 	bic.w	r2, r3, #7
 8002cd6:	4922      	ldr	r1, [pc, #136]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490a      	ldr	r1, [pc, #40]	@ (8002d68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <HAL_RCC_ClockConfig+0x1cc>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_ClockConfig+0x1d0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe fcb2 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08004270 	.word	0x08004270
 8002d6c:	20000014 	.word	0x20000014
 8002d70:	20000018 	.word	0x20000018

08002d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x30>
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x36>
 8002da2:	e027      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002da6:	613b      	str	r3, [r7, #16]
      break;
 8002da8:	e027      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	0c9b      	lsrs	r3, r3, #18
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	4a17      	ldr	r2, [pc, #92]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dc2:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	0c5b      	lsrs	r3, r3, #17
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	4a11      	ldr	r2, [pc, #68]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002dd6:	fb03 f202 	mul.w	r2, r3, r2
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e004      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a0c      	ldr	r2, [pc, #48]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	613b      	str	r3, [r7, #16]
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002df6:	613b      	str	r3, [r7, #16]
      break;
 8002df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfa:	693b      	ldr	r3, [r7, #16]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	007a1200 	.word	0x007a1200
 8002e10:	08004288 	.word	0x08004288
 8002e14:	08004298 	.word	0x08004298
 8002e18:	003d0900 	.word	0x003d0900

08002e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e20:	4b02      	ldr	r3, [pc, #8]	@ (8002e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	20000014 	.word	0x20000014

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e34:	f7ff fff2 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4903      	ldr	r1, [pc, #12]	@ (8002e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08004280 	.word	0x08004280

08002e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e5c:	f7ff ffde 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	0adb      	lsrs	r3, r3, #11
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4903      	ldr	r1, [pc, #12]	@ (8002e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	08004280 	.word	0x08004280

08002e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e88:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <RCC_Delay+0x34>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb8 <RCC_Delay+0x38>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0a5b      	lsrs	r3, r3, #9
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e9c:	bf00      	nop
  }
  while (Delay --);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1e5a      	subs	r2, r3, #1
 8002ea2:	60fa      	str	r2, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f9      	bne.n	8002e9c <RCC_Delay+0x1c>
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	20000014 	.word	0x20000014
 8002eb8:	10624dd3 	.word	0x10624dd3

08002ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e041      	b.n	8002f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fad0 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f000 fa5c 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d001      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e03a      	b.n	8002fea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0x98>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00e      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0x58>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9e:	d009      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0x58>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a14      	ldr	r2, [pc, #80]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0x58>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a13      	ldr	r2, [pc, #76]	@ (8002ffc <HAL_TIM_Base_Start_IT+0xa0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d111      	bne.n	8002fd8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d010      	beq.n	8002fe8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	e007      	b.n	8002fe8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000800 	.word	0x40000800

08003000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d020      	beq.n	8003064 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0202 	mvn.w	r2, #2
 8003034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f998 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f98b 	bl	800336e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f99a 	bl	8003392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d020      	beq.n	80030b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0204 	mvn.w	r2, #4
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2202      	movs	r2, #2
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f972 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f965 	bl	800336e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f974 	bl	8003392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d020      	beq.n	80030fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0208 	mvn.w	r2, #8
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2204      	movs	r2, #4
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f94c 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f93f 	bl	800336e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f94e 	bl	8003392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d020      	beq.n	8003148 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0210 	mvn.w	r2, #16
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2208      	movs	r2, #8
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f926 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f919 	bl	800336e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f928 	bl	8003392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0201 	mvn.w	r2, #1
 8003164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fe28 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00c      	beq.n	8003190 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fa7f 	bl	800368e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00c      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8f8 	bl	80033a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0220 	mvn.w	r2, #32
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fa52 	bl	800367c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_ConfigClockSource+0x1c>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e0b4      	b.n	8003366 <HAL_TIM_ConfigClockSource+0x186>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800321a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003234:	d03e      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323a:	f200 8087 	bhi.w	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003242:	f000 8086 	beq.w	8003352 <HAL_TIM_ConfigClockSource+0x172>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324a:	d87f      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800324c:	2b70      	cmp	r3, #112	@ 0x70
 800324e:	d01a      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0xa6>
 8003250:	2b70      	cmp	r3, #112	@ 0x70
 8003252:	d87b      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b60      	cmp	r3, #96	@ 0x60
 8003256:	d050      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x11a>
 8003258:	2b60      	cmp	r3, #96	@ 0x60
 800325a:	d877      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b50      	cmp	r3, #80	@ 0x50
 800325e:	d03c      	beq.n	80032da <HAL_TIM_ConfigClockSource+0xfa>
 8003260:	2b50      	cmp	r3, #80	@ 0x50
 8003262:	d873      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b40      	cmp	r3, #64	@ 0x40
 8003266:	d058      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x13a>
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d86f      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b30      	cmp	r3, #48	@ 0x30
 800326e:	d064      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x15a>
 8003270:	2b30      	cmp	r3, #48	@ 0x30
 8003272:	d86b      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b20      	cmp	r3, #32
 8003276:	d060      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x15a>
 8003278:	2b20      	cmp	r3, #32
 800327a:	d867      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d05c      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x15a>
 8003280:	2b10      	cmp	r3, #16
 8003282:	d05a      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	e062      	b.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003296:	f000 f974 	bl	8003582 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	609a      	str	r2, [r3, #8]
      break;
 80032b2:	e04f      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032c4:	f000 f95d 	bl	8003582 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032d6:	609a      	str	r2, [r3, #8]
      break;
 80032d8:	e03c      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	461a      	mov	r2, r3
 80032e8:	f000 f8d4 	bl	8003494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2150      	movs	r1, #80	@ 0x50
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f92b 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 80032f8:	e02c      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003306:	461a      	mov	r2, r3
 8003308:	f000 f8f2 	bl	80034f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2160      	movs	r1, #96	@ 0x60
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f91b 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 8003318:	e01c      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003326:	461a      	mov	r2, r3
 8003328:	f000 f8b4 	bl	8003494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2140      	movs	r1, #64	@ 0x40
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f90b 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 8003338:	e00c      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f000 f902 	bl	800354e <TIM_ITRx_SetConfig>
      break;
 800334a:	e003      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      break;
 8003350:	e000      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
	...

080033b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003488 <TIM_Base_SetConfig+0xd0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00b      	beq.n	80033e8 <TIM_Base_SetConfig+0x30>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d6:	d007      	beq.n	80033e8 <TIM_Base_SetConfig+0x30>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <TIM_Base_SetConfig+0xd4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_Base_SetConfig+0x30>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003490 <TIM_Base_SetConfig+0xd8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d108      	bne.n	80033fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a22      	ldr	r2, [pc, #136]	@ (8003488 <TIM_Base_SetConfig+0xd0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00b      	beq.n	800341a <TIM_Base_SetConfig+0x62>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003408:	d007      	beq.n	800341a <TIM_Base_SetConfig+0x62>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <TIM_Base_SetConfig+0xd4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_Base_SetConfig+0x62>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1e      	ldr	r2, [pc, #120]	@ (8003490 <TIM_Base_SetConfig+0xd8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d108      	bne.n	800342c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a0d      	ldr	r2, [pc, #52]	@ (8003488 <TIM_Base_SetConfig+0xd0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d103      	bne.n	8003460 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	611a      	str	r2, [r3, #16]
  }
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800

08003494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f023 030a 	bic.w	r3, r3, #10
 80034d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0210 	bic.w	r2, r3, #16
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800351a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	031b      	lsls	r3, r3, #12
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	f043 0307 	orr.w	r3, r3, #7
 8003570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	609a      	str	r2, [r3, #8]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800359c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	021a      	lsls	r2, r3, #8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	609a      	str	r2, [r3, #8]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e046      	b.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a16      	ldr	r2, [pc, #88]	@ (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003624:	d009      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a12      	ldr	r2, [pc, #72]	@ (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a10      	ldr	r2, [pc, #64]	@ (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10c      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800

0800367c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e042      	b.n	8003738 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd ff02 	bl	80014d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	@ 0x24
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f82b 	bl	8003740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800377a:	f023 030c 	bic.w	r3, r3, #12
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	430b      	orrs	r3, r1
 8003786:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003854 <UART_SetConfig+0x114>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d103      	bne.n	80037b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037a8:	f7ff fb56 	bl	8002e58 <HAL_RCC_GetPCLK2Freq>
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	e002      	b.n	80037b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037b0:	f7ff fb3e 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 80037b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009a      	lsls	r2, r3, #2
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	4a22      	ldr	r2, [pc, #136]	@ (8003858 <UART_SetConfig+0x118>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	0119      	lsls	r1, r3, #4
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	009a      	lsls	r2, r3, #2
 80037e0:	441a      	add	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003858 <UART_SetConfig+0x118>)
 80037ee:	fba3 0302 	umull	r0, r3, r3, r2
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	2064      	movs	r0, #100	@ 0x64
 80037f6:	fb00 f303 	mul.w	r3, r0, r3
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	3332      	adds	r3, #50	@ 0x32
 8003800:	4a15      	ldr	r2, [pc, #84]	@ (8003858 <UART_SetConfig+0x118>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800380c:	4419      	add	r1, r3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009a      	lsls	r2, r3, #2
 8003818:	441a      	add	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	fbb2 f2f3 	udiv	r2, r2, r3
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <UART_SetConfig+0x118>)
 8003826:	fba3 0302 	umull	r0, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2064      	movs	r0, #100	@ 0x64
 800382e:	fb00 f303 	mul.w	r3, r0, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	3332      	adds	r3, #50	@ 0x32
 8003838:	4a07      	ldr	r2, [pc, #28]	@ (8003858 <UART_SetConfig+0x118>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	f003 020f 	and.w	r2, r3, #15
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	440a      	add	r2, r1
 800384a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40013800 	.word	0x40013800
 8003858:	51eb851f 	.word	0x51eb851f

0800385c <malloc>:
 800385c:	4b02      	ldr	r3, [pc, #8]	@ (8003868 <malloc+0xc>)
 800385e:	4601      	mov	r1, r0
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	f000 b82d 	b.w	80038c0 <_malloc_r>
 8003866:	bf00      	nop
 8003868:	20000020 	.word	0x20000020

0800386c <free>:
 800386c:	4b02      	ldr	r3, [pc, #8]	@ (8003878 <free+0xc>)
 800386e:	4601      	mov	r1, r0
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	f000 b915 	b.w	8003aa0 <_free_r>
 8003876:	bf00      	nop
 8003878:	20000020 	.word	0x20000020

0800387c <sbrk_aligned>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4e0f      	ldr	r6, [pc, #60]	@ (80038bc <sbrk_aligned+0x40>)
 8003880:	460c      	mov	r4, r1
 8003882:	6831      	ldr	r1, [r6, #0]
 8003884:	4605      	mov	r5, r0
 8003886:	b911      	cbnz	r1, 800388e <sbrk_aligned+0x12>
 8003888:	f000 f8ce 	bl	8003a28 <_sbrk_r>
 800388c:	6030      	str	r0, [r6, #0]
 800388e:	4621      	mov	r1, r4
 8003890:	4628      	mov	r0, r5
 8003892:	f000 f8c9 	bl	8003a28 <_sbrk_r>
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	d103      	bne.n	80038a2 <sbrk_aligned+0x26>
 800389a:	f04f 34ff 	mov.w	r4, #4294967295
 800389e:	4620      	mov	r0, r4
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	1cc4      	adds	r4, r0, #3
 80038a4:	f024 0403 	bic.w	r4, r4, #3
 80038a8:	42a0      	cmp	r0, r4
 80038aa:	d0f8      	beq.n	800389e <sbrk_aligned+0x22>
 80038ac:	1a21      	subs	r1, r4, r0
 80038ae:	4628      	mov	r0, r5
 80038b0:	f000 f8ba 	bl	8003a28 <_sbrk_r>
 80038b4:	3001      	adds	r0, #1
 80038b6:	d1f2      	bne.n	800389e <sbrk_aligned+0x22>
 80038b8:	e7ef      	b.n	800389a <sbrk_aligned+0x1e>
 80038ba:	bf00      	nop
 80038bc:	20000194 	.word	0x20000194

080038c0 <_malloc_r>:
 80038c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038c4:	1ccd      	adds	r5, r1, #3
 80038c6:	f025 0503 	bic.w	r5, r5, #3
 80038ca:	3508      	adds	r5, #8
 80038cc:	2d0c      	cmp	r5, #12
 80038ce:	bf38      	it	cc
 80038d0:	250c      	movcc	r5, #12
 80038d2:	2d00      	cmp	r5, #0
 80038d4:	4606      	mov	r6, r0
 80038d6:	db01      	blt.n	80038dc <_malloc_r+0x1c>
 80038d8:	42a9      	cmp	r1, r5
 80038da:	d904      	bls.n	80038e6 <_malloc_r+0x26>
 80038dc:	230c      	movs	r3, #12
 80038de:	6033      	str	r3, [r6, #0]
 80038e0:	2000      	movs	r0, #0
 80038e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039bc <_malloc_r+0xfc>
 80038ea:	f000 f869 	bl	80039c0 <__malloc_lock>
 80038ee:	f8d8 3000 	ldr.w	r3, [r8]
 80038f2:	461c      	mov	r4, r3
 80038f4:	bb44      	cbnz	r4, 8003948 <_malloc_r+0x88>
 80038f6:	4629      	mov	r1, r5
 80038f8:	4630      	mov	r0, r6
 80038fa:	f7ff ffbf 	bl	800387c <sbrk_aligned>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	4604      	mov	r4, r0
 8003902:	d158      	bne.n	80039b6 <_malloc_r+0xf6>
 8003904:	f8d8 4000 	ldr.w	r4, [r8]
 8003908:	4627      	mov	r7, r4
 800390a:	2f00      	cmp	r7, #0
 800390c:	d143      	bne.n	8003996 <_malloc_r+0xd6>
 800390e:	2c00      	cmp	r4, #0
 8003910:	d04b      	beq.n	80039aa <_malloc_r+0xea>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	4639      	mov	r1, r7
 8003916:	4630      	mov	r0, r6
 8003918:	eb04 0903 	add.w	r9, r4, r3
 800391c:	f000 f884 	bl	8003a28 <_sbrk_r>
 8003920:	4581      	cmp	r9, r0
 8003922:	d142      	bne.n	80039aa <_malloc_r+0xea>
 8003924:	6821      	ldr	r1, [r4, #0]
 8003926:	4630      	mov	r0, r6
 8003928:	1a6d      	subs	r5, r5, r1
 800392a:	4629      	mov	r1, r5
 800392c:	f7ff ffa6 	bl	800387c <sbrk_aligned>
 8003930:	3001      	adds	r0, #1
 8003932:	d03a      	beq.n	80039aa <_malloc_r+0xea>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	442b      	add	r3, r5
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	f8d8 3000 	ldr.w	r3, [r8]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	bb62      	cbnz	r2, 800399c <_malloc_r+0xdc>
 8003942:	f8c8 7000 	str.w	r7, [r8]
 8003946:	e00f      	b.n	8003968 <_malloc_r+0xa8>
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	1b52      	subs	r2, r2, r5
 800394c:	d420      	bmi.n	8003990 <_malloc_r+0xd0>
 800394e:	2a0b      	cmp	r2, #11
 8003950:	d917      	bls.n	8003982 <_malloc_r+0xc2>
 8003952:	1961      	adds	r1, r4, r5
 8003954:	42a3      	cmp	r3, r4
 8003956:	6025      	str	r5, [r4, #0]
 8003958:	bf18      	it	ne
 800395a:	6059      	strne	r1, [r3, #4]
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	bf08      	it	eq
 8003960:	f8c8 1000 	streq.w	r1, [r8]
 8003964:	5162      	str	r2, [r4, r5]
 8003966:	604b      	str	r3, [r1, #4]
 8003968:	4630      	mov	r0, r6
 800396a:	f000 f82f 	bl	80039cc <__malloc_unlock>
 800396e:	f104 000b 	add.w	r0, r4, #11
 8003972:	1d23      	adds	r3, r4, #4
 8003974:	f020 0007 	bic.w	r0, r0, #7
 8003978:	1ac2      	subs	r2, r0, r3
 800397a:	bf1c      	itt	ne
 800397c:	1a1b      	subne	r3, r3, r0
 800397e:	50a3      	strne	r3, [r4, r2]
 8003980:	e7af      	b.n	80038e2 <_malloc_r+0x22>
 8003982:	6862      	ldr	r2, [r4, #4]
 8003984:	42a3      	cmp	r3, r4
 8003986:	bf0c      	ite	eq
 8003988:	f8c8 2000 	streq.w	r2, [r8]
 800398c:	605a      	strne	r2, [r3, #4]
 800398e:	e7eb      	b.n	8003968 <_malloc_r+0xa8>
 8003990:	4623      	mov	r3, r4
 8003992:	6864      	ldr	r4, [r4, #4]
 8003994:	e7ae      	b.n	80038f4 <_malloc_r+0x34>
 8003996:	463c      	mov	r4, r7
 8003998:	687f      	ldr	r7, [r7, #4]
 800399a:	e7b6      	b.n	800390a <_malloc_r+0x4a>
 800399c:	461a      	mov	r2, r3
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	d1fb      	bne.n	800399c <_malloc_r+0xdc>
 80039a4:	2300      	movs	r3, #0
 80039a6:	6053      	str	r3, [r2, #4]
 80039a8:	e7de      	b.n	8003968 <_malloc_r+0xa8>
 80039aa:	230c      	movs	r3, #12
 80039ac:	4630      	mov	r0, r6
 80039ae:	6033      	str	r3, [r6, #0]
 80039b0:	f000 f80c 	bl	80039cc <__malloc_unlock>
 80039b4:	e794      	b.n	80038e0 <_malloc_r+0x20>
 80039b6:	6005      	str	r5, [r0, #0]
 80039b8:	e7d6      	b.n	8003968 <_malloc_r+0xa8>
 80039ba:	bf00      	nop
 80039bc:	20000198 	.word	0x20000198

080039c0 <__malloc_lock>:
 80039c0:	4801      	ldr	r0, [pc, #4]	@ (80039c8 <__malloc_lock+0x8>)
 80039c2:	f000 b86b 	b.w	8003a9c <__retarget_lock_acquire_recursive>
 80039c6:	bf00      	nop
 80039c8:	200002d8 	.word	0x200002d8

080039cc <__malloc_unlock>:
 80039cc:	4801      	ldr	r0, [pc, #4]	@ (80039d4 <__malloc_unlock+0x8>)
 80039ce:	f000 b866 	b.w	8003a9e <__retarget_lock_release_recursive>
 80039d2:	bf00      	nop
 80039d4:	200002d8 	.word	0x200002d8

080039d8 <siprintf>:
 80039d8:	b40e      	push	{r1, r2, r3}
 80039da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80039de:	b500      	push	{lr}
 80039e0:	b09c      	sub	sp, #112	@ 0x70
 80039e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80039e4:	9002      	str	r0, [sp, #8]
 80039e6:	9006      	str	r0, [sp, #24]
 80039e8:	9107      	str	r1, [sp, #28]
 80039ea:	9104      	str	r1, [sp, #16]
 80039ec:	4808      	ldr	r0, [pc, #32]	@ (8003a10 <siprintf+0x38>)
 80039ee:	4909      	ldr	r1, [pc, #36]	@ (8003a14 <siprintf+0x3c>)
 80039f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80039f4:	9105      	str	r1, [sp, #20]
 80039f6:	6800      	ldr	r0, [r0, #0]
 80039f8:	a902      	add	r1, sp, #8
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	f000 f8f4 	bl	8003be8 <_svfiprintf_r>
 8003a00:	2200      	movs	r2, #0
 8003a02:	9b02      	ldr	r3, [sp, #8]
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	b01c      	add	sp, #112	@ 0x70
 8003a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a0c:	b003      	add	sp, #12
 8003a0e:	4770      	bx	lr
 8003a10:	20000020 	.word	0x20000020
 8003a14:	ffff0208 	.word	0xffff0208

08003a18 <memset>:
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4402      	add	r2, r0
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <memset+0xa>
 8003a20:	4770      	bx	lr
 8003a22:	f803 1b01 	strb.w	r1, [r3], #1
 8003a26:	e7f9      	b.n	8003a1c <memset+0x4>

08003a28 <_sbrk_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	4d05      	ldr	r5, [pc, #20]	@ (8003a44 <_sbrk_r+0x1c>)
 8003a2e:	4604      	mov	r4, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	602b      	str	r3, [r5, #0]
 8003a34:	f7fd fdc8 	bl	80015c8 <_sbrk>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d102      	bne.n	8003a42 <_sbrk_r+0x1a>
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	b103      	cbz	r3, 8003a42 <_sbrk_r+0x1a>
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	200002d4 	.word	0x200002d4

08003a48 <__errno>:
 8003a48:	4b01      	ldr	r3, [pc, #4]	@ (8003a50 <__errno+0x8>)
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000020 	.word	0x20000020

08003a54 <__libc_init_array>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	2600      	movs	r6, #0
 8003a58:	4d0c      	ldr	r5, [pc, #48]	@ (8003a8c <__libc_init_array+0x38>)
 8003a5a:	4c0d      	ldr	r4, [pc, #52]	@ (8003a90 <__libc_init_array+0x3c>)
 8003a5c:	1b64      	subs	r4, r4, r5
 8003a5e:	10a4      	asrs	r4, r4, #2
 8003a60:	42a6      	cmp	r6, r4
 8003a62:	d109      	bne.n	8003a78 <__libc_init_array+0x24>
 8003a64:	f000 fbba 	bl	80041dc <_init>
 8003a68:	2600      	movs	r6, #0
 8003a6a:	4d0a      	ldr	r5, [pc, #40]	@ (8003a94 <__libc_init_array+0x40>)
 8003a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a98 <__libc_init_array+0x44>)
 8003a6e:	1b64      	subs	r4, r4, r5
 8003a70:	10a4      	asrs	r4, r4, #2
 8003a72:	42a6      	cmp	r6, r4
 8003a74:	d105      	bne.n	8003a82 <__libc_init_array+0x2e>
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 8003a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7c:	4798      	blx	r3
 8003a7e:	3601      	adds	r6, #1
 8003a80:	e7ee      	b.n	8003a60 <__libc_init_array+0xc>
 8003a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a86:	4798      	blx	r3
 8003a88:	3601      	adds	r6, #1
 8003a8a:	e7f2      	b.n	8003a72 <__libc_init_array+0x1e>
 8003a8c:	080042d0 	.word	0x080042d0
 8003a90:	080042d0 	.word	0x080042d0
 8003a94:	080042d0 	.word	0x080042d0
 8003a98:	080042d4 	.word	0x080042d4

08003a9c <__retarget_lock_acquire_recursive>:
 8003a9c:	4770      	bx	lr

08003a9e <__retarget_lock_release_recursive>:
 8003a9e:	4770      	bx	lr

08003aa0 <_free_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	d040      	beq.n	8003b2a <_free_r+0x8a>
 8003aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aac:	1f0c      	subs	r4, r1, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bfb8      	it	lt
 8003ab2:	18e4      	addlt	r4, r4, r3
 8003ab4:	f7ff ff84 	bl	80039c0 <__malloc_lock>
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b2c <_free_r+0x8c>)
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	b933      	cbnz	r3, 8003acc <_free_r+0x2c>
 8003abe:	6063      	str	r3, [r4, #4]
 8003ac0:	6014      	str	r4, [r2, #0]
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ac8:	f7ff bf80 	b.w	80039cc <__malloc_unlock>
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	d908      	bls.n	8003ae2 <_free_r+0x42>
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	1821      	adds	r1, r4, r0
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	bf01      	itttt	eq
 8003ad8:	6819      	ldreq	r1, [r3, #0]
 8003ada:	685b      	ldreq	r3, [r3, #4]
 8003adc:	1809      	addeq	r1, r1, r0
 8003ade:	6021      	streq	r1, [r4, #0]
 8003ae0:	e7ed      	b.n	8003abe <_free_r+0x1e>
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	b10b      	cbz	r3, 8003aec <_free_r+0x4c>
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	d9fa      	bls.n	8003ae2 <_free_r+0x42>
 8003aec:	6811      	ldr	r1, [r2, #0]
 8003aee:	1850      	adds	r0, r2, r1
 8003af0:	42a0      	cmp	r0, r4
 8003af2:	d10b      	bne.n	8003b0c <_free_r+0x6c>
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	4401      	add	r1, r0
 8003af8:	1850      	adds	r0, r2, r1
 8003afa:	4283      	cmp	r3, r0
 8003afc:	6011      	str	r1, [r2, #0]
 8003afe:	d1e0      	bne.n	8003ac2 <_free_r+0x22>
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4408      	add	r0, r1
 8003b06:	6010      	str	r0, [r2, #0]
 8003b08:	6053      	str	r3, [r2, #4]
 8003b0a:	e7da      	b.n	8003ac2 <_free_r+0x22>
 8003b0c:	d902      	bls.n	8003b14 <_free_r+0x74>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	602b      	str	r3, [r5, #0]
 8003b12:	e7d6      	b.n	8003ac2 <_free_r+0x22>
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	1821      	adds	r1, r4, r0
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	bf01      	itttt	eq
 8003b1c:	6819      	ldreq	r1, [r3, #0]
 8003b1e:	685b      	ldreq	r3, [r3, #4]
 8003b20:	1809      	addeq	r1, r1, r0
 8003b22:	6021      	streq	r1, [r4, #0]
 8003b24:	6063      	str	r3, [r4, #4]
 8003b26:	6054      	str	r4, [r2, #4]
 8003b28:	e7cb      	b.n	8003ac2 <_free_r+0x22>
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	20000198 	.word	0x20000198

08003b30 <__ssputs_r>:
 8003b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	461f      	mov	r7, r3
 8003b36:	688e      	ldr	r6, [r1, #8]
 8003b38:	4682      	mov	sl, r0
 8003b3a:	42be      	cmp	r6, r7
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	4690      	mov	r8, r2
 8003b40:	680b      	ldr	r3, [r1, #0]
 8003b42:	d82d      	bhi.n	8003ba0 <__ssputs_r+0x70>
 8003b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b4c:	d026      	beq.n	8003b9c <__ssputs_r+0x6c>
 8003b4e:	6965      	ldr	r5, [r4, #20]
 8003b50:	6909      	ldr	r1, [r1, #16]
 8003b52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b56:	eba3 0901 	sub.w	r9, r3, r1
 8003b5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b5e:	1c7b      	adds	r3, r7, #1
 8003b60:	444b      	add	r3, r9
 8003b62:	106d      	asrs	r5, r5, #1
 8003b64:	429d      	cmp	r5, r3
 8003b66:	bf38      	it	cc
 8003b68:	461d      	movcc	r5, r3
 8003b6a:	0553      	lsls	r3, r2, #21
 8003b6c:	d527      	bpl.n	8003bbe <__ssputs_r+0x8e>
 8003b6e:	4629      	mov	r1, r5
 8003b70:	f7ff fea6 	bl	80038c0 <_malloc_r>
 8003b74:	4606      	mov	r6, r0
 8003b76:	b360      	cbz	r0, 8003bd2 <__ssputs_r+0xa2>
 8003b78:	464a      	mov	r2, r9
 8003b7a:	6921      	ldr	r1, [r4, #16]
 8003b7c:	f000 faea 	bl	8004154 <memcpy>
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b8a:	81a3      	strh	r3, [r4, #12]
 8003b8c:	6126      	str	r6, [r4, #16]
 8003b8e:	444e      	add	r6, r9
 8003b90:	6026      	str	r6, [r4, #0]
 8003b92:	463e      	mov	r6, r7
 8003b94:	6165      	str	r5, [r4, #20]
 8003b96:	eba5 0509 	sub.w	r5, r5, r9
 8003b9a:	60a5      	str	r5, [r4, #8]
 8003b9c:	42be      	cmp	r6, r7
 8003b9e:	d900      	bls.n	8003ba2 <__ssputs_r+0x72>
 8003ba0:	463e      	mov	r6, r7
 8003ba2:	4632      	mov	r2, r6
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	f000 faac 	bl	8004104 <memmove>
 8003bac:	2000      	movs	r0, #0
 8003bae:	68a3      	ldr	r3, [r4, #8]
 8003bb0:	1b9b      	subs	r3, r3, r6
 8003bb2:	60a3      	str	r3, [r4, #8]
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	4433      	add	r3, r6
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bbe:	462a      	mov	r2, r5
 8003bc0:	f000 fad6 	bl	8004170 <_realloc_r>
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d1e0      	bne.n	8003b8c <__ssputs_r+0x5c>
 8003bca:	4650      	mov	r0, sl
 8003bcc:	6921      	ldr	r1, [r4, #16]
 8003bce:	f7ff ff67 	bl	8003aa0 <_free_r>
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	f8ca 3000 	str.w	r3, [sl]
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295
 8003bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003be2:	81a3      	strh	r3, [r4, #12]
 8003be4:	e7e9      	b.n	8003bba <__ssputs_r+0x8a>
	...

08003be8 <_svfiprintf_r>:
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	4698      	mov	r8, r3
 8003bee:	898b      	ldrh	r3, [r1, #12]
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	460d      	mov	r5, r1
 8003bf6:	4614      	mov	r4, r2
 8003bf8:	b09d      	sub	sp, #116	@ 0x74
 8003bfa:	d510      	bpl.n	8003c1e <_svfiprintf_r+0x36>
 8003bfc:	690b      	ldr	r3, [r1, #16]
 8003bfe:	b973      	cbnz	r3, 8003c1e <_svfiprintf_r+0x36>
 8003c00:	2140      	movs	r1, #64	@ 0x40
 8003c02:	f7ff fe5d 	bl	80038c0 <_malloc_r>
 8003c06:	6028      	str	r0, [r5, #0]
 8003c08:	6128      	str	r0, [r5, #16]
 8003c0a:	b930      	cbnz	r0, 8003c1a <_svfiprintf_r+0x32>
 8003c0c:	230c      	movs	r3, #12
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	b01d      	add	sp, #116	@ 0x74
 8003c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1a:	2340      	movs	r3, #64	@ 0x40
 8003c1c:	616b      	str	r3, [r5, #20]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c22:	2320      	movs	r3, #32
 8003c24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c28:	2330      	movs	r3, #48	@ 0x30
 8003c2a:	f04f 0901 	mov.w	r9, #1
 8003c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c32:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003dcc <_svfiprintf_r+0x1e4>
 8003c36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	469a      	mov	sl, r3
 8003c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c42:	b10a      	cbz	r2, 8003c48 <_svfiprintf_r+0x60>
 8003c44:	2a25      	cmp	r2, #37	@ 0x25
 8003c46:	d1f9      	bne.n	8003c3c <_svfiprintf_r+0x54>
 8003c48:	ebba 0b04 	subs.w	fp, sl, r4
 8003c4c:	d00b      	beq.n	8003c66 <_svfiprintf_r+0x7e>
 8003c4e:	465b      	mov	r3, fp
 8003c50:	4622      	mov	r2, r4
 8003c52:	4629      	mov	r1, r5
 8003c54:	4638      	mov	r0, r7
 8003c56:	f7ff ff6b 	bl	8003b30 <__ssputs_r>
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f000 80a7 	beq.w	8003dae <_svfiprintf_r+0x1c6>
 8003c60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c62:	445a      	add	r2, fp
 8003c64:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c66:	f89a 3000 	ldrb.w	r3, [sl]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 809f 	beq.w	8003dae <_svfiprintf_r+0x1c6>
 8003c70:	2300      	movs	r3, #0
 8003c72:	f04f 32ff 	mov.w	r2, #4294967295
 8003c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c7a:	f10a 0a01 	add.w	sl, sl, #1
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	9307      	str	r3, [sp, #28]
 8003c82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c86:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c88:	4654      	mov	r4, sl
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c90:	484e      	ldr	r0, [pc, #312]	@ (8003dcc <_svfiprintf_r+0x1e4>)
 8003c92:	f000 fa51 	bl	8004138 <memchr>
 8003c96:	9a04      	ldr	r2, [sp, #16]
 8003c98:	b9d8      	cbnz	r0, 8003cd2 <_svfiprintf_r+0xea>
 8003c9a:	06d0      	lsls	r0, r2, #27
 8003c9c:	bf44      	itt	mi
 8003c9e:	2320      	movmi	r3, #32
 8003ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ca4:	0711      	lsls	r1, r2, #28
 8003ca6:	bf44      	itt	mi
 8003ca8:	232b      	movmi	r3, #43	@ 0x2b
 8003caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cae:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cb4:	d015      	beq.n	8003ce2 <_svfiprintf_r+0xfa>
 8003cb6:	4654      	mov	r4, sl
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f04f 0c0a 	mov.w	ip, #10
 8003cbe:	9a07      	ldr	r2, [sp, #28]
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cc6:	3b30      	subs	r3, #48	@ 0x30
 8003cc8:	2b09      	cmp	r3, #9
 8003cca:	d94b      	bls.n	8003d64 <_svfiprintf_r+0x17c>
 8003ccc:	b1b0      	cbz	r0, 8003cfc <_svfiprintf_r+0x114>
 8003cce:	9207      	str	r2, [sp, #28]
 8003cd0:	e014      	b.n	8003cfc <_svfiprintf_r+0x114>
 8003cd2:	eba0 0308 	sub.w	r3, r0, r8
 8003cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	46a2      	mov	sl, r4
 8003cde:	9304      	str	r3, [sp, #16]
 8003ce0:	e7d2      	b.n	8003c88 <_svfiprintf_r+0xa0>
 8003ce2:	9b03      	ldr	r3, [sp, #12]
 8003ce4:	1d19      	adds	r1, r3, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	9103      	str	r1, [sp, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bfbb      	ittet	lt
 8003cee:	425b      	neglt	r3, r3
 8003cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8003cf4:	9307      	strge	r3, [sp, #28]
 8003cf6:	9307      	strlt	r3, [sp, #28]
 8003cf8:	bfb8      	it	lt
 8003cfa:	9204      	strlt	r2, [sp, #16]
 8003cfc:	7823      	ldrb	r3, [r4, #0]
 8003cfe:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d00:	d10a      	bne.n	8003d18 <_svfiprintf_r+0x130>
 8003d02:	7863      	ldrb	r3, [r4, #1]
 8003d04:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d06:	d132      	bne.n	8003d6e <_svfiprintf_r+0x186>
 8003d08:	9b03      	ldr	r3, [sp, #12]
 8003d0a:	3402      	adds	r4, #2
 8003d0c:	1d1a      	adds	r2, r3, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	9203      	str	r2, [sp, #12]
 8003d12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d16:	9305      	str	r3, [sp, #20]
 8003d18:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003dd0 <_svfiprintf_r+0x1e8>
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	4650      	mov	r0, sl
 8003d20:	7821      	ldrb	r1, [r4, #0]
 8003d22:	f000 fa09 	bl	8004138 <memchr>
 8003d26:	b138      	cbz	r0, 8003d38 <_svfiprintf_r+0x150>
 8003d28:	2240      	movs	r2, #64	@ 0x40
 8003d2a:	9b04      	ldr	r3, [sp, #16]
 8003d2c:	eba0 000a 	sub.w	r0, r0, sl
 8003d30:	4082      	lsls	r2, r0
 8003d32:	4313      	orrs	r3, r2
 8003d34:	3401      	adds	r4, #1
 8003d36:	9304      	str	r3, [sp, #16]
 8003d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d3c:	2206      	movs	r2, #6
 8003d3e:	4825      	ldr	r0, [pc, #148]	@ (8003dd4 <_svfiprintf_r+0x1ec>)
 8003d40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d44:	f000 f9f8 	bl	8004138 <memchr>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d036      	beq.n	8003dba <_svfiprintf_r+0x1d2>
 8003d4c:	4b22      	ldr	r3, [pc, #136]	@ (8003dd8 <_svfiprintf_r+0x1f0>)
 8003d4e:	bb1b      	cbnz	r3, 8003d98 <_svfiprintf_r+0x1b0>
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	3307      	adds	r3, #7
 8003d54:	f023 0307 	bic.w	r3, r3, #7
 8003d58:	3308      	adds	r3, #8
 8003d5a:	9303      	str	r3, [sp, #12]
 8003d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d5e:	4433      	add	r3, r6
 8003d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d62:	e76a      	b.n	8003c3a <_svfiprintf_r+0x52>
 8003d64:	460c      	mov	r4, r1
 8003d66:	2001      	movs	r0, #1
 8003d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d6c:	e7a8      	b.n	8003cc0 <_svfiprintf_r+0xd8>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f04f 0c0a 	mov.w	ip, #10
 8003d74:	4619      	mov	r1, r3
 8003d76:	3401      	adds	r4, #1
 8003d78:	9305      	str	r3, [sp, #20]
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d80:	3a30      	subs	r2, #48	@ 0x30
 8003d82:	2a09      	cmp	r2, #9
 8003d84:	d903      	bls.n	8003d8e <_svfiprintf_r+0x1a6>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0c6      	beq.n	8003d18 <_svfiprintf_r+0x130>
 8003d8a:	9105      	str	r1, [sp, #20]
 8003d8c:	e7c4      	b.n	8003d18 <_svfiprintf_r+0x130>
 8003d8e:	4604      	mov	r4, r0
 8003d90:	2301      	movs	r3, #1
 8003d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d96:	e7f0      	b.n	8003d7a <_svfiprintf_r+0x192>
 8003d98:	ab03      	add	r3, sp, #12
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	462a      	mov	r2, r5
 8003d9e:	4638      	mov	r0, r7
 8003da0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ddc <_svfiprintf_r+0x1f4>)
 8003da2:	a904      	add	r1, sp, #16
 8003da4:	f3af 8000 	nop.w
 8003da8:	1c42      	adds	r2, r0, #1
 8003daa:	4606      	mov	r6, r0
 8003dac:	d1d6      	bne.n	8003d5c <_svfiprintf_r+0x174>
 8003dae:	89ab      	ldrh	r3, [r5, #12]
 8003db0:	065b      	lsls	r3, r3, #25
 8003db2:	f53f af2d 	bmi.w	8003c10 <_svfiprintf_r+0x28>
 8003db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003db8:	e72c      	b.n	8003c14 <_svfiprintf_r+0x2c>
 8003dba:	ab03      	add	r3, sp, #12
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	462a      	mov	r2, r5
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <_svfiprintf_r+0x1f4>)
 8003dc4:	a904      	add	r1, sp, #16
 8003dc6:	f000 f87d 	bl	8003ec4 <_printf_i>
 8003dca:	e7ed      	b.n	8003da8 <_svfiprintf_r+0x1c0>
 8003dcc:	0800429a 	.word	0x0800429a
 8003dd0:	080042a0 	.word	0x080042a0
 8003dd4:	080042a4 	.word	0x080042a4
 8003dd8:	00000000 	.word	0x00000000
 8003ddc:	08003b31 	.word	0x08003b31

08003de0 <_printf_common>:
 8003de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de4:	4616      	mov	r6, r2
 8003de6:	4698      	mov	r8, r3
 8003de8:	688a      	ldr	r2, [r1, #8]
 8003dea:	690b      	ldr	r3, [r1, #16]
 8003dec:	4607      	mov	r7, r0
 8003dee:	4293      	cmp	r3, r2
 8003df0:	bfb8      	it	lt
 8003df2:	4613      	movlt	r3, r2
 8003df4:	6033      	str	r3, [r6, #0]
 8003df6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e00:	b10a      	cbz	r2, 8003e06 <_printf_common+0x26>
 8003e02:	3301      	adds	r3, #1
 8003e04:	6033      	str	r3, [r6, #0]
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	0699      	lsls	r1, r3, #26
 8003e0a:	bf42      	ittt	mi
 8003e0c:	6833      	ldrmi	r3, [r6, #0]
 8003e0e:	3302      	addmi	r3, #2
 8003e10:	6033      	strmi	r3, [r6, #0]
 8003e12:	6825      	ldr	r5, [r4, #0]
 8003e14:	f015 0506 	ands.w	r5, r5, #6
 8003e18:	d106      	bne.n	8003e28 <_printf_common+0x48>
 8003e1a:	f104 0a19 	add.w	sl, r4, #25
 8003e1e:	68e3      	ldr	r3, [r4, #12]
 8003e20:	6832      	ldr	r2, [r6, #0]
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	42ab      	cmp	r3, r5
 8003e26:	dc2b      	bgt.n	8003e80 <_printf_common+0xa0>
 8003e28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	3b00      	subs	r3, #0
 8003e30:	bf18      	it	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	0692      	lsls	r2, r2, #26
 8003e36:	d430      	bmi.n	8003e9a <_printf_common+0xba>
 8003e38:	4641      	mov	r1, r8
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e40:	47c8      	blx	r9
 8003e42:	3001      	adds	r0, #1
 8003e44:	d023      	beq.n	8003e8e <_printf_common+0xae>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	6922      	ldr	r2, [r4, #16]
 8003e4a:	f003 0306 	and.w	r3, r3, #6
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	bf14      	ite	ne
 8003e52:	2500      	movne	r5, #0
 8003e54:	6833      	ldreq	r3, [r6, #0]
 8003e56:	f04f 0600 	mov.w	r6, #0
 8003e5a:	bf08      	it	eq
 8003e5c:	68e5      	ldreq	r5, [r4, #12]
 8003e5e:	f104 041a 	add.w	r4, r4, #26
 8003e62:	bf08      	it	eq
 8003e64:	1aed      	subeq	r5, r5, r3
 8003e66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e6a:	bf08      	it	eq
 8003e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e70:	4293      	cmp	r3, r2
 8003e72:	bfc4      	itt	gt
 8003e74:	1a9b      	subgt	r3, r3, r2
 8003e76:	18ed      	addgt	r5, r5, r3
 8003e78:	42b5      	cmp	r5, r6
 8003e7a:	d11a      	bne.n	8003eb2 <_printf_common+0xd2>
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	e008      	b.n	8003e92 <_printf_common+0xb2>
 8003e80:	2301      	movs	r3, #1
 8003e82:	4652      	mov	r2, sl
 8003e84:	4641      	mov	r1, r8
 8003e86:	4638      	mov	r0, r7
 8003e88:	47c8      	blx	r9
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d103      	bne.n	8003e96 <_printf_common+0xb6>
 8003e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e96:	3501      	adds	r5, #1
 8003e98:	e7c1      	b.n	8003e1e <_printf_common+0x3e>
 8003e9a:	2030      	movs	r0, #48	@ 0x30
 8003e9c:	18e1      	adds	r1, r4, r3
 8003e9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ea8:	4422      	add	r2, r4
 8003eaa:	3302      	adds	r3, #2
 8003eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003eb0:	e7c2      	b.n	8003e38 <_printf_common+0x58>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	4638      	mov	r0, r7
 8003eba:	47c8      	blx	r9
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d0e6      	beq.n	8003e8e <_printf_common+0xae>
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7d9      	b.n	8003e78 <_printf_common+0x98>

08003ec4 <_printf_i>:
 8003ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec8:	7e0f      	ldrb	r7, [r1, #24]
 8003eca:	4691      	mov	r9, r2
 8003ecc:	2f78      	cmp	r7, #120	@ 0x78
 8003ece:	4680      	mov	r8, r0
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	469a      	mov	sl, r3
 8003ed4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ed6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eda:	d807      	bhi.n	8003eec <_printf_i+0x28>
 8003edc:	2f62      	cmp	r7, #98	@ 0x62
 8003ede:	d80a      	bhi.n	8003ef6 <_printf_i+0x32>
 8003ee0:	2f00      	cmp	r7, #0
 8003ee2:	f000 80d3 	beq.w	800408c <_printf_i+0x1c8>
 8003ee6:	2f58      	cmp	r7, #88	@ 0x58
 8003ee8:	f000 80ba 	beq.w	8004060 <_printf_i+0x19c>
 8003eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ef0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ef4:	e03a      	b.n	8003f6c <_printf_i+0xa8>
 8003ef6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003efa:	2b15      	cmp	r3, #21
 8003efc:	d8f6      	bhi.n	8003eec <_printf_i+0x28>
 8003efe:	a101      	add	r1, pc, #4	@ (adr r1, 8003f04 <_printf_i+0x40>)
 8003f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f04:	08003f5d 	.word	0x08003f5d
 8003f08:	08003f71 	.word	0x08003f71
 8003f0c:	08003eed 	.word	0x08003eed
 8003f10:	08003eed 	.word	0x08003eed
 8003f14:	08003eed 	.word	0x08003eed
 8003f18:	08003eed 	.word	0x08003eed
 8003f1c:	08003f71 	.word	0x08003f71
 8003f20:	08003eed 	.word	0x08003eed
 8003f24:	08003eed 	.word	0x08003eed
 8003f28:	08003eed 	.word	0x08003eed
 8003f2c:	08003eed 	.word	0x08003eed
 8003f30:	08004073 	.word	0x08004073
 8003f34:	08003f9b 	.word	0x08003f9b
 8003f38:	0800402d 	.word	0x0800402d
 8003f3c:	08003eed 	.word	0x08003eed
 8003f40:	08003eed 	.word	0x08003eed
 8003f44:	08004095 	.word	0x08004095
 8003f48:	08003eed 	.word	0x08003eed
 8003f4c:	08003f9b 	.word	0x08003f9b
 8003f50:	08003eed 	.word	0x08003eed
 8003f54:	08003eed 	.word	0x08003eed
 8003f58:	08004035 	.word	0x08004035
 8003f5c:	6833      	ldr	r3, [r6, #0]
 8003f5e:	1d1a      	adds	r2, r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6032      	str	r2, [r6, #0]
 8003f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e09e      	b.n	80040ae <_printf_i+0x1ea>
 8003f70:	6833      	ldr	r3, [r6, #0]
 8003f72:	6820      	ldr	r0, [r4, #0]
 8003f74:	1d19      	adds	r1, r3, #4
 8003f76:	6031      	str	r1, [r6, #0]
 8003f78:	0606      	lsls	r6, r0, #24
 8003f7a:	d501      	bpl.n	8003f80 <_printf_i+0xbc>
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	e003      	b.n	8003f88 <_printf_i+0xc4>
 8003f80:	0645      	lsls	r5, r0, #25
 8003f82:	d5fb      	bpl.n	8003f7c <_printf_i+0xb8>
 8003f84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	da03      	bge.n	8003f94 <_printf_i+0xd0>
 8003f8c:	232d      	movs	r3, #45	@ 0x2d
 8003f8e:	426d      	negs	r5, r5
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f94:	230a      	movs	r3, #10
 8003f96:	4859      	ldr	r0, [pc, #356]	@ (80040fc <_printf_i+0x238>)
 8003f98:	e011      	b.n	8003fbe <_printf_i+0xfa>
 8003f9a:	6821      	ldr	r1, [r4, #0]
 8003f9c:	6833      	ldr	r3, [r6, #0]
 8003f9e:	0608      	lsls	r0, r1, #24
 8003fa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fa4:	d402      	bmi.n	8003fac <_printf_i+0xe8>
 8003fa6:	0649      	lsls	r1, r1, #25
 8003fa8:	bf48      	it	mi
 8003faa:	b2ad      	uxthmi	r5, r5
 8003fac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fae:	6033      	str	r3, [r6, #0]
 8003fb0:	bf14      	ite	ne
 8003fb2:	230a      	movne	r3, #10
 8003fb4:	2308      	moveq	r3, #8
 8003fb6:	4851      	ldr	r0, [pc, #324]	@ (80040fc <_printf_i+0x238>)
 8003fb8:	2100      	movs	r1, #0
 8003fba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fbe:	6866      	ldr	r6, [r4, #4]
 8003fc0:	2e00      	cmp	r6, #0
 8003fc2:	bfa8      	it	ge
 8003fc4:	6821      	ldrge	r1, [r4, #0]
 8003fc6:	60a6      	str	r6, [r4, #8]
 8003fc8:	bfa4      	itt	ge
 8003fca:	f021 0104 	bicge.w	r1, r1, #4
 8003fce:	6021      	strge	r1, [r4, #0]
 8003fd0:	b90d      	cbnz	r5, 8003fd6 <_printf_i+0x112>
 8003fd2:	2e00      	cmp	r6, #0
 8003fd4:	d04b      	beq.n	800406e <_printf_i+0x1aa>
 8003fd6:	4616      	mov	r6, r2
 8003fd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fdc:	fb03 5711 	mls	r7, r3, r1, r5
 8003fe0:	5dc7      	ldrb	r7, [r0, r7]
 8003fe2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fe6:	462f      	mov	r7, r5
 8003fe8:	42bb      	cmp	r3, r7
 8003fea:	460d      	mov	r5, r1
 8003fec:	d9f4      	bls.n	8003fd8 <_printf_i+0x114>
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d10b      	bne.n	800400a <_printf_i+0x146>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	07df      	lsls	r7, r3, #31
 8003ff6:	d508      	bpl.n	800400a <_printf_i+0x146>
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	6861      	ldr	r1, [r4, #4]
 8003ffc:	4299      	cmp	r1, r3
 8003ffe:	bfde      	ittt	le
 8004000:	2330      	movle	r3, #48	@ 0x30
 8004002:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004006:	f106 36ff 	addle.w	r6, r6, #4294967295
 800400a:	1b92      	subs	r2, r2, r6
 800400c:	6122      	str	r2, [r4, #16]
 800400e:	464b      	mov	r3, r9
 8004010:	4621      	mov	r1, r4
 8004012:	4640      	mov	r0, r8
 8004014:	f8cd a000 	str.w	sl, [sp]
 8004018:	aa03      	add	r2, sp, #12
 800401a:	f7ff fee1 	bl	8003de0 <_printf_common>
 800401e:	3001      	adds	r0, #1
 8004020:	d14a      	bne.n	80040b8 <_printf_i+0x1f4>
 8004022:	f04f 30ff 	mov.w	r0, #4294967295
 8004026:	b004      	add	sp, #16
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	f043 0320 	orr.w	r3, r3, #32
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	2778      	movs	r7, #120	@ 0x78
 8004036:	4832      	ldr	r0, [pc, #200]	@ (8004100 <_printf_i+0x23c>)
 8004038:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	6831      	ldr	r1, [r6, #0]
 8004040:	061f      	lsls	r7, r3, #24
 8004042:	f851 5b04 	ldr.w	r5, [r1], #4
 8004046:	d402      	bmi.n	800404e <_printf_i+0x18a>
 8004048:	065f      	lsls	r7, r3, #25
 800404a:	bf48      	it	mi
 800404c:	b2ad      	uxthmi	r5, r5
 800404e:	6031      	str	r1, [r6, #0]
 8004050:	07d9      	lsls	r1, r3, #31
 8004052:	bf44      	itt	mi
 8004054:	f043 0320 	orrmi.w	r3, r3, #32
 8004058:	6023      	strmi	r3, [r4, #0]
 800405a:	b11d      	cbz	r5, 8004064 <_printf_i+0x1a0>
 800405c:	2310      	movs	r3, #16
 800405e:	e7ab      	b.n	8003fb8 <_printf_i+0xf4>
 8004060:	4826      	ldr	r0, [pc, #152]	@ (80040fc <_printf_i+0x238>)
 8004062:	e7e9      	b.n	8004038 <_printf_i+0x174>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	f023 0320 	bic.w	r3, r3, #32
 800406a:	6023      	str	r3, [r4, #0]
 800406c:	e7f6      	b.n	800405c <_printf_i+0x198>
 800406e:	4616      	mov	r6, r2
 8004070:	e7bd      	b.n	8003fee <_printf_i+0x12a>
 8004072:	6833      	ldr	r3, [r6, #0]
 8004074:	6825      	ldr	r5, [r4, #0]
 8004076:	1d18      	adds	r0, r3, #4
 8004078:	6961      	ldr	r1, [r4, #20]
 800407a:	6030      	str	r0, [r6, #0]
 800407c:	062e      	lsls	r6, r5, #24
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	d501      	bpl.n	8004086 <_printf_i+0x1c2>
 8004082:	6019      	str	r1, [r3, #0]
 8004084:	e002      	b.n	800408c <_printf_i+0x1c8>
 8004086:	0668      	lsls	r0, r5, #25
 8004088:	d5fb      	bpl.n	8004082 <_printf_i+0x1be>
 800408a:	8019      	strh	r1, [r3, #0]
 800408c:	2300      	movs	r3, #0
 800408e:	4616      	mov	r6, r2
 8004090:	6123      	str	r3, [r4, #16]
 8004092:	e7bc      	b.n	800400e <_printf_i+0x14a>
 8004094:	6833      	ldr	r3, [r6, #0]
 8004096:	2100      	movs	r1, #0
 8004098:	1d1a      	adds	r2, r3, #4
 800409a:	6032      	str	r2, [r6, #0]
 800409c:	681e      	ldr	r6, [r3, #0]
 800409e:	6862      	ldr	r2, [r4, #4]
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 f849 	bl	8004138 <memchr>
 80040a6:	b108      	cbz	r0, 80040ac <_printf_i+0x1e8>
 80040a8:	1b80      	subs	r0, r0, r6
 80040aa:	6060      	str	r0, [r4, #4]
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	6123      	str	r3, [r4, #16]
 80040b0:	2300      	movs	r3, #0
 80040b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040b6:	e7aa      	b.n	800400e <_printf_i+0x14a>
 80040b8:	4632      	mov	r2, r6
 80040ba:	4649      	mov	r1, r9
 80040bc:	4640      	mov	r0, r8
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	47d0      	blx	sl
 80040c2:	3001      	adds	r0, #1
 80040c4:	d0ad      	beq.n	8004022 <_printf_i+0x15e>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	079b      	lsls	r3, r3, #30
 80040ca:	d413      	bmi.n	80040f4 <_printf_i+0x230>
 80040cc:	68e0      	ldr	r0, [r4, #12]
 80040ce:	9b03      	ldr	r3, [sp, #12]
 80040d0:	4298      	cmp	r0, r3
 80040d2:	bfb8      	it	lt
 80040d4:	4618      	movlt	r0, r3
 80040d6:	e7a6      	b.n	8004026 <_printf_i+0x162>
 80040d8:	2301      	movs	r3, #1
 80040da:	4632      	mov	r2, r6
 80040dc:	4649      	mov	r1, r9
 80040de:	4640      	mov	r0, r8
 80040e0:	47d0      	blx	sl
 80040e2:	3001      	adds	r0, #1
 80040e4:	d09d      	beq.n	8004022 <_printf_i+0x15e>
 80040e6:	3501      	adds	r5, #1
 80040e8:	68e3      	ldr	r3, [r4, #12]
 80040ea:	9903      	ldr	r1, [sp, #12]
 80040ec:	1a5b      	subs	r3, r3, r1
 80040ee:	42ab      	cmp	r3, r5
 80040f0:	dcf2      	bgt.n	80040d8 <_printf_i+0x214>
 80040f2:	e7eb      	b.n	80040cc <_printf_i+0x208>
 80040f4:	2500      	movs	r5, #0
 80040f6:	f104 0619 	add.w	r6, r4, #25
 80040fa:	e7f5      	b.n	80040e8 <_printf_i+0x224>
 80040fc:	080042ab 	.word	0x080042ab
 8004100:	080042bc 	.word	0x080042bc

08004104 <memmove>:
 8004104:	4288      	cmp	r0, r1
 8004106:	b510      	push	{r4, lr}
 8004108:	eb01 0402 	add.w	r4, r1, r2
 800410c:	d902      	bls.n	8004114 <memmove+0x10>
 800410e:	4284      	cmp	r4, r0
 8004110:	4623      	mov	r3, r4
 8004112:	d807      	bhi.n	8004124 <memmove+0x20>
 8004114:	1e43      	subs	r3, r0, #1
 8004116:	42a1      	cmp	r1, r4
 8004118:	d008      	beq.n	800412c <memmove+0x28>
 800411a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800411e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004122:	e7f8      	b.n	8004116 <memmove+0x12>
 8004124:	4601      	mov	r1, r0
 8004126:	4402      	add	r2, r0
 8004128:	428a      	cmp	r2, r1
 800412a:	d100      	bne.n	800412e <memmove+0x2a>
 800412c:	bd10      	pop	{r4, pc}
 800412e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004136:	e7f7      	b.n	8004128 <memmove+0x24>

08004138 <memchr>:
 8004138:	4603      	mov	r3, r0
 800413a:	b510      	push	{r4, lr}
 800413c:	b2c9      	uxtb	r1, r1
 800413e:	4402      	add	r2, r0
 8004140:	4293      	cmp	r3, r2
 8004142:	4618      	mov	r0, r3
 8004144:	d101      	bne.n	800414a <memchr+0x12>
 8004146:	2000      	movs	r0, #0
 8004148:	e003      	b.n	8004152 <memchr+0x1a>
 800414a:	7804      	ldrb	r4, [r0, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	428c      	cmp	r4, r1
 8004150:	d1f6      	bne.n	8004140 <memchr+0x8>
 8004152:	bd10      	pop	{r4, pc}

08004154 <memcpy>:
 8004154:	440a      	add	r2, r1
 8004156:	4291      	cmp	r1, r2
 8004158:	f100 33ff 	add.w	r3, r0, #4294967295
 800415c:	d100      	bne.n	8004160 <memcpy+0xc>
 800415e:	4770      	bx	lr
 8004160:	b510      	push	{r4, lr}
 8004162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004166:	4291      	cmp	r1, r2
 8004168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800416c:	d1f9      	bne.n	8004162 <memcpy+0xe>
 800416e:	bd10      	pop	{r4, pc}

08004170 <_realloc_r>:
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	4680      	mov	r8, r0
 8004176:	4615      	mov	r5, r2
 8004178:	460c      	mov	r4, r1
 800417a:	b921      	cbnz	r1, 8004186 <_realloc_r+0x16>
 800417c:	4611      	mov	r1, r2
 800417e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004182:	f7ff bb9d 	b.w	80038c0 <_malloc_r>
 8004186:	b92a      	cbnz	r2, 8004194 <_realloc_r+0x24>
 8004188:	f7ff fc8a 	bl	8003aa0 <_free_r>
 800418c:	2400      	movs	r4, #0
 800418e:	4620      	mov	r0, r4
 8004190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004194:	f000 f81a 	bl	80041cc <_malloc_usable_size_r>
 8004198:	4285      	cmp	r5, r0
 800419a:	4606      	mov	r6, r0
 800419c:	d802      	bhi.n	80041a4 <_realloc_r+0x34>
 800419e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041a2:	d8f4      	bhi.n	800418e <_realloc_r+0x1e>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4640      	mov	r0, r8
 80041a8:	f7ff fb8a 	bl	80038c0 <_malloc_r>
 80041ac:	4607      	mov	r7, r0
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d0ec      	beq.n	800418c <_realloc_r+0x1c>
 80041b2:	42b5      	cmp	r5, r6
 80041b4:	462a      	mov	r2, r5
 80041b6:	4621      	mov	r1, r4
 80041b8:	bf28      	it	cs
 80041ba:	4632      	movcs	r2, r6
 80041bc:	f7ff ffca 	bl	8004154 <memcpy>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4640      	mov	r0, r8
 80041c4:	f7ff fc6c 	bl	8003aa0 <_free_r>
 80041c8:	463c      	mov	r4, r7
 80041ca:	e7e0      	b.n	800418e <_realloc_r+0x1e>

080041cc <_malloc_usable_size_r>:
 80041cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d0:	1f18      	subs	r0, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bfbc      	itt	lt
 80041d6:	580b      	ldrlt	r3, [r1, r0]
 80041d8:	18c0      	addlt	r0, r0, r3
 80041da:	4770      	bx	lr

080041dc <_init>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr

080041e8 <_fini>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	bf00      	nop
 80041ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ee:	bc08      	pop	{r3}
 80041f0:	469e      	mov	lr, r3
 80041f2:	4770      	bx	lr
